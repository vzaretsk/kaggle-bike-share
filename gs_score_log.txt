search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1974, stdev: 0.0234 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [15, 25, 50], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [15, 25, 50], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1964, stdev: 0.0240 MSE for {'n_estimators': 500, 'max_depth': 15, 'max_leaf_nodes': None, 'max_features': None}
mean: 0.1975, stdev: 0.0236 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}
mean: 0.1971, stdev: 0.0236 MSE for {'n_estimators': 500, 'max_depth': 50, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_depth': [15, 25, 50], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_depth': [15, 25, 50], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1960, stdev: 0.0247 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 15}
mean: 0.1973, stdev: 0.0245 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25}
mean: 0.1968, stdev: 0.0242 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 50}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [None]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1968, stdev: 0.0241 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': None}

search space:
{'max_leaf_nodes': [None], 'max_features': [0.5], 'max_depth': [15], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [0.5], 'max_depth': [15], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1940, stdev: 0.0262 MSE for {'max_depth': 15, 'max_features': 0.5, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [15], 'max_depth': [15], 'n_estimators': [500], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [15], 'max_depth': [15], 'n_estimators': [500], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2005, stdev: 0.0243 MSE for {'max_leaf_nodes': 15, 'max_depth': 15, 'n_estimators': 500, 'max_features': 0.5}

search space:
{'n_estimators': [50], 'max_depth': [15], 'max_features': [0.5], 'max_leaf_nodes': [15]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [50], 'max_depth': [15], 'max_features': [0.5], 'max_leaf_nodes': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2004, stdev: 0.0238 MSE for {'n_estimators': 50, 'max_depth': 15, 'max_features': 0.5, 'max_leaf_nodes': 15}

search space:
{'n_estimators': [50], 'max_leaf_nodes': [15], 'max_depth': [15], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [50], 'max_leaf_nodes': [15], 'max_depth': [15], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2232, stdev: 0.0281 MSE for {'n_estimators': 50, 'max_leaf_nodes': 15, 'max_depth': 15, 'max_features': 0.5}

search space:
{'max_depth': [15], 'max_features': [0.5], 'n_estimators': [50], 'max_leaf_nodes': [15]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [15], 'max_features': [0.5], 'n_estimators': [50], 'max_leaf_nodes': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2188, stdev: 0.0254 MSE for {'max_depth': 15, 'max_features': 0.5, 'max_leaf_nodes': 15, 'n_estimators': 50}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3822, stdev: 0.0856 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]}
cross validation:
ShuffleSplit(10862, n_iter=4, test_size=0.35, random_state=None)
grid search:
GridSearchCV(cv=ShuffleSplit(10862, n_iter=4, test_size=0.35, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1917, stdev: 0.0035 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2427, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1774, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2419, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1772, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1776, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_features': [None], 'n_estimators': [500, 1000], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500, 1000], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2414, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None}
mean: 0.2416, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 1000, 'max_depth': 25, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [50, 100, 500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [50, 100, 500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2437, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 50}
mean: 0.2457, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 100}
mean: 0.2424, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_features': [0.1, 0.3, 0.6, 1.0], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [0.1, 0.3, 0.6, 1.0], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.5877, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': 0.1, 'max_depth': 25, 'n_estimators': 500}
mean: 0.2841, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25, 'max_features': 0.3}
mean: 0.2448, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': 0.6, 'max_depth': 25, 'n_estimators': 500}
mean: 0.2428, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25, 'max_features': 1.0}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [0.6, 0.8, 1.0], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [0.6, 0.8, 1.0], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2452, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'max_features': 0.6, 'n_estimators': 500}
mean: 0.2428, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'max_features': 0.8, 'n_estimators': 500}
mean: 0.2419, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'max_features': 1.0, 'n_estimators': 500}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10, 25, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10, 25, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2503, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 10, 'max_leaf_nodes': None}
mean: 0.2430, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25}
mean: 0.2420, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': None, 'max_leaf_nodes': None}

search space:
{'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3826, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': 25, 'n_estimators': 500}

search space:
{'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [25, 100, 400, None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [25, 100, 400, None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3807, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': 25, 'n_estimators': 500}
mean: 0.2758, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': 100, 'n_estimators': 500}
mean: 0.2463, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': 400, 'n_estimators': 500}
mean: 0.2429, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1780, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1773, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2425, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1769, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 500}

search space:
{'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0888, stdev: 0.0000 MSE for {'loss': 'ls', 'max_depth': 10, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'subsample': 1.0, 'learning_rate': 0.01}

search space:
{'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0889, stdev: 0.0000 MSE for {'loss': 'ls', 'max_depth': 10, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'subsample': 1.0, 'learning_rate': 0.01}

search space:
{'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0889, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'subsample': 1.0, 'learning_rate': 0.01, 'loss': 'ls', 'n_estimators': 500, 'max_features': None, 'max_depth': 10}

search space:
{'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'subsample': [1.0], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0889, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'subsample': 1.0, 'max_depth': 10, 'loss': 'ls', 'n_estimators': 500, 'max_features': None, 'learning_rate': 0.01}

search space:
{'loss': ['ls'], 'subsample': [1.0], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'subsample': [1.0], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0833, stdev: 0.0000 MSE for {'loss': 'ls', 'subsample': 1.0, 'max_depth': 10, 'max_features': None, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'loss': ['ls'], 'subsample': [1.0], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'subsample': [1.0], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2850, stdev: 0.0000 MSE for {'loss': 'ls', 'subsample': 1.0, 'max_depth': 10, 'max_features': None, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'n_estimators': [5], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [5], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'n_estimators': 5, 'max_features': None, 'loss': 'ls', 'max_leaf_nodes': None, 'learning_rate': 0.01, 'subsample': 1.0, 'max_depth': 10}

search space:
{'n_estimators': [500], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_depth': [10, 20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_depth': [10, 20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2863, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'loss': 'ls', 'max_leaf_nodes': None, 'max_depth': 10, 'subsample': 1.0, 'learning_rate': 0.01}
mean: 0.4337, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'loss': 'ls', 'max_leaf_nodes': None, 'max_depth': 20, 'subsample': 1.0, 'learning_rate': 0.01}

search space:
{'subsample': [1.0], 'n_estimators': [5], 'loss': ['ls'], 'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'n_estimators': [5], 'loss': ['ls'], 'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'subsample': 1.0, 'n_estimators': 5, 'max_features': None, 'learning_rate': 0.01, 'max_depth': 10, 'max_leaf_nodes': None, 'loss': 'ls'}

search space:
{'subsample': [1.0], 'n_estimators': [100], 'loss': ['ls'], 'learning_rate': [0.01], 'max_depth': [2, 5, 10], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'n_estimators': [100], 'loss': ['ls'], 'learning_rate': [0.01], 'max_depth': [2, 5, 10], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3161, stdev: 0.0000 MSE for {'subsample': 1.0, 'n_estimators': 100, 'max_features': None, 'learning_rate': 0.01, 'max_depth': 2, 'loss': 'ls', 'max_leaf_nodes': None}
mean: 0.2958, stdev: 0.0000 MSE for {'subsample': 1.0, 'n_estimators': 100, 'max_features': None, 'learning_rate': 0.01, 'max_depth': 5, 'max_leaf_nodes': None, 'loss': 'ls'}
mean: 0.2884, stdev: 0.0000 MSE for {'subsample': 1.0, 'n_estimators': 100, 'max_features': None, 'learning_rate': 0.01, 'max_depth': 10, 'loss': 'ls', 'max_leaf_nodes': None}

search space:
{'n_estimators': [5], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [5], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'n_estimators': 5, 'max_depth': 10, 'subsample': 1.0, 'max_features': None, 'max_leaf_nodes': None, 'learning_rate': 0.01, 'loss': 'ls'}

search space:
{'n_estimators': [100], 'max_depth': [10, 14], 'subsample': [1.0], 'max_features': [None], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [100], 'max_depth': [10, 14], 'subsample': [1.0], 'max_features': [None], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2888, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_depth': 10, 'subsample': 1.0, 'max_features': None, 'max_leaf_nodes': None, 'learning_rate': 0.01, 'loss': 'ls'}
mean: 0.3162, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_depth': 14, 'subsample': 1.0, 'max_features': None, 'max_leaf_nodes': None, 'learning_rate': 0.01, 'loss': 'ls'}

search space:
{'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [5], 'subsample': [1.0], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [5], 'subsample': [1.0], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'max_features': None, 'loss': 'ls', 'n_estimators': 5, 'subsample': 1.0, 'max_depth': 10, 'learning_rate': 0.01, 'max_leaf_nodes': None}

search space:
{'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [100], 'subsample': [1.0], 'max_depth': [10], 'max_features': [0.2, 0.4, 0.6, 0.8, None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [100], 'subsample': [1.0], 'max_depth': [10], 'max_features': [0.2, 0.4, 0.6, 0.8, None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2900, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': 0.2, 'loss': 'ls', 'n_estimators': 100, 'subsample': 1.0, 'learning_rate': 0.01, 'max_depth': 10}
mean: 0.2843, stdev: 0.0000 MSE for {'max_features': 0.4, 'loss': 'ls', 'n_estimators': 100, 'subsample': 1.0, 'max_leaf_nodes': None, 'learning_rate': 0.01, 'max_depth': 10}
mean: 0.2843, stdev: 0.0000 MSE for {'max_features': 0.6, 'loss': 'ls', 'max_depth': 10, 'n_estimators': 100, 'subsample': 1.0, 'learning_rate': 0.01, 'max_leaf_nodes': None}
mean: 0.2841, stdev: 0.0000 MSE for {'learning_rate': 0.01, 'loss': 'ls', 'n_estimators': 100, 'subsample': 1.0, 'max_depth': 10, 'max_features': 0.8, 'max_leaf_nodes': None}
mean: 0.2889, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'loss': 'ls', 'n_estimators': 100, 'subsample': 1.0, 'learning_rate': 0.01, 'max_depth': 10}

search space:
{'loss': ['ls'], 'n_estimators': [5], 'learning_rate': [0.01], 'max_leaf_nodes': [None], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'n_estimators': [5], 'learning_rate': [0.01], 'max_leaf_nodes': [None], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'loss': 'ls', 'n_estimators': 5, 'learning_rate': 0.01, 'max_leaf_nodes': None, 'max_features': None, 'subsample': 1.0, 'max_depth': 10}

search space:
{'loss': ['ls'], 'n_estimators': [100], 'learning_rate': [0.01], 'max_leaf_nodes': [64, 256, 1024, None], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'n_estimators': [100], 'learning_rate': [0.01], 'max_leaf_nodes': [64, 256, 1024, None], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2794, stdev: 0.0000 MSE for {'loss': 'ls', 'n_estimators': 100, 'learning_rate': 0.01, 'max_leaf_nodes': 64, 'max_depth': 10, 'subsample': 1.0, 'max_features': None}
mean: 0.2844, stdev: 0.0000 MSE for {'loss': 'ls', 'n_estimators': 100, 'learning_rate': 0.01, 'max_leaf_nodes': 256, 'max_depth': 10, 'subsample': 1.0, 'max_features': None}
mean: 0.2924, stdev: 0.0000 MSE for {'loss': 'ls', 'n_estimators': 100, 'learning_rate': 0.01, 'max_leaf_nodes': 1024, 'max_depth': 10, 'subsample': 1.0, 'max_features': None}
mean: 0.2889, stdev: 0.0000 MSE for {'loss': 'ls', 'n_estimators': 100, 'learning_rate': 0.01, 'max_leaf_nodes': None, 'max_depth': 10, 'subsample': 1.0, 'max_features': None}

search space:
{'learning_rate': [0.01], 'subsample': [1.0], 'max_leaf_nodes': [None], 'n_estimators': [5], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'subsample': [1.0], 'max_leaf_nodes': [None], 'n_estimators': [5], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'learning_rate': 0.01, 'subsample': 1.0, 'max_leaf_nodes': None, 'n_estimators': 5, 'max_depth': 10, 'loss': 'ls', 'max_features': None}

search space:
{'learning_rate': [0.01], 'subsample': [0.5, 1.0], 'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'subsample': [0.5, 1.0], 'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2805, stdev: 0.0000 MSE for {'max_features': None, 'subsample': 0.5, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 10, 'loss': 'ls', 'learning_rate': 0.01}
mean: 0.2886, stdev: 0.0000 MSE for {'learning_rate': 0.01, 'subsample': 1.0, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 10, 'loss': 'ls', 'max_features': None}

search space:
{'subsample': [1.0], 'loss': ['ls'], 'learning_rate': [0.01], 'alpha': [0.9], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'loss': ['ls'], 'learning_rate': [0.01], 'alpha': [0.9], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'max_depth': 10, 'subsample': 1.0, 'loss': 'ls', 'learning_rate': 0.01, 'max_features': None, 'alpha': 0.9, 'max_leaf_nodes': None, 'n_estimators': 5}

search space:
{'subsample': [1.0], 'loss': ['ls'], 'learning_rate': [0.001, 0.01, 0.1], 'alpha': [0.9], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'loss': ['ls'], 'learning_rate': [0.001, 0.01, 0.1], 'alpha': [0.9], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3523, stdev: 0.0000 MSE for {'max_depth': 10, 'subsample': 1.0, 'loss': 'ls', 'learning_rate': 0.001, 'max_features': None, 'alpha': 0.9, 'max_leaf_nodes': None, 'n_estimators': 100}
mean: 0.2885, stdev: 0.0000 MSE for {'subsample': 1.0, 'loss': 'ls', 'max_depth': 10, 'max_features': None, 'alpha': 0.9, 'max_leaf_nodes': None, 'n_estimators': 100, 'learning_rate': 0.01}
mean: 0.2956, stdev: 0.0000 MSE for {'max_depth': 10, 'subsample': 1.0, 'loss': 'ls', 'learning_rate': 0.1, 'max_features': None, 'alpha': 0.9, 'max_leaf_nodes': None, 'n_estimators': 100}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'subsample': [1.0], 'loss': ['ls'], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [5], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'subsample': [1.0], 'loss': ['ls'], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [5], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'subsample': 1.0, 'alpha': 0.9, 'loss': 'ls', 'n_estimators': 5, 'max_depth': 10, 'learning_rate': 0.01, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'subsample': [1.0], 'loss': ['ls', 'lad', 'huber', 'quantile'], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [100], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'subsample': [1.0], 'loss': ['ls', 'lad', 'huber', 'quantile'], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [100], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2886, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_features': None, 'loss': 'ls', 'subsample': 1.0, 'max_leaf_nodes': None, 'max_depth': 10, 'learning_rate': 0.01, 'alpha': 0.9}
mean: 0.2812, stdev: 0.0000 MSE for {'n_estimators': 100, 'alpha': 0.9, 'loss': 'lad', 'subsample': 1.0, 'max_depth': 10, 'learning_rate': 0.01, 'max_leaf_nodes': None, 'max_features': None}
mean: 0.2876, stdev: 0.0000 MSE for {'n_estimators': 100, 'alpha': 0.9, 'subsample': 1.0, 'loss': 'huber', 'learning_rate': 0.01, 'max_depth': 10, 'max_leaf_nodes': None, 'max_features': None}
mean: 0.5656, stdev: 0.0000 MSE for {'n_estimators': 100, 'alpha': 0.9, 'subsample': 1.0, 'loss': 'quantile', 'max_leaf_nodes': None, 'max_depth': 10, 'learning_rate': 0.01, 'max_features': None}

search space:
{'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [5], 'max_leaf_nodes': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [5], 'max_leaf_nodes': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'max_features': None, 'learning_rate': 0.01, 'n_estimators': 5, 'loss': 'ls', 'max_leaf_nodes': None, 'max_depth': 10, 'subsample': 1.0, 'alpha': 0.9}

search space:
{'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [100], 'max_leaf_nodes': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [100], 'max_leaf_nodes': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2886, stdev: 0.0000 MSE for {'max_features': None, 'learning_rate': 0.01, 'n_estimators': 100, 'loss': 'ls', 'max_leaf_nodes': None, 'max_depth': 10, 'subsample': 1.0, 'alpha': 0.9}

search space:
{'max_depth': [10], 'alpha': [0.9], 'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [5], 'max_leaf_nodes': [None], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'alpha': [0.9], 'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [5], 'max_leaf_nodes': [None], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1337, stdev: 0.0199 MSE for {'max_depth': 10, 'alpha': 0.9, 'subsample': 1.0, 'max_features': None, 'learning_rate': 0.01, 'n_estimators': 5, 'max_leaf_nodes': None, 'loss': 'ls'}

search space:
{'max_depth': [10], 'alpha': [0.9], 'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [100], 'max_leaf_nodes': [None], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'alpha': [0.9], 'subsample': [1.0], 'max_features': [None], 'learning_rate': [0.01], 'n_estimators': [100], 'max_leaf_nodes': [None], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3090, stdev: 0.0356 MSE for {'max_depth': 10, 'alpha': 0.9, 'subsample': 1.0, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'learning_rate': 0.01, 'loss': 'ls'}

search space:
{'max_depth': [10], 'loss': ['ls'], 'max_leaf_nodes': [None], 'subsample': [1.0], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'n_estimators': [5]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'loss': ['ls'], 'max_leaf_nodes': [None], 'subsample': [1.0], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'n_estimators': [5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1337, stdev: 0.0198 MSE for {'max_depth': 10, 'loss': 'ls', 'max_leaf_nodes': None, 'subsample': 1.0, 'alpha': 0.9, 'learning_rate': 0.01, 'max_features': None, 'n_estimators': 5}

search space:
{'max_depth': [10], 'loss': ['ls'], 'max_leaf_nodes': [100, None], 'subsample': [1.0], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'n_estimators': [100]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'loss': ['ls'], 'max_leaf_nodes': [100, None], 'subsample': [1.0], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'n_estimators': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2991, stdev: 0.0363 MSE for {'max_depth': 10, 'loss': 'ls', 'max_leaf_nodes': 100, 'subsample': 1.0, 'alpha': 0.9, 'learning_rate': 0.01, 'max_features': None, 'n_estimators': 100}
mean: 0.3090, stdev: 0.0355 MSE for {'max_depth': 10, 'loss': 'ls', 'max_leaf_nodes': None, 'subsample': 1.0, 'alpha': 0.9, 'learning_rate': 0.01, 'max_features': None, 'n_estimators': 100}

search space:
{'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [5], 'subsample': [1.0]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [5], 'subsample': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1338, stdev: 0.0199 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 5, 'subsample': 1.0}

search space:
{'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [50, 100, 200, 500, 1000, None], 'n_estimators': [100], 'subsample': [1.0]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [50, 100, 200, 500, 1000, None], 'n_estimators': [100], 'subsample': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2989, stdev: 0.0364 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 50, 'max_features': None, 'n_estimators': 100, 'subsample': 1.0}
mean: 0.2992, stdev: 0.0362 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 100, 'max_features': None, 'n_estimators': 100, 'subsample': 1.0}
mean: 0.3017, stdev: 0.0356 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 200, 'max_features': None, 'n_estimators': 100, 'subsample': 1.0}
mean: 0.3131, stdev: 0.0350 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 500, 'max_features': None, 'n_estimators': 100, 'subsample': 1.0}
mean: 0.3176, stdev: 0.0349 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': 1000, 'n_estimators': 100, 'subsample': 1.0}
mean: 0.3088, stdev: 0.0360 MSE for {'alpha': 0.9, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 100, 'subsample': 1.0}

search space:
{'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [1.0], 'max_depth': [10], 'n_estimators': [5], 'max_leaf_nodes': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [1.0], 'max_depth': [10], 'n_estimators': [5], 'max_leaf_nodes': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1337, stdev: 0.0199 MSE for {'max_depth': 10, 'learning_rate': 0.01, 'loss': 'ls', 'subsample': 1.0, 'max_features': None, 'n_estimators': 5, 'max_leaf_nodes': None, 'alpha': 0.9}

search space:
{'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [0.2, 0.5, 1.0], 'max_depth': [10], 'n_estimators': [100, 500], 'max_leaf_nodes': [100], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [0.2, 0.5, 1.0], 'max_depth': [10], 'n_estimators': [100, 500], 'max_leaf_nodes': [100], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2915, stdev: 0.0355 MSE for {'max_depth': 10, 'learning_rate': 0.01, 'loss': 'ls', 'subsample': 0.2, 'max_features': None, 'n_estimators': 100, 'max_leaf_nodes': 100, 'alpha': 0.9}
mean: 0.2930, stdev: 0.0366 MSE for {'max_features': None, 'alpha': 0.9, 'loss': 'ls', 'subsample': 0.5, 'max_depth': 10, 'learning_rate': 0.01, 'n_estimators': 100, 'max_leaf_nodes': 100}
mean: 0.2991, stdev: 0.0362 MSE for {'learning_rate': 0.01, 'alpha': 0.9, 'loss': 'ls', 'subsample': 1.0, 'max_depth': 10, 'max_features': None, 'n_estimators': 100, 'max_leaf_nodes': 100}
mean: 0.2830, stdev: 0.0355 MSE for {'learning_rate': 0.01, 'alpha': 0.9, 'loss': 'ls', 'subsample': 0.2, 'max_depth': 10, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 100}
mean: 0.2820, stdev: 0.0361 MSE for {'learning_rate': 0.01, 'alpha': 0.9, 'loss': 'ls', 'subsample': 0.5, 'max_depth': 10, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 100}
mean: 0.2899, stdev: 0.0364 MSE for {'learning_rate': 0.01, 'alpha': 0.9, 'loss': 'ls', 'subsample': 1.0, 'max_depth': 10, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 100}

search space:
{'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_depth': [10], 'loss': ['ls'], 'subsample': [1.0], 'max_features': [None], 'n_estimators': [5], 'alpha': [0.9]}
cross validation:
ShuffleSplit(10862, n_iter=4, test_size=0.35, random_state=None)
grid search:
GridSearchCV(cv=ShuffleSplit(10862, n_iter=4, test_size=0.35, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_depth': [10], 'loss': ['ls'], 'subsample': [1.0], 'max_features': [None], 'n_estimators': [5], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1309, stdev: 0.0016 MSE for {'max_leaf_nodes': None, 'learning_rate': 0.01, 'max_depth': 10, 'loss': 'ls', 'subsample': 1.0, 'max_features': None, 'n_estimators': 5, 'alpha': 0.9}

search space:
{'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_depth': [10], 'loss': ['ls'], 'subsample': [0.2, 0.5, 1.0], 'max_features': [None], 'n_estimators': [100, 500], 'alpha': [0.9]}
cross validation:
ShuffleSplit(10862, n_iter=4, test_size=0.35, random_state=None)
grid search:
GridSearchCV(cv=ShuffleSplit(10862, n_iter=4, test_size=0.35, random_state=None),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_depth': [10], 'loss': ['ls'], 'subsample': [0.2, 0.5, 1.0], 'max_features': [None], 'n_estimators': [100, 500], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2680, stdev: 0.0052 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.2, 'learning_rate': 0.01, 'n_estimators': 100, 'alpha': 0.9}
mean: 0.2583, stdev: 0.0051 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.5, 'learning_rate': 0.01, 'n_estimators': 100, 'alpha': 0.9}
mean: 0.2584, stdev: 0.0028 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 1.0, 'learning_rate': 0.01, 'n_estimators': 100, 'alpha': 0.9}
mean: 0.2155, stdev: 0.0091 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.2, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9}
mean: 0.2118, stdev: 0.0002 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.5, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9}
mean: 0.2150, stdev: 0.0036 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 1.0, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9}

search space:
{'max_features': [None], 'n_estimators': [5], 'subsample': [1.0], 'loss': ['ls'], 'max_depth': [10], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'n_estimators': [5], 'subsample': [1.0], 'loss': ['ls'], 'max_depth': [10], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 5, 'subsample': 1.0, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': None, 'learning_rate': 0.01, 'alpha': 0.9}

search space:
{'max_features': [None], 'n_estimators': [100, 500], 'subsample': [0.2, 0.5, 1.0], 'loss': ['ls'], 'max_depth': [10], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'n_estimators': [100, 500], 'subsample': [0.2, 0.5, 1.0], 'loss': ['ls'], 'max_depth': [10], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2820, stdev: 0.0000 MSE for {'max_depth': 10, 'n_estimators': 100, 'subsample': 0.2, 'loss': 'ls', 'max_features': None, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}
mean: 0.2799, stdev: 0.0000 MSE for {'max_depth': 10, 'n_estimators': 100, 'subsample': 0.5, 'loss': 'ls', 'max_features': None, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}
mean: 0.2789, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 100, 'subsample': 1.0, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}
mean: 0.2623, stdev: 0.0000 MSE for {'max_depth': 10, 'n_estimators': 500, 'subsample': 0.2, 'loss': 'ls', 'max_features': None, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}
mean: 0.2610, stdev: 0.0000 MSE for {'max_depth': 10, 'n_estimators': 500, 'subsample': 0.5, 'loss': 'ls', 'max_features': None, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}
mean: 0.2664, stdev: 0.0000 MSE for {'max_depth': 10, 'n_estimators': 500, 'subsample': 1.0, 'loss': 'ls', 'max_features': None, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0857, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2706, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0863, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 25, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2759, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 25, 'max_features': None}

search space:
{'n_estimators': [5], 'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [5], 'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1061, stdev: 0.0000 MSE for {'n_estimators': 5, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'n_estimators': [100], 'max_features': [0.2, 0.4, 0.6, 0.8, None], 'max_leaf_nodes': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [100], 'max_features': [0.2, 0.4, 0.6, 0.8, None], 'max_leaf_nodes': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2740, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_features': 0.2, 'max_leaf_nodes': None, 'max_depth': 25}
mean: 0.2724, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_features': 0.4, 'max_leaf_nodes': None, 'max_depth': 25}
mean: 0.2698, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_features': 0.6, 'max_leaf_nodes': None, 'max_depth': 25}
mean: 0.2757, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_features': 0.8, 'max_leaf_nodes': None, 'max_depth': 25}
mean: 0.2694, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [5], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [5], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1025, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 5, 'max_depth': 25}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [5, 10, 20, 50, 100, 200]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [100], 'max_depth': [5, 10, 20, 50, 100, 200]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2880, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 5}
mean: 0.2671, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 10}
mean: 0.2718, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 20}
mean: 0.2734, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 50}
mean: 0.2734, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 100}
mean: 0.2738, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100, 'max_depth': 200}

search space:
{'n_estimators': [5], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [5], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1041, stdev: 0.0000 MSE for {'n_estimators': 5, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25}

search space:
{'n_estimators': [100], 'max_leaf_nodes': [1024, 32768, 1048576, 33554432, None], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [100], 'max_leaf_nodes': [1024, 32768, 1048576, 33554432, None], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2740, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 100, 'max_features': None, 'max_depth': 25}
mean: 0.2697, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_leaf_nodes': 32768, 'max_features': None, 'max_depth': 25}
mean: 0.2741, stdev: 0.0000 MSE for {'max_leaf_nodes': 1048576, 'n_estimators': 100, 'max_features': None, 'max_depth': 25}
mean: 0.2713, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_leaf_nodes': 33554432, 'max_features': None, 'max_depth': 25}
mean: 0.2744, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 100, 'max_features': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1109, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 5}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2754, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 100}

search space:
{'max_depth': [25], 'n_estimators': [5], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'n_estimators': [5], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1082, stdev: 0.0000 MSE for {'n_estimators': 5, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_depth': [25], 'n_estimators': [100], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'n_estimators': [100], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2769, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [5], 'alpha': [0.9], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_leaf_nodes': [None], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [5], 'alpha': [0.9], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_leaf_nodes': [None], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'n_estimators': 5, 'alpha': 0.9, 'max_depth': 10, 'max_features': None, 'learning_rate': 0.01, 'subsample': 1.0, 'max_leaf_nodes': None, 'loss': 'ls'}

search space:
{'n_estimators': [100], 'alpha': [0.9], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_leaf_nodes': [100], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [100], 'alpha': [0.9], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'subsample': [1.0], 'max_leaf_nodes': [100], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2820, stdev: 0.0000 MSE for {'learning_rate': 0.01, 'alpha': 0.9, 'max_depth': 10, 'max_features': None, 'n_estimators': 100, 'subsample': 1.0, 'max_leaf_nodes': 100, 'loss': 'ls'}

search space:
{'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [5], 'max_depth': [10], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [5], 'max_depth': [10], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1149, stdev: 0.0000 MSE for {'loss': 'ls', 'learning_rate': 0.01, 'n_estimators': 5, 'max_depth': 10, 'subsample': 1.0, 'alpha': 0.9, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [100], 'max_depth': [10], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [100], 'max_depth': [10], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2822, stdev: 0.0000 MSE for {'loss': 'ls', 'learning_rate': 0.01, 'n_estimators': 100, 'max_depth': 10, 'subsample': 1.0, 'alpha': 0.9, 'max_features': None, 'max_leaf_nodes': 100}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1783, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'max_depth': 25}

search space:
{'alpha': [0.9], 'loss': ['ls'], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'loss': ['ls'], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0893, stdev: 0.0000 MSE for {'n_estimators': 100, 'max_leaf_nodes': None, 'loss': 'ls', 'learning_rate': 0.01, 'max_depth': 10, 'alpha': 0.9, 'subsample': 1.0, 'max_features': None}

search space:
{'alpha': [0.9], 'loss': ['ls'], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'loss': ['ls'], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_depth': [10], 'subsample': [1.0], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2847, stdev: 0.0000 MSE for {'n_estimators': 100, 'loss': 'ls', 'alpha': 0.9, 'learning_rate': 0.01, 'max_depth': 10, 'max_leaf_nodes': None, 'subsample': 1.0, 'max_features': None}

search space:
{'subsample': [1.0], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0926, stdev: 0.0000 MSE for {'alpha': 0.9, 'subsample': 1.0, 'max_leaf_nodes': None, 'max_depth': 10, 'n_estimators': 100, 'loss': 'ls', 'learning_rate': 0.01, 'max_features': None}

search space:
{'subsample': [1.0], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'loss': ['ls'], 'max_depth': [10], 'n_estimators': [100], 'max_leaf_nodes': [None], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2780, stdev: 0.0000 MSE for {'subsample': 1.0, 'loss': 'ls', 'max_depth': 10, 'n_estimators': 100, 'max_leaf_nodes': None, 'learning_rate': 0.01, 'max_features': None, 'alpha': 0.9}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0888, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'learning_rate': 0.01, 'max_depth': 10, 'subsample': 1.0, 'loss': 'ls', 'alpha': 0.9, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'subsample': [1.0], 'alpha': [0.9], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2694, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'subsample': 1.0, 'loss': 'ls', 'learning_rate': 0.01, 'max_depth': 10, 'alpha': 0.9, 'max_features': None}

search space:
{'subsample': [1.0], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [10], 'loss': ['ls'], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [10], 'loss': ['ls'], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0830, stdev: 0.0000 MSE for {'subsample': 1.0, 'loss': 'ls', 'max_depth': 10, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': 10, 'alpha': 0.9, 'max_features': None}

search space:
{'subsample': [1.0], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [10], 'loss': ['ls'], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [1.0], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [10], 'loss': ['ls'], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2563, stdev: 0.0000 MSE for {'subsample': 1.0, 'max_depth': 10, 'alpha': 0.9, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': 10, 'loss': 'ls', 'max_features': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'subsample': [1.0], 'learning_rate': [0.01], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'subsample': [1.0], 'learning_rate': [0.01], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0818, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'max_depth': 10, 'alpha': 0.9, 'loss': 'ls', 'subsample': 1.0, 'learning_rate': 0.01, 'max_features': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'subsample': [1.0], 'learning_rate': [0.01], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'subsample': [1.0], 'learning_rate': [0.01], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2565, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'max_depth': 10, 'alpha': 0.9, 'loss': 'ls', 'subsample': 1.0, 'learning_rate': 0.01, 'max_features': None}

search space:
{'max_leaf_nodes': [100], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'alpha': [0.9], 'loss': ['ls'], 'max_features': [None], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'alpha': [0.9], 'loss': ['ls'], 'max_features': [None], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0789, stdev: 0.0000 MSE for {'max_leaf_nodes': 100, 'n_estimators': 500, 'max_depth': 10, 'learning_rate': 0.01, 'alpha': 0.9, 'loss': 'ls', 'max_features': None, 'subsample': 0.7}

search space:
{'max_leaf_nodes': [100], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'alpha': [0.9], 'loss': ['ls'], 'max_features': [None], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'alpha': [0.9], 'loss': ['ls'], 'max_features': [None], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2501, stdev: 0.0000 MSE for {'max_leaf_nodes': 100, 'n_estimators': 500, 'max_depth': 10, 'learning_rate': 0.01, 'alpha': 0.9, 'loss': 'ls', 'max_features': None, 'subsample': 0.7}

search space:
{'n_estimators': [500], 'subsample': [0.7], 'alpha': [0.9], 'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'subsample': [0.7], 'alpha': [0.9], 'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0789, stdev: 0.0000 MSE for {'n_estimators': 500, 'alpha': 0.9, 'learning_rate': 0.01, 'subsample': 0.7, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'max_leaf_nodes': 100}

search space:
{'n_estimators': [500], 'subsample': [0.7], 'alpha': [0.9], 'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'subsample': [0.7], 'alpha': [0.9], 'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2512, stdev: 0.0000 MSE for {'n_estimators': 500, 'alpha': 0.9, 'learning_rate': 0.01, 'max_depth': 10, 'max_features': None, 'subsample': 0.7, 'loss': 'ls', 'max_leaf_nodes': 100}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1702, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [5], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [5], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0991, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 5, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [100], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [100], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2173, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 100, 'max_depth': 25}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1449, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'alpha': [0.9], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_features': [None], 'max_depth': [10], 'subsample': [0.7], 'loss': ['ls'], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_features': [None], 'max_depth': [10], 'subsample': [0.7], 'loss': ['ls'], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0725, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'max_depth': 10, 'max_features': None, 'subsample': 0.7, 'loss': 'ls', 'alpha': 0.9}

search space:
{'alpha': [0.9], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_features': [None], 'max_depth': [10], 'subsample': [0.7], 'loss': ['ls'], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_features': [None], 'max_depth': [10], 'subsample': [0.7], 'loss': ['ls'], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2087, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'max_features': None, 'loss': 'ls', 'subsample': 0.7, 'max_depth': 10, 'alpha': 0.9}

search space:
{'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0718, stdev: 0.0000 MSE for {'learning_rate': 0.01, 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': 100, 'loss': 'ls', 'alpha': 0.9, 'subsample': 0.7, 'n_estimators': 500}

search space:
{'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2087, stdev: 0.0000 MSE for {'learning_rate': 0.01, 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': 100, 'loss': 'ls', 'alpha': 0.9, 'subsample': 0.7, 'n_estimators': 500}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [5], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [5], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0960, stdev: 0.0000 MSE for {'n_estimators': 5, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [100], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [100], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2149, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 100, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [25], 'n_estimators': [5], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_depth': [25], 'n_estimators': [5], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0943, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 5, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'max_depth': [25], 'n_estimators': [100], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_depth': [25], 'n_estimators': [100], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2149, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 100, 'max_leaf_nodes': None}

search space:
{'max_depth': [25], 'max_features': [None], 'n_estimators': [5], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'max_features': [None], 'n_estimators': [5], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0924, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 5, 'max_leaf_nodes': None}

search space:
{'max_depth': [25], 'max_features': [None], 'n_estimators': [100], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'max_features': [None], 'n_estimators': [100], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2201, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 100, 'max_leaf_nodes': None}

search space:
{'loss': ['exponential'], 'n_estimators': [200], 'learning_rate': [0.4], 'max_depth': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['exponential'], 'n_estimators': [200], 'learning_rate': [0.4], 'max_depth': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0774, stdev: 0.0000 MSE for {'loss': 'exponential', 'n_estimators': 200, 'learning_rate': 0.4, 'max_depth': 50}

search space:
{'loss': ['exponential'], 'n_estimators': [200], 'learning_rate': [0.4], 'max_depth': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search: # daily_trend_rf
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['exponential'], 'n_estimators': [200], 'learning_rate': [0.4], 'max_depth': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2172, stdev: 0.0000 MSE for {'loss': 'exponential', 'n_estimators': 200, 'learning_rate': 0.4, 'max_depth': 50}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0812, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'n_estimators': 500, 'max_features': 0.5}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [5, 10], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [5, 10], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0977, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 5, 'max_features': 0.5}
mean: 0.0808, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 10, 'max_features': 0.5}

search space:
{'max_features': [0.5], 'max_depth': [5, 10, 20], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [0.5], 'max_depth': [5, 10, 20], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0961, stdev: 0.0000 MSE for {'max_features': 0.5, 'max_depth': 5, 'n_estimators': 500, 'max_leaf_nodes': None}
mean: 0.0819, stdev: 0.0000 MSE for {'max_features': 0.5, 'max_depth': 10, 'n_estimators': 500, 'max_leaf_nodes': None}
mean: 0.0795, stdev: 0.0000 MSE for {'max_features': 0.5, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'max_depth': [20], 'max_features': [0.2, 0.5, 0.7, 1.0], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [20], 'max_features': [0.2, 0.5, 0.7, 1.0], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0891, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 20, 'max_features': 0.2, 'n_estimators': 500}
mean: 0.0801, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 20, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.0795, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 20, 'max_features': 0.7, 'n_estimators': 500}
mean: 0.0782, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 20, 'max_features': 1.0, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None}

search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [1024, 32768, 1048576, None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024, 32768, 1048576, None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500}
mean: 0.0778, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20, 'n_estimators': 500}
mean: 0.0775, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1048576, 'max_depth': 20, 'n_estimators': 500}
mean: 0.0797, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 20, 'n_estimators': 500}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32, 1024, 32768, 1048576, None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32, 1024, 32768, 1048576, None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0859, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 32, 'max_depth': 20}
mean: 0.0779, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20}
mean: 0.0794, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_depth': 20}
mean: 0.0777, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1048576, 'max_depth': 20}
mean: 0.0768, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 20}

search space:
{'max_leaf_nodes': [32, 1024, 32768, 1048576, None], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32, 1024, 32768, 1048576, None], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0847, stdev: 0.0000 MSE for {'max_leaf_nodes': 32, 'n_estimators': 500, 'max_depth': 20, 'max_features': None}
mean: 0.0770, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}
mean: 0.0770, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_features': None}
mean: 0.0763, stdev: 0.0000 MSE for {'max_leaf_nodes': 1048576, 'n_estimators': 500, 'max_depth': 20, 'max_features': None}
mean: 0.0773, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [32768, None], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [32768, None], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0767, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_features': None, 'max_depth': 20}
mean: 0.0779, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 20}

search space:
{'max_features': [None], 'max_leaf_nodes': [32768, None], 'n_estimators': [200, 500, 1000], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [32768, None], 'n_estimators': [200, 500, 1000], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 200, 'max_depth': 20}
mean: 0.0797, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_features': None, 'n_estimators': 500, 'max_depth': 20}
mean: 0.0786, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 1000, 'max_depth': 20}
mean: 0.0768, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 200, 'max_depth': 20}
mean: 0.0771, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 20}
mean: 0.0786, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 1000, 'max_depth': 20}

search space:
{'n_estimators': [200, 500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [200, 500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0805, stdev: 0.0000 MSE for {'n_estimators': 200, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 32768}
mean: 0.0790, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 32768}

search space:
{'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [200, 500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [200, 500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20, 'n_estimators': 200}
mean: 0.0765, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [32768], 'n_estimators': [200, 500, 1000], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'n_estimators': [200, 500, 1000], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0755, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 200, 'max_depth': 20, 'max_features': None}
mean: 0.0794, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_depth': 20, 'max_features': None}
mean: 0.0777, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 1000, 'max_depth': 20, 'max_features': None}

search space:
{'n_estimators': [200, 500, 1000], 'max_leaf_nodes': [32768], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [200, 500, 1000], 'max_leaf_nodes': [32768], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0776, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 200, 'max_depth': 20, 'max_features': None}
mean: 0.0774, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_depth': 20, 'max_features': None}
mean: 0.0783, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 1000, 'max_depth': 20, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [200, 500, 1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [200, 500, 1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 200}
mean: 0.0778, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 500}
mean: 0.0773, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 1000}

search space:
{'max_depth': [20], 'n_estimators': [200, 500, 1000], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'n_estimators': [200, 500, 1000], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 200, 'max_features': None, 'max_leaf_nodes': 32768}
mean: 0.0789, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 32768}
mean: 0.0784, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 1000, 'max_features': None, 'max_leaf_nodes': 32768}

search space:
{'n_estimators': [200, 500, 1000], 'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [200, 500, 1000], 'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0000 MSE for {'n_estimators': 200, 'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20}
mean: 0.0784, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20}
mean: 0.0777, stdev: 0.0000 MSE for {'n_estimators': 1000, 'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20}

search space:
{'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [200, 500, 1000], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [200, 500, 1000], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0775, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_depth': 20, 'n_estimators': 200, 'max_features': None}
mean: 0.0786, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_features': None, 'n_estimators': 500, 'max_depth': 20}
mean: 0.0778, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_features': None, 'n_estimators': 1000, 'max_depth': 20}

search space:
{'max_features': [None], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_depth': 20}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0773, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_depth': 20, 'max_features': None}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 32768}

search space:
{'max_depth': [20], 'max_leaf_nodes': [32768], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [32768], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0777, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 32768, 'max_features': None, 'n_estimators': 500}

search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 32768}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0758, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 32768}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0760, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 32768}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 32768}

search space:
{'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0789, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 32768}

search space:
{'max_leaf_nodes': [32768], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0763, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_features': None, 'n_estimators': 500, 'max_depth': 20}

search space:
{'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0774, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_features': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1598, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1598, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0190, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0190, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1442, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'max_depth': 25}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1595, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1597, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1599, stdev: 0.0000 MSE for {'n_estimators': 1000, 'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1565, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1811, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1813, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'max_depth': [25], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1816, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1816, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1820, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1816, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1815, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0769, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_features': None, 'max_depth': 20}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1817, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0791, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 32768}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1813, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0443, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500, 'max_features': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0767, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 32768, 'max_features': None}

search space:
{'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0788, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_depth': 20, 'n_estimators': 500, 'max_features': None}

search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 32768}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1814, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0234, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1818, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0234, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0461, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0506, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2085, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'max_depth': 25}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0922, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2087, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1784, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'max_depth': [25], 'max_features': [0.5, None], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [0.5, None], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1784, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': 0.5, 'max_leaf_nodes': None, 'n_estimators': 500}
mean: 0.1784, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [32, 1024, 32768, 1048576, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [32, 1024, 32768, 1048576, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1881, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': 32}
mean: 0.1784, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': 1024}
mean: 0.1785, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': 32768}
mean: 0.1785, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': 1048576}
mean: 0.1785, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [32, 1024, 32768, 1048576, None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [32, 1024, 32768, 1048576, None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1882, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 32, 'max_depth': 25, 'max_features': None}
mean: 0.1784, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 25, 'max_features': None}
mean: 0.1785, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_depth': 25, 'max_features': None}
mean: 0.1784, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1048576, 'max_depth': 25, 'max_features': None}
mean: 0.1784, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1784, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'max_depth': 25}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1474, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1784, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1893, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1894, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [16, 128, 1024], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [16, 128, 1024], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2339, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': 16, 'n_estimators': 500}
mean: 0.1893, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': 128, 'n_estimators': 500}
mean: 0.1894, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500}

search space:
{'max_depth': [25], 'max_features': [None], 'n_estimators': [20, 50, 100, 200, 500], 'max_leaf_nodes': [128]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'n_estimators': [20, 50, 100, 200, 500], 'max_leaf_nodes': [128]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1895, stdev: 0.0000 MSE for {'max_leaf_nodes': 128, 'max_features': None, 'n_estimators': 20, 'max_depth': 25}
mean: 0.1893, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 50, 'max_leaf_nodes': 128}
mean: 0.1893, stdev: 0.0000 MSE for {'max_leaf_nodes': 128, 'max_features': None, 'n_estimators': 100, 'max_depth': 25}
mean: 0.1892, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 200, 'max_leaf_nodes': 128}
mean: 0.1894, stdev: 0.0000 MSE for {'max_leaf_nodes': 128, 'max_features': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'max_leaf_nodes': [128], 'n_estimators': [200], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [128], 'n_estimators': [200], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1893, stdev: 0.0000 MSE for {'max_leaf_nodes': 128, 'n_estimators': 200, 'max_depth': 25, 'max_features': None}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1576, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1789, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1864, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [128], 'max_depth': [25], 'n_estimators': [200]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [128], 'max_depth': [25], 'n_estimators': [200]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1894, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 128, 'max_depth': 25, 'n_estimators': 200}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0757, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1434, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1425, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'max_depth': 25}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1436, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1442, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0800, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_depth': 20}

search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0788, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 32768}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1441, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None}

search space:
{'alpha': [0.9], 'n_estimators': [500], 'learning_rate': [0.01], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'n_estimators': [500], 'learning_rate': [0.01], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0722, stdev: 0.0000 MSE for {'alpha': 0.9, 'n_estimators': 500, 'max_depth': 10, 'max_features': None, 'loss': 'ls', 'learning_rate': 0.01, 'subsample': 0.7, 'max_leaf_nodes': 100}

search space:
{'alpha': [0.9], 'n_estimators': [500], 'learning_rate': [0.01], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'n_estimators': [500], 'learning_rate': [0.01], 'max_features': [None], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2083, stdev: 0.0000 MSE for {'alpha': 0.9, 'n_estimators': 500, 'learning_rate': 0.01, 'max_features': None, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 100, 'subsample': 0.7}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [5], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [5], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0894, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 5, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [100], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [100], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2159, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 100, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1436, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1436, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 32768}

search space:
{'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_depth': 20, 'max_features': None, 'n_estimators': 500}

search space:
{'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0793, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_features': None}

search space:
{'max_leaf_nodes': [32768], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0791, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1451, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1685, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None}

search space:
{'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [32768], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 500}

search space:
{'loss': ['ls'], 'subsample': [0.7], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'subsample': [0.7], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0718, stdev: 0.0000 MSE for {'subsample': 0.7, 'loss': 'ls', 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'max_features': None, 'alpha': 0.9, 'max_depth': 10, 'n_estimators': 500}

search space:
{'loss': ['ls'], 'subsample': [0.7], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'subsample': [0.7], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2082, stdev: 0.0000 MSE for {'subsample': 0.7, 'loss': 'ls', 'learning_rate': 0.01, 'max_depth': 10, 'max_features': None, 'alpha': 0.9, 'max_leaf_nodes': 100, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_depth': 20}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [32768], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 32768, 'max_depth': 20, 'n_estimators': 500}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0802, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 32768}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1448, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [32768], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_depth': 20, 'max_features': None}

search space:
{'max_depth': [20], 'max_leaf_nodes': [32768], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [32768], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0786, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 32768, 'max_features': None, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [32768], 'n_estimators': [200, 500], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [32768], 'n_estimators': [200, 500], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0805, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 200, 'max_features': None, 'max_depth': 20}
mean: 0.0775, stdev: 0.0000 MSE for {'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_features': None, 'max_depth': 20}

search space:
{'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0789, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 500, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [500, 1000, 2000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [32768], 'n_estimators': [500, 1000, 2000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0777, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 32768}
mean: 0.0784, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 1000, 'max_features': None, 'max_leaf_nodes': 32768}
mean: 0.0781, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 32768, 'n_estimators': 2000}

search space:
{'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0896, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 5}

search space:
{'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2131, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100}

search space:
{'n_estimators': [5], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [5], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0953, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 5, 'max_leaf_nodes': None}

search space:
{'n_estimators': [100], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [100], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2151, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 100, 'max_features': None}

search space:
{'n_estimators': [500], 'max_features': [0.5], 'max_leaf_nodes': [32768], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [0.5], 'max_leaf_nodes': [32768], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0810, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': 0.5, 'max_leaf_nodes': 32768, 'max_depth': 20}

search space:
{'max_features': [0.5], 'n_estimators': [500], 'max_depth': [10], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [0.5], 'n_estimators': [500], 'max_depth': [10], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0805, stdev: 0.0000 MSE for {'max_features': 0.5, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 10}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [0.5], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [0.5], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0812, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'max_features': 0.5, 'n_estimators': 500}

search space:
{'max_depth': [10], 'n_estimators': [500], 'max_features': [0.5], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [10], 'n_estimators': [500], 'max_features': [0.5], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0793, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 10, 'max_features': 0.5, 'max_leaf_nodes': None}

search space:
{'max_depth': [10], 'max_features': [0.5], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [10], 'max_features': [0.5], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0820, stdev: 0.0000 MSE for {'max_depth': 10, 'max_features': 0.5, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_depth': [10], 'max_features': [0.5], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
 -1 -1  0  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [10], 'max_features': [0.5], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0000 MSE for {'max_depth': 10, 'max_features': 0.5, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1456, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0708, stdev: 0.0051 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'n_estimators': 500, 'max_features': 0.5}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [0.5], 'max_depth': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [0.5], 'max_depth': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0723, stdev: 0.0050 MSE for {'n_estimators': 500, 'max_features': 0.5, 'max_leaf_nodes': None, 'max_depth': 8}
search space:
{'max_features': [0.5], 'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [0.5], 'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0696, stdev: 0.0056 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'n_estimators': 500, 'max_features': 0.5}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1488, stdev: 0.0070 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': 25}

search space:
{'n_estimators': [500], 'max_depth': [10], 'max_leaf_nodes': [None], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.KFold(n=456, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=456, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'max_leaf_nodes': [None], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1884, stdev: 0.1220 MSE for {'max_features': 0.5, 'n_estimators': 500, 'max_depth': 10, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10, 20, 50, 100], 'max_features': [0.5], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.KFold(n=456, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=456, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10, 20, 50, 100], 'max_features': [0.5], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1889, stdev: 0.1202 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': 0.5, 'max_depth': 10}
mean: 0.1909, stdev: 0.1238 MSE for {'max_leaf_nodes': None, 'max_depth': 20, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.1918, stdev: 0.1238 MSE for {'max_leaf_nodes': None, 'max_depth': 50, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.1870, stdev: 0.1216 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': 0.5, 'max_depth': 100}

search space:
{'n_estimators': [500], 'max_features': [0.5], 'max_leaf_nodes': [None], 'max_depth': [10, 20, 50, 100]}
cross validation:
ShuffleSplit(456, n_iter=4, test_size=0.35, random_state=None)
grid search:
GridSearchCV(cv=ShuffleSplit(456, n_iter=4, test_size=0.35, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [0.5], 'max_leaf_nodes': [None], 'max_depth': [10, 20, 50, 100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0726, stdev: 0.0097 MSE for {'n_estimators': 500, 'max_features': 0.5, 'max_leaf_nodes': None, 'max_depth': 10}
mean: 0.0720, stdev: 0.0178 MSE for {'n_estimators': 500, 'max_features': 0.5, 'max_leaf_nodes': None, 'max_depth': 20}
mean: 0.0641, stdev: 0.0099 MSE for {'n_estimators': 500, 'max_features': 0.5, 'max_leaf_nodes': None, 'max_depth': 50}
mean: 0.0872, stdev: 0.0170 MSE for {'n_estimators': 500, 'max_features': 0.5, 'max_leaf_nodes': None, 'max_depth': 100}

search space:
{'max_depth': [10, 20, 50, 100], 'max_leaf_nodes': [None], 'max_features': [0.5], 'n_estimators': [500]}
cross validation:
ShuffleSplit(456, n_iter=4, test_size=0.35, random_state=None)
grid search:
GridSearchCV(cv=ShuffleSplit(456, n_iter=4, test_size=0.35, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [10, 20, 50, 100], 'max_leaf_nodes': [None], 'max_features': [0.5], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0744, stdev: 0.0108 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.0602, stdev: 0.0098 MSE for {'max_depth': 20, 'max_leaf_nodes': None, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.0788, stdev: 0.0101 MSE for {'max_leaf_nodes': None, 'max_depth': 50, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.0815, stdev: 0.0159 MSE for {'max_leaf_nodes': None, 'max_depth': 100, 'max_features': 0.5, 'n_estimators': 500}

search space:
{'max_depth': [10, 20, 50, 100], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [0.5]}
cross validation:
ShuffleSplit(456, n_iter=4, test_size=0.35, random_state=None)
grid search:
GridSearchCV(cv=ShuffleSplit(456, n_iter=4, test_size=0.35, random_state=None),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [10, 20, 50, 100], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0855, stdev: 0.0084 MSE for {'max_depth': 10, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': 0.5}
mean: 0.0773, stdev: 0.0107 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': 0.5}
mean: 0.0786, stdev: 0.0014 MSE for {'max_depth': 50, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': 0.5}
mean: 0.0767, stdev: 0.0197 MSE for {'max_depth': 100, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': 0.5}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10, 20, 50, 100], 'max_features': [0.5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10, 20, 50, 100], 'max_features': [0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0709, stdev: 0.0048 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 10, 'max_features': 0.5}
mean: 0.0698, stdev: 0.0035 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 20, 'max_features': 0.5}
mean: 0.0697, stdev: 0.0059 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 50, 'max_features': 0.5}
mean: 0.0701, stdev: 0.0052 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 100, 'max_features': 0.5}

search space:
{'max_depth': [5, 10, 20, 50, 100, 200, 500], 'max_features': [0.5], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [5, 10, 20, 50, 100, 200, 500], 'max_features': [0.5], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0877, stdev: 0.0078 MSE for {'max_depth': 5, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': 0.5}
mean: 0.0710, stdev: 0.0056 MSE for {'max_depth': 10, 'max_features': 0.5, 'n_estimators': 500, 'max_leaf_nodes': None}
mean: 0.0709, stdev: 0.0052 MSE for {'max_depth': 20, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': 0.5}
mean: 0.0706, stdev: 0.0057 MSE for {'max_depth': 50, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': 0.5}
mean: 0.0709, stdev: 0.0063 MSE for {'max_depth': 100, 'max_features': 0.5, 'n_estimators': 500, 'max_leaf_nodes': None}
mean: 0.0699, stdev: 0.0063 MSE for {'max_depth': 200, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': 0.5}
mean: 0.0710, stdev: 0.0053 MSE for {'max_depth': 500, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': 0.5}

search space:
{'max_leaf_nodes': [None], 'max_features': [0.5], 'n_estimators': [500], 'max_depth': [5, 8, 10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_features': [0.5], 'n_estimators': [500], 'max_depth': [5, 8, 10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0874, stdev: 0.0086 MSE for {'max_leaf_nodes': None, 'max_features': 0.5, 'n_estimators': 500, 'max_depth': 5}
mean: 0.0715, stdev: 0.0054 MSE for {'max_leaf_nodes': None, 'max_features': 0.5, 'n_estimators': 500, 'max_depth': 8}
mean: 0.0704, stdev: 0.0060 MSE for {'max_leaf_nodes': None, 'max_features': 0.5, 'n_estimators': 500, 'max_depth': 10}

search space:
{'max_leaf_nodes': [None], 'max_depth': [5, 8, 10], 'max_features': [0.5], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [5, 8, 10], 'max_features': [0.5], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0897, stdev: 0.0074 MSE for {'max_leaf_nodes': None, 'max_depth': 5, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.0732, stdev: 0.0059 MSE for {'max_leaf_nodes': None, 'max_depth': 8, 'max_features': 0.5, 'n_estimators': 500}
mean: 0.0700, stdev: 0.0051 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'max_features': 0.5, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_depth': [5, 8, 10], 'max_features': [0.5], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [5, 8, 10], 'max_features': [0.5], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0867, stdev: 0.0071 MSE for {'n_estimators': 500, 'max_depth': 5, 'max_features': 0.5, 'max_leaf_nodes': None}
mean: 0.0723, stdev: 0.0063 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_features': 0.5, 'max_leaf_nodes': None}
mean: 0.0697, stdev: 0.0066 MSE for {'n_estimators': 500, 'max_depth': 10, 'max_features': 0.5, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'max_features': [0.2, 0.5, 0.7, 1.0], 'max_depth': [10], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_features': [0.2, 0.5, 0.7, 1.0], 'max_depth': [10], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0805, stdev: 0.0067 MSE for {'max_leaf_nodes': None, 'max_features': 0.2, 'max_depth': 10, 'n_estimators': 500}
mean: 0.0710, stdev: 0.0066 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 10, 'max_features': 0.5}
mean: 0.0676, stdev: 0.0049 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 10, 'max_features': 0.7}
mean: 0.0670, stdev: 0.0030 MSE for {'max_leaf_nodes': None, 'max_features': 1.0, 'max_depth': 10, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [8], 'max_features': [0.2, 0.5, 0.7, 1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [8], 'max_features': [0.2, 0.5, 0.7, 1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0843, stdev: 0.0067 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 8, 'max_features': 0.2}
mean: 0.0701, stdev: 0.0058 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 8, 'max_features': 0.5}
mean: 0.0696, stdev: 0.0049 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 8, 'max_features': 0.7}
mean: 0.0678, stdev: 0.0030 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 8, 'max_features': 1.0}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [16, 64, 256, 1024, 4096], 'max_depth': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [16, 64, 256, 1024, 4096], 'max_depth': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0868, stdev: 0.0049 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_leaf_nodes': 16, 'max_features': None}
mean: 0.0675, stdev: 0.0031 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_leaf_nodes': 64, 'max_features': None}
mean: 0.0666, stdev: 0.0033 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_leaf_nodes': 256, 'max_features': None}
mean: 0.0677, stdev: 0.0025 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 8}
mean: 0.0674, stdev: 0.0036 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_leaf_nodes': 4096, 'max_features': None}

search space:
{'max_depth': [8], 'n_estimators': [500], 'max_leaf_nodes': [16, 64, 256, 1024, 4096, 16384, 65536], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [8], 'n_estimators': [500], 'max_leaf_nodes': [16, 64, 256, 1024, 4096, 16384, 65536], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0876, stdev: 0.0059 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 16, 'max_features': None}
mean: 0.0673, stdev: 0.0038 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 64, 'max_features': None}
mean: 0.0674, stdev: 0.0040 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 256, 'max_features': None}
mean: 0.0667, stdev: 0.0036 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}
mean: 0.0668, stdev: 0.0021 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 4096, 'max_features': None}
mean: 0.0675, stdev: 0.0038 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 16384, 'max_features': None}
mean: 0.0673, stdev: 0.0038 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 65536, 'max_features': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [256, 1024, 4096, 16384, 65536], 'max_depth': [8], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [256, 1024, 4096, 16384, 65536], 'max_depth': [8], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0678, stdev: 0.0032 MSE for {'max_features': None, 'max_leaf_nodes': 256, 'n_estimators': 500, 'max_depth': 8}
mean: 0.0675, stdev: 0.0026 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 8, 'n_estimators': 500}
mean: 0.0669, stdev: 0.0035 MSE for {'max_features': None, 'max_leaf_nodes': 4096, 'n_estimators': 500, 'max_depth': 8}
mean: 0.0660, stdev: 0.0042 MSE for {'max_features': None, 'max_leaf_nodes': 16384, 'n_estimators': 500, 'max_depth': 8}
mean: 0.0680, stdev: 0.0040 MSE for {'max_features': None, 'max_leaf_nodes': 65536, 'max_depth': 8, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [256, 1024, 4096, 16384, 65536], 'max_depth': [8], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [256, 1024, 4096, 16384, 65536], 'max_depth': [8], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0677, stdev: 0.0041 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 256, 'max_depth': 8}
mean: 0.0669, stdev: 0.0034 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 8, 'max_features': None}
mean: 0.0680, stdev: 0.0032 MSE for {'n_estimators': 500, 'max_leaf_nodes': 4096, 'max_depth': 8, 'max_features': None}
mean: 0.0675, stdev: 0.0032 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 16384, 'max_depth': 8}
mean: 0.0673, stdev: 0.0029 MSE for {'n_estimators': 500, 'max_leaf_nodes': 65536, 'max_depth': 8, 'max_features': None}

search space:
{'max_depth': [8], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [8], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0682, stdev: 0.0031 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 8, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [4, 8, 16, 32], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [4, 8, 16, 32], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0985, stdev: 0.0050 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 4, 'n_estimators': 500}
mean: 0.0684, stdev: 0.0032 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 8, 'n_estimators': 500}
mean: 0.0677, stdev: 0.0015 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 16, 'n_estimators': 500}
mean: 0.0669, stdev: 0.0032 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 32, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [4, 8, 16, 32, 64], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [4, 8, 16, 32, 64], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0975, stdev: 0.0063 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 4, 'n_estimators': 500}
mean: 0.0678, stdev: 0.0032 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 8, 'n_estimators': 500}
mean: 0.0671, stdev: 0.0034 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 16, 'n_estimators': 500}
mean: 0.0672, stdev: 0.0033 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 32, 'n_estimators': 500}
mean: 0.0672, stdev: 0.0026 MSE for {'max_features': None, 'max_leaf_nodes': None, 'max_depth': 64, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [4, 8, 16, 32, 64]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [4, 8, 16, 32, 64]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0978, stdev: 0.0053 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 4}
mean: 0.0686, stdev: 0.0028 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 8}
mean: 0.0678, stdev: 0.0026 MSE for {'n_estimators': 500, 'max_depth': 16, 'max_features': None, 'max_leaf_nodes': None}
mean: 0.0661, stdev: 0.0022 MSE for {'n_estimators': 500, 'max_depth': 32, 'max_leaf_nodes': None, 'max_features': None}
mean: 0.0664, stdev: 0.0029 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 64}

search space:
{'max_depth': [8], 'n_estimators': [500], 'max_leaf_nodes': [4096], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [8], 'n_estimators': [500], 'max_leaf_nodes': [4096], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0676, stdev: 0.0026 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_leaf_nodes': 4096, 'max_features': None}

search space:
{'max_depth': [8], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [4096, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [8], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [4096, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0670, stdev: 0.0030 MSE for {'max_depth': 8, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 4096}
mean: 0.0683, stdev: 0.0028 MSE for {'max_depth': 8, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [4096, None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [4096, None], 'n_estimators': [500], 'max_features': [None], 'max_depth': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0671, stdev: 0.0032 MSE for {'max_leaf_nodes': 4096, 'n_estimators': 500, 'max_features': None, 'max_depth': 8}
mean: 0.0677, stdev: 0.0029 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'max_depth': 8}

search space:
{'n_estimators': [500], 'max_depth': [8, None], 'max_leaf_nodes': [4096, None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [8, None], 'max_leaf_nodes': [4096, None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0677, stdev: 0.0033 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_leaf_nodes': 4096, 'max_features': None}
mean: 0.0685, stdev: 0.0013 MSE for {'n_estimators': 500, 'max_depth': 8, 'max_leaf_nodes': None, 'max_features': None}
mean: 0.0678, stdev: 0.0019 MSE for {'n_estimators': 500, 'max_depth': None, 'max_leaf_nodes': 4096, 'max_features': None}
mean: 0.0666, stdev: 0.0025 MSE for {'n_estimators': 500, 'max_depth': None, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [4096, None], 'max_depth': [8, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [4096, None], 'max_depth': [8, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0677, stdev: 0.0022 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 4096, 'max_depth': 8}
mean: 0.0674, stdev: 0.0031 MSE for {'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 500, 'max_depth': 8}
mean: 0.0670, stdev: 0.0022 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 4096, 'max_depth': None}
mean: 0.0667, stdev: 0.0037 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None, 'max_depth': None}

search space:
{'max_leaf_nodes': [4096, None], 'max_features': [None], 'max_depth': [8, None], 'n_estimators': [1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [4096, None], 'max_features': [None], 'max_depth': [8, None], 'n_estimators': [1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0680, stdev: 0.0034 MSE for {'max_features': None, 'max_leaf_nodes': 4096, 'n_estimators': 1000, 'max_depth': 8}
mean: 0.0671, stdev: 0.0025 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 8, 'n_estimators': 1000}
mean: 0.0673, stdev: 0.0031 MSE for {'max_features': None, 'max_leaf_nodes': 4096, 'n_estimators': 1000, 'max_depth': None}
mean: 0.0660, stdev: 0.0030 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 1000, 'max_depth': None}

search space:
{'n_estimators': [1000], 'max_depth': [8, None], 'max_leaf_nodes': [4096, None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [1000], 'max_depth': [8, None], 'max_leaf_nodes': [4096, None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0667, stdev: 0.0040 MSE for {'max_features': None, 'max_depth': 8, 'max_leaf_nodes': 4096, 'n_estimators': 1000}
mean: 0.0678, stdev: 0.0032 MSE for {'max_features': None, 'max_depth': 8, 'max_leaf_nodes': None, 'n_estimators': 1000}
mean: 0.0669, stdev: 0.0025 MSE for {'max_features': None, 'max_depth': None, 'max_leaf_nodes': 4096, 'n_estimators': 1000}
mean: 0.0666, stdev: 0.0031 MSE for {'max_features': None, 'max_depth': None, 'max_leaf_nodes': None, 'n_estimators': 1000}

search space:
{'max_depth': [8, None], 'max_leaf_nodes': [4096, None], 'max_features': [None], 'n_estimators': [1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [8, None], 'max_leaf_nodes': [4096, None], 'max_features': [None], 'n_estimators': [1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0672, stdev: 0.0025 MSE for {'max_depth': 8, 'max_leaf_nodes': 4096, 'max_features': None, 'n_estimators': 1000}
mean: 0.0681, stdev: 0.0023 MSE for {'max_leaf_nodes': None, 'max_depth': 8, 'max_features': None, 'n_estimators': 1000}
mean: 0.0670, stdev: 0.0026 MSE for {'max_depth': None, 'max_leaf_nodes': 4096, 'max_features': None, 'n_estimators': 1000}
mean: 0.0660, stdev: 0.0027 MSE for {'max_depth': None, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 1000}

search space:
{'max_features': [None], 'max_leaf_nodes': [4096, None], 'n_estimators': [2000], 'max_depth': [8, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [4096, None], 'n_estimators': [2000], 'max_depth': [8, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0672, stdev: 0.0029 MSE for {'max_features': None, 'max_leaf_nodes': 4096, 'n_estimators': 2000, 'max_depth': 8}
mean: 0.0674, stdev: 0.0029 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 2000, 'max_depth': 8}
mean: 0.0670, stdev: 0.0033 MSE for {'max_features': None, 'max_leaf_nodes': 4096, 'n_estimators': 2000, 'max_depth': None}
mean: 0.0668, stdev: 0.0026 MSE for {'max_features': None, 'max_depth': None, 'n_estimators': 2000, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [4096, None], 'n_estimators': [200], 'max_features': [None], 'max_depth': [8, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [4096, None], 'n_estimators': [200], 'max_features': [None], 'max_depth': [8, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0673, stdev: 0.0037 MSE for {'max_leaf_nodes': 4096, 'n_estimators': 200, 'max_features': None, 'max_depth': 8}
mean: 0.0687, stdev: 0.0040 MSE for {'max_leaf_nodes': None, 'max_depth': 8, 'max_features': None, 'n_estimators': 200}
mean: 0.0680, stdev: 0.0029 MSE for {'max_leaf_nodes': 4096, 'n_estimators': 200, 'max_features': None, 'max_depth': None}
mean: 0.0682, stdev: 0.0037 MSE for {'max_leaf_nodes': None, 'n_estimators': 200, 'max_features': None, 'max_depth': None}

search space:
{'n_estimators': [200], 'max_features': [None], 'max_depth': [8, None], 'max_leaf_nodes': [4096, None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [200], 'max_features': [None], 'max_depth': [8, None], 'max_leaf_nodes': [4096, None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0668, stdev: 0.0033 MSE for {'n_estimators': 200, 'max_features': None, 'max_depth': 8, 'max_leaf_nodes': 4096}
mean: 0.0687, stdev: 0.0025 MSE for {'n_estimators': 200, 'max_features': None, 'max_depth': 8, 'max_leaf_nodes': None}
mean: 0.0682, stdev: 0.0036 MSE for {'n_estimators': 200, 'max_features': None, 'max_depth': None, 'max_leaf_nodes': 4096}
mean: 0.0681, stdev: 0.0024 MSE for {'n_estimators': 200, 'max_features': None, 'max_depth': None, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_depth': [None], 'max_leaf_nodes': [4096]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_depth': [None], 'max_leaf_nodes': [4096]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0665, stdev: 0.0038 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': None, 'max_leaf_nodes': 4096}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [4096], 'max_depth': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [4096], 'max_depth': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0669, stdev: 0.0032 MSE for {'n_estimators': 500, 'max_leaf_nodes': 4096, 'max_depth': None, 'max_features': None}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1477, stdev: 0.0075 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'n_estimators': [500], 'max_depth': [10], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0668, stdev: 0.0026 MSE for {'n_estimators': 500, 'max_depth': 10, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1780, stdev: 0.0059 MSE for {'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1686, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25, 'max_features': None}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1689, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1690, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1690, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1689, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1707, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1716, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1813, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1690, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1736, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1706, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [4], 'min_samples_leaf': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [4], 'min_samples_leaf': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1697, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 25, 'max_features': None, 'min_samples_split': 4, 'min_samples_leaf': 2}

search space:
{'min_samples_leaf': [2], 'min_samples_split': [4], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [2], 'min_samples_split': [4], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1700, stdev: 0.0000 MSE for {'min_samples_leaf': 2, 'min_samples_split': 4, 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_split': [4], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_split': [4], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1693, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 4}

search space:
{'min_samples_split': [4], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_leaf': [2], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [4], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_leaf': [2], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1724, stdev: 0.0000 MSE for {'min_samples_split': 4, 'max_leaf_nodes': None, 'max_depth': 25, 'min_samples_leaf': 2, 'max_features': None, 'n_estimators': 500}

search space:
{'min_samples_split': [4], 'n_estimators': [500], 'min_samples_leaf': [2], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [4], 'n_estimators': [500], 'min_samples_leaf': [2], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1708, stdev: 0.0000 MSE for {'min_samples_split': 4, 'n_estimators': 500, 'min_samples_leaf': 2, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1727, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'n_estimators': [500], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'n_estimators': [500], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1709, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'max_leaf_nodes': None, 'min_samples_split': 2, 'max_features': None, 'n_estimators': 500, 'max_depth': 25}

search space:
{'n_estimators': [500], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1725, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1747, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'min_samples_split': [2], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [2], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1717, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'min_samples_leaf': [1], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'min_samples_leaf': [1], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1752, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'n_estimators': 500, 'min_samples_leaf': 1, 'min_samples_split': 2}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'min_samples_split': [2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'max_features': [None], 'max_depth': [25], 'min_samples_split': [2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1725, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'max_features': None, 'max_depth': 25, 'min_samples_split': 2, 'max_leaf_nodes': None}

search space:
{'min_samples_leaf': [1], 'max_depth': [25], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'max_depth': [25], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1748, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'max_depth': 25, 'min_samples_split': 2, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_features': None}

search space:
{'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1741, stdev: 0.0000 MSE for {'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1731, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'min_samples_split': [2], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [2], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'n_estimators': [500], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1735, stdev: 0.0000 MSE for {'min_samples_split': 2, 'max_leaf_nodes': None, 'max_features': None, 'min_samples_leaf': 1, 'n_estimators': 500, 'max_depth': 25}

search space:
{'max_depth': [25], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1721, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_leaf_nodes': None}

search space:
{'max_features': [None], 'min_samples_leaf': [1], 'max_depth': [25], 'n_estimators': [500], 'min_samples_split': [2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [1], 'max_depth': [25], 'n_estimators': [500], 'min_samples_split': [2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1725, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'min_samples_leaf': 1, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 25}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1715, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'min_samples_leaf': 1, 'max_features': None, 'min_samples_split': 2, 'max_leaf_nodes': None}

search space:
{'min_samples_leaf': [1], 'max_depth': [25], 'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'max_depth': [25], 'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1723, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'max_depth': 25, 'min_samples_split': 2, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None}

search space:
{'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1733, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'min_samples_split': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'max_depth': 25}

search space:
{'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1732, stdev: 0.0000 MSE for {'min_samples_split': 2, 'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'max_features': None}

search space:
{'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1723, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1721, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_leaf': 1, 'max_depth': 25, 'max_features': None, 'min_samples_split': 2}

search space:
{'max_depth': [25], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1715, stdev: 0.0000 MSE for {'max_depth': 25, 'min_samples_split': 2, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'min_samples_leaf': 1}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1691, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'max_depth': 25, 'max_leaf_nodes': None, 'min_samples_split': 2, 'max_features': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1732, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_leaf_nodes': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1721, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'max_depth': 25, 'min_samples_split': 2, 'max_features': None}

search space:
{'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1721, stdev: 0.0000 MSE for {'min_samples_split': 2, 'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'max_depth': [25], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1724, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_leaf_nodes': None, 'max_depth': 25, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [25], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1713, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_depth': 25, 'n_estimators': 500, 'max_features': None}

search space:
{'min_samples_leaf': [1], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1724, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 25}

search space:
{'n_estimators': [500], 'max_depth': [25], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1725, stdev: 0.0000 MSE for {'max_depth': 25, 'min_samples_split': 2, 'max_features': None, 'min_samples_leaf': 1, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'min_samples_leaf': [1], 'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_split': [2], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_split': [2], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1733, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'max_depth': 25, 'min_samples_split': 2, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1746, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_depth': 25, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [25], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [25], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1712, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 25, 'min_samples_leaf': 1}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_features': [None], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1718, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_depth': [25], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_depth': [25], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1718, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'min_samples_leaf': 1, 'n_estimators': 500, 'max_features': None, 'max_depth': 25, 'min_samples_split': 2}

search space:
{'max_depth': [25], 'n_estimators': [500], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1719, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'min_samples_split': 2, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [25], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1734, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'min_samples_split': 2, 'n_estimators': 500}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1718, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'min_samples_split': 2}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1716, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'min_samples_leaf': 1, 'max_features': None, 'min_samples_split': 2}

search space:
{'max_depth': [25], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1735, stdev: 0.0000 MSE for {'max_depth': 25, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'max_depth': [25], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1718, stdev: 0.0000 MSE for {'max_depth': 25, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1714, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [25], 'max_leaf_nodes': [None], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1721, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'max_depth': [25], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'max_depth': [25], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1734, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None}

search space:
{'n_estimators': [500], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [25], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1727, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 2, 'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None, 'min_samples_leaf': 1}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_depth': [25]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_depth': [25]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1718, stdev: 0.0000 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_features': None, 'max_depth': 25}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [25], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1732, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 25, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1721, stdev: 0.0000 MSE for {'max_depth': 25, 'n_estimators': 500, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'max_features': None, 'min_samples_split': 2}

search space:
{'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_depth': [25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1732, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_depth': [25], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [25], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1712, stdev: 0.0000 MSE for {'max_depth': 25, 'min_samples_split': 2, 'max_features': None, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'min_samples_split': [2], 'max_depth': [15, 25, 35], 'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [2], 'max_depth': [15, 25, 35], 'n_estimators': [500], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1709, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_split': 2, 'max_depth': 15, 'n_estimators': 500, 'max_leaf_nodes': None, 'min_samples_leaf': 1}
mean: 0.1715, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_depth': 25, 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_samples_split': 2}
mean: 0.1718, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_split': 2, 'max_depth': 35, 'n_estimators': 500, 'max_leaf_nodes': None, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [15, 25, 35], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [15, 25, 35], 'max_leaf_nodes': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1723, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 15, 'max_leaf_nodes': None, 'min_samples_leaf': 1}
mean: 0.1721, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 25, 'max_leaf_nodes': None, 'min_samples_leaf': 1}
mean: 0.1723, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 35, 'max_leaf_nodes': None, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [5, 15, 25], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [5, 15, 25], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1790, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_depth': 5, 'max_leaf_nodes': None, 'n_estimators': 500}
mean: 0.1715, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_depth': 15, 'max_leaf_nodes': None, 'n_estimators': 500}
mean: 0.1716, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_depth': 25, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [15, 20, 25], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [15, 20, 25], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1725, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'max_features': None, 'max_depth': 15, 'max_leaf_nodes': None}
mean: 0.1732, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': None}
mean: 0.1726, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'max_features': None, 'max_depth': 25, 'max_leaf_nodes': None}

search space:
{'min_samples_split': [2], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [None], 'max_features': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [2], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [None], 'max_features': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1713, stdev: 0.0000 MSE for {'min_samples_split': 2, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': None, 'max_features': None, 'min_samples_leaf': 1}

search space:
{'max_depth': [20], 'min_samples_leaf': [1], 'max_leaf_nodes': [32768, 1048576, 33554432], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [1], 'max_leaf_nodes': [32768, 1048576, 33554432], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1719, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 1, 'max_leaf_nodes': 32768, 'max_features': None, 'min_samples_split': 2, 'n_estimators': 500}
mean: 0.1716, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 1, 'max_leaf_nodes': 1048576, 'max_features': None, 'min_samples_split': 2, 'n_estimators': 500}
mean: 0.1717, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 1, 'max_leaf_nodes': 33554432, 'max_features': None, 'min_samples_split': 2, 'n_estimators': 500}

search space:
{'min_samples_leaf': [1], 'n_estimators': [500], 'max_leaf_nodes': [1024, 32768, 1048576], 'max_depth': [20], 'min_samples_split': [2], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'n_estimators': [500], 'max_leaf_nodes': [1024, 32768, 1048576], 'max_depth': [20], 'min_samples_split': [2], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1716, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 2, 'max_features': None}
mean: 0.1721, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'max_leaf_nodes': 32768, 'max_depth': 20, 'min_samples_split': 2, 'max_features': None}
mean: 0.1717, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'n_estimators': 500, 'max_leaf_nodes': 1048576, 'max_depth': 20, 'min_samples_split': 2, 'max_features': None}

search space:
{'max_depth': [20], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32, 1024, 32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [32, 1024, 32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1770, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 32}
mean: 0.1708, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
mean: 0.1716, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 32768}

search space:
{'min_samples_leaf': [1], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [1], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1711, stdev: 0.0000 MSE for {'min_samples_leaf': 1, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 2, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [1], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [1], 'n_estimators': [500], 'min_samples_split': [2], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1719, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 20, 'max_features': None}

search space:
{'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1719, stdev: 0.0000 MSE for {'min_samples_split': 2, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 1}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [2], 'max_features': [None], 'min_samples_split': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [2], 'max_features': [None], 'min_samples_split': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1705, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_leaf': 2, 'max_features': None, 'min_samples_split': 4}

search space:
{'min_samples_leaf': [2], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [2], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1704, stdev: 0.0000 MSE for {'min_samples_leaf': 2, 'max_depth': 20, 'max_features': None, 'min_samples_split': 4, 'n_estimators': 500, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'min_samples_split': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [2], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [2], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1702, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 4, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}

search space:
{'min_samples_leaf': [2, 4, 6], 'min_samples_split': [4, 8, 12], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [2, 4, 6], 'min_samples_split': [4, 8, 12], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1695, stdev: 0.0000 MSE for {'min_samples_leaf': 2, 'min_samples_split': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500}
mean: 0.1694, stdev: 0.0000 MSE for {'min_samples_leaf': 2, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_features': None, 'n_estimators': 500}
mean: 0.1691, stdev: 0.0000 MSE for {'min_samples_leaf': 2, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500}
mean: 0.1689, stdev: 0.0000 MSE for {'min_samples_leaf': 4, 'min_samples_split': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500}
mean: 0.1684, stdev: 0.0000 MSE for {'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500}
mean: 0.1688, stdev: 0.0000 MSE for {'min_samples_leaf': 4, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500}
mean: 0.1686, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 4, 'max_features': None, 'n_estimators': 500}
mean: 0.1689, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500}
mean: 0.1687, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'min_samples_leaf': [3, 6, 9], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [6, 12, 18]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [3, 6, 9], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [6, 12, 18]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1704, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 3, 'min_samples_split': 6}
mean: 0.1696, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 3, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 12}
mean: 0.1698, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 3, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 18}
mean: 0.1693, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 6}
mean: 0.1699, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 12}
mean: 0.1693, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 18}
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 9, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 6}
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 9, 'min_samples_split': 12}
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 9, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 18}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6, 9, 12], 'min_samples_split': [12, 18, 24], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6, 9, 12], 'min_samples_split': [12, 18, 24], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 18, 'max_leaf_nodes': 1024}
mean: 0.1697, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 24, 'max_leaf_nodes': 1024}
mean: 0.1702, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 9, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
mean: 0.1693, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 9, 'min_samples_split': 18, 'max_leaf_nodes': 1024}
mean: 0.1698, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 9, 'min_samples_split': 24, 'max_leaf_nodes': 1024}
mean: 0.1699, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 12, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 12, 'min_samples_split': 18, 'max_leaf_nodes': 1024}
mean: 0.1700, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 12, 'min_samples_split': 24, 'max_leaf_nodes': 1024}

search space:
{'n_estimators': [500], 'min_samples_split': [12, 18, 24], 'min_samples_leaf': [9], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12, 18, 24], 'min_samples_leaf': [9], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1694, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'min_samples_leaf': 9, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20}
mean: 0.1697, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 18, 'min_samples_leaf': 9, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20}
mean: 0.1697, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 24, 'min_samples_leaf': 9, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [9], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12, 18, 24]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [9], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12, 18, 24]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1687, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 9, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_split': 12}
mean: 0.1689, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 9, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_split': 18}
mean: 0.1689, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 9, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_split': 24}

search space:
{'min_samples_split': [6, 12, 18], 'max_features': [None], 'min_samples_leaf': [2], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [6, 12, 18], 'max_features': [None], 'min_samples_leaf': [2], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1706, stdev: 0.0000 MSE for {'min_samples_split': 6, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024}
mean: 0.1688, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024}
mean: 0.1687, stdev: 0.0000 MSE for {'min_samples_split': 18, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024}

search space:
{'max_features': [None], 'min_samples_leaf': [2], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [6, 12, 18], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [2], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [6, 12, 18], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1706, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 2, 'min_samples_split': 6, 'max_depth': 20}
mean: 0.1698, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 2, 'min_samples_split': 12, 'max_depth': 20}
mean: 0.1698, stdev: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 2, 'min_samples_split': 18, 'max_depth': 20}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [2], 'max_leaf_nodes': [1024], 'min_samples_split': [12, 18, 24]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [2], 'max_leaf_nodes': [1024], 'min_samples_split': [12, 18, 24]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1706, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 2, 'max_leaf_nodes': 1024, 'min_samples_split': 12}
mean: 0.1709, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_split': 18, 'n_estimators': 500, 'min_samples_leaf': 2, 'max_leaf_nodes': 1024, 'max_depth': 20}
mean: 0.1706, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_split': 24, 'n_estimators': 500, 'min_samples_leaf': 2, 'max_leaf_nodes': 1024, 'max_depth': 20}

search space:
{'min_samples_split': [6, 9, 12], 'min_samples_leaf': [2], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [6, 9, 12], 'min_samples_leaf': [2], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1706, stdev: 0.0000 MSE for {'min_samples_split': 6, 'min_samples_leaf': 2, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}
mean: 0.1704, stdev: 0.0000 MSE for {'min_samples_split': 9, 'min_samples_leaf': 2, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
mean: 0.1698, stdev: 0.0000 MSE for {'min_samples_split': 12, 'min_samples_leaf': 2, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [3], 'min_samples_split': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [3], 'min_samples_split': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1701, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 3, 'min_samples_split': 6}

search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [9], 'n_estimators': [500], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [9], 'n_estimators': [500], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1696, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'min_samples_split': 9, 'n_estimators': 500, 'max_depth': 20}

search space:
{'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [9], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [9], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1693, stdev: 0.0000 MSE for {'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 9, 'n_estimators': 500, 'max_features': None}

search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1696, stdev: 0.0000 MSE for {'min_samples_split': 12, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1688, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None, 'max_depth': 20}

search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1691, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}

search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [15], 'n_estimators': [500], 'min_samples_leaf': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [15], 'n_estimators': [500], 'min_samples_leaf': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1697, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 15, 'n_estimators': 500, 'min_samples_leaf': 8, 'max_depth': 20}

search space:
{'max_depth': [20], 'min_samples_leaf': [8], 'n_estimators': [500], 'min_samples_split': [15], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [8], 'n_estimators': [500], 'min_samples_split': [15], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1695, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 8, 'n_estimators': 500, 'min_samples_split': 15, 'max_features': None, 'max_leaf_nodes': 1024}

search space:
{'min_samples_leaf': [8], 'max_depth': [20], 'min_samples_split': [15], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [8], 'max_depth': [20], 'min_samples_split': [15], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1691, stdev: 0.0000 MSE for {'min_samples_leaf': 8, 'max_depth': 20, 'min_samples_split': 15, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500}

search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1687, stdev: 0.0000 MSE for {'min_samples_split': 12, 'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}

search space:
{'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1698, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 12, 'max_leaf_nodes': 1024}

search space:
{'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1683, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}

search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1680, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1677, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'n_estimators': 500}
search space:
{'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, stdev: 0.0000 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2583, stdev: 0.0000 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2593, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20, 'max_features': None}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0791, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2597, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'n_estimators': [5], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'n_estimators': [5], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0862, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 5, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'n_estimators': [5], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2597, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}
search space:
{'n_estimators': [2], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [2], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1016, stdev: 0.0000 MSE for {'n_estimators': 2, 'min_samples_leaf': 6, 'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [2], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2606, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None, 'max_depth': 20, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [2], 'max_depth': [2], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [2], 'max_depth': [2], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0941, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 2, 'min_samples_split': 12, 'max_depth': 2}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [2], 'max_depth': [2], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2594, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_leaf_nodes': [2], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [2], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0974, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 2, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 2}
search space:
{'max_depth': [20], 'max_leaf_nodes': [2], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2586, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_features': None, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [2], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [2], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2921, stdev: 0.0000 MSE for {'max_leaf_nodes': 2, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 2, 'max_features': None, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0787, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2585, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0911, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2594, stdev: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0889, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2595, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1159, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2591, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2596, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3579, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500, 'max_features': None}
search space:
{'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'min_samples_split': 12, 'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}
search space:
{'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2617, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2612, stdev: 0.0000 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20, 'max_features': None}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2606, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None}
search space:
{'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0912, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2588, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3798, stdev: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'n_estimators': [1], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [1], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1240, stdev: 0.0000 MSE for {'n_estimators': 1, 'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6}
search space:
{'n_estimators': [1], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2595, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'min_samples_split': 12}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [1], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3598, stdev: 0.0000 MSE for {'n_estimators': 1, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'min_samples_split': 12}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [32, 1024, 32768], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2690, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 32}
mean: 0.2604, stdev: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20}
mean: 0.2598, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 32768}
search space:
{'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12}
search space:
{'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_leaf_nodes': [4, 32, 1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2845, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 4, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}
mean: 0.2675, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_leaf_nodes': 32, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12}
mean: 0.2591, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [5, 10, 20, 40], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2676, stdev: 0.0000 MSE for {'max_depth': 5, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
mean: 0.2607, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 10, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
mean: 0.2595, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
mean: 0.2600, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 40, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0777, stdev: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [3], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2620, stdev: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 3, 'max_leaf_nodes': 1024, 'min_samples_split': 6, 'n_estimators': 500, 'max_features': None}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2641, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 2, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 1}
search space:
{'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0787, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'n_estimators': 500}
search space:
{'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [18], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [9], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2582, stdev: 0.0000 MSE for {'min_samples_split': 18, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 9, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0788, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [9], 'min_samples_split': [18]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2582, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 9, 'min_samples_split': 18}
search space:
{'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [12], 'min_samples_split': [24], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2592, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 24, 'min_samples_leaf': 12, 'n_estimators': 500}
search space:
{'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'max_depth': 20}
search space:
{'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [12], 'min_samples_split': [24], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2584, stdev: 0.0000 MSE for {'min_samples_leaf': 12, 'min_samples_split': 24, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}
search space:
{'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None, 'min_samples_split': 12}
search space:
{'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [25], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2583, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 25, 'min_samples_split': 50}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [50], 'n_estimators': [500], 'min_samples_leaf': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2576, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 50, 'n_estimators': 500, 'min_samples_leaf': 25, 'max_features': None}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0788, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [25], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2594, stdev: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 25, 'n_estimators': 500, 'min_samples_split': 50}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_depth': [20], 'min_samples_leaf': [15], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2580, stdev: 0.0000 MSE for {'min_samples_split': 50, 'max_depth': 20, 'min_samples_leaf': 15, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 12}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [15], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2587, stdev: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_split': 50, 'min_samples_leaf': 15, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2588, stdev: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_features': None, 'n_estimators': 500}
search space:
{'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0775, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 12, 'max_features': None}
search space:
{'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2639, stdev: 0.0000 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_features': None}
search space:
{'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 12, 'n_estimators': 500, 'max_depth': 20}
search space:
{'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [50], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2629, stdev: 0.0000 MSE for {'min_samples_leaf': 15, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 50, 'n_estimators': 500, 'max_depth': 20}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20, 'max_features': None}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2592, stdev: 0.0000 MSE for {'min_samples_leaf': 15, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 50, 'max_depth': 20, 'max_features': None}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_depth': [20], 'min_samples_split': [50], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2584, stdev: 0.0000 MSE for {'min_samples_leaf': 15, 'max_depth': 20, 'min_samples_split': 50, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0804, stdev: 0.0079 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2278, stdev: 0.0103 MSE for {'min_samples_leaf': 15, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_split': 50}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0804, stdev: 0.0081 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [50], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [15], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2278, stdev: 0.0104 MSE for {'n_estimators': 500, 'min_samples_leaf': 15, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 50, 'max_features': None}
search space:
{'subsample': [0.7], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [0.7], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0736, stdev: 0.0000 MSE for {'subsample': 0.7, 'max_depth': 10, 'loss': 'ls', 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'alpha': 0.9}
search space:
{'subsample': [0.7], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [0.7], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2202, stdev: 0.0000 MSE for {'subsample': 0.7, 'max_depth': 10, 'loss': 'ls', 'alpha': 0.9, 'n_estimators': 500, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'max_features': None}
search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0804, stdev: 0.0083 MSE for {'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12}
search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [15], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2266, stdev: 0.0109 MSE for {'max_depth': 20, 'min_samples_leaf': 15, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 50}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0804, std: 0.0084 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 12, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [50], 'max_features': [None], 'min_samples_leaf': [15], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2279, std: 0.0104 MSE for {'min_samples_leaf': 15, 'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 50, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2576, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0769, std: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [15], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2621, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 15, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'max_features': None, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0769, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [50], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2701, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 50, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 15}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0773, std: 0.0000 MSE for {'min_samples_split': 12, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [15], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2626, std: 0.0000 MSE for {'min_samples_split': 50, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 15, 'n_estimators': 500}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0808, std: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [50], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2547, std: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 50, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 15}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, std: 0.0000 MSE for {'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2771, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}
search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0823, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_split': 12}
search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2656, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 15, 'min_samples_split': 50}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0799, std: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2707, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [50], 'n_estimators': [500], 'min_samples_leaf': [15], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2650, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 50, 'n_estimators': 500, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 15}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0777, std: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [50], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2628, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 15, 'n_estimators': 500, 'min_samples_split': 50}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, std: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'n_estimators': [500], 'min_samples_split': [50], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2658, std: 0.0000 MSE for {'min_samples_leaf': 15, 'n_estimators': 500, 'min_samples_split': 50, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, std: 0.0000 MSE for {'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2665, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 50, 'max_depth': 20}
search space:
{'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0813, std: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [15], 'max_depth': [20], 'min_samples_split': [50], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2715, std: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 15, 'max_depth': 20, 'min_samples_split': 50, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0775, std: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 12, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [50], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2678, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 50, 'min_samples_leaf': 15}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [15], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2667, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 15, 'min_samples_split': 50}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, std: 0.0000 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'min_samples_leaf': [15], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2702, std: 0.0000 MSE for {'min_samples_split': 50, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 15, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, std: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2562, std: 0.0000 MSE for {'min_samples_split': 50, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 15}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, std: 0.0000 MSE for {'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'min_samples_leaf': [15], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2562, std: 0.0000 MSE for {'min_samples_split': 50, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 15, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0787, std: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_depth': [20], 'min_samples_split': [50], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2655, std: 0.0000 MSE for {'min_samples_leaf': 15, 'max_depth': 20, 'min_samples_split': 50, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0773, std: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 6, 'min_samples_split': 12}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [50], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2741, std: 0.0000 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 15, 'min_samples_split': 50}
search space:
{'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0775, std: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'min_samples_split': [50], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2626, std: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'min_samples_leaf': 15, 'n_estimators': 500}
search space:
{'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, std: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'max_depth': 20}
search space:
{'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_leaf_nodes': [1024], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2612, std: 0.0000 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'max_depth': 20}
search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'n_estimators': [500], 'min_samples_leaf': [15], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2644, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 50, 'n_estimators': 500, 'min_samples_leaf': 15, 'max_depth': 20}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0786, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_depth': 20, 'max_features': None}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'min_samples_leaf': [15], 'max_depth': [20], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2636, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'min_samples_leaf': 15, 'max_depth': 20, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0813, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [50], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2566, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 50, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 15}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0793, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [50], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [15], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2547, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 50, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 15, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 6}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [50], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2456, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 50, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 15}
search space:
{'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0805, std: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [15], 'n_estimators': [500], 'min_samples_split': [50], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2604, std: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_leaf': 15, 'n_estimators': 500, 'min_samples_split': 50, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, std: 0.0000 MSE for {'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [50], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2569, std: 0.0000 MSE for {'min_samples_leaf': 15, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 50, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0800, std: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_split': [50], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2555, std: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_split': 50, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0798, std: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_depth': [20], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2572, std: 0.0000 MSE for {'min_samples_split': 50, 'max_depth': 20, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}
search space:
{'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, std: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'min_samples_split': 12, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6}
search space:
{'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'min_samples_split': [50], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2610, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 15}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [50], 'n_estimators': [500], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2496, std: 0.0000 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 15, 'n_estimators': 500, 'min_samples_split': 50}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, std: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [50], 'max_depth': [20], 'min_samples_leaf': [15], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2630, std: 0.0000 MSE for {'n_estimators': 500, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0823, std: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12}
search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [15], 'n_estimators': [500], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2589, std: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_leaf': 15, 'n_estimators': 500, 'min_samples_split': 50}
search space:
{'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0777, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'n_estimators': 500}
search space:
{'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [50], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2589, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 50, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'n_estimators': 500}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0776, std: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'min_samples_split': 12}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2619, std: 0.0000 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'min_samples_split': 50}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0803, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'min_samples_leaf': 6}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [50], 'max_features': [None], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2639, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 50, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 15}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 12}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [15], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2606, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_leaf': 15, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 50}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, std: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 12}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2544, std: 0.0000 MSE for {'min_samples_leaf': 15, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 50}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0791, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2614, std: 0.0000 MSE for {'min_samples_leaf': 15, 'n_estimators': 500, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, std: 0.0000 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2569, std: 0.0000 MSE for {'min_samples_split': 50, 'n_estimators': 500, 'min_samples_leaf': 15, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0832, std: 0.0081 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [50], 'max_depth': [20], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2424, std: 0.0114 MSE for {'max_features': None, 'max_depth': 20, 'min_samples_split': 50, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0883, std: 0.0084 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2543, std: 0.0094 MSE for {'max_depth': 20, 'min_samples_leaf': 15, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'n_estimators': 500}
search space:
{'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0854, std: 0.0000 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500}
search space:
{'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'min_samples_leaf': [15], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2740, std: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 50, 'min_samples_leaf': 15, 'n_estimators': 500}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0848, std: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_depth': [20], 'min_samples_split': [50], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2676, std: 0.0000 MSE for {'min_samples_leaf': 15, 'max_depth': 20, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0855, std: 0.0000 MSE for {'min_samples_split': 12, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024}
search space:
{'min_samples_split': [12], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [15], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2720, std: 0.0000 MSE for {'min_samples_split': 50, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 15, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0813, std: 0.0000 MSE for {'min_samples_leaf': 6, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 12, 'max_features': None}
search space:
{'min_samples_leaf': [6], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [12], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [50], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2947, std: 0.0000 MSE for {'min_samples_leaf': 15, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 50, 'max_features': None}
search space:
{'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0820, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'min_samples_split': [12], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [50], 'n_estimators': [500], 'min_samples_leaf': [15], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2919, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 50, 'min_samples_leaf': 15, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0808, std: 0.0000 MSE for {'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2891, std: 0.0000 MSE for {'min_samples_leaf': 15, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 50}
search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0814, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}
search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2901, std: 0.0000 MSE for {'min_samples_leaf': 15, 'max_depth': 20, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None}
search space:
{'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0817, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6}
search space:
{'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'min_samples_split': [50], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2903, std: 0.0000 MSE for {'n_estimators': 500, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 15}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0819, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'max_features': [None], 'min_samples_leaf': [15], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2811, std: 0.0000 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'max_features': None, 'min_samples_leaf': 15, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0820, std: 0.0000 MSE for {'min_samples_split': 12, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 6}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [15]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2943, std: 0.0000 MSE for {'min_samples_split': 50, 'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 15}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0828, std: 0.0000 MSE for {'min_samples_split': 12, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [50], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2982, std: 0.0000 MSE for {'min_samples_split': 50, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_depth': 20}
search space:
{'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0812, std: 0.0000 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'max_features': [None], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [50], 'max_leaf_nodes': [1024], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2812, std: 0.0000 MSE for {'max_features': None, 'min_samples_split': 50, 'max_leaf_nodes': 1024, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_depth': 20}
search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0812, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [15], 'min_samples_split': [50], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2826, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 15, 'min_samples_split': 50, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0815, std: 0.0000 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [15], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [50], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2788, std: 0.0000 MSE for {'min_samples_leaf': 15, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 50, 'max_features': None, 'n_estimators': 500}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0819, std: 0.0089 MSE for {'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [15], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [50], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2383, std: 0.0041 MSE for {'max_features': None, 'min_samples_leaf': 15, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 50, 'max_leaf_nodes': 1024}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0819, std: 0.0085 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2365, std: 0.0038 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None, 'n_estimators': 500, 'max_depth': 20}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0825, std: 0.0091 MSE for {'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2356, std: 0.0048 MSE for {'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0833, std: 0.0096 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_features': [None], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2367, std: 0.0030 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0831, std: 0.0092 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6}
search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_depth': [20], 'min_samples_leaf': [6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2384, std: 0.0023 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_depth': 20, 'min_samples_leaf': 6}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0846, std: 0.0107 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2324, std: 0.0079 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 12, 'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 6}
search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2582, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, std: 0.0000 MSE for {'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2637, std: 0.0000 MSE for {'min_samples_split': 12, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0840, std: 0.0100 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2301, std: 0.0097 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_features': None}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0826, std: 0.0095 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_features': None, 'max_depth': 20}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_leaf_nodes': [1024], 'min_samples_leaf': [6], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2335, std: 0.0107 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'max_leaf_nodes': 1024, 'min_samples_leaf': 6, 'max_features': None, 'max_depth': 20}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0819, std: 0.0099 MSE for {'max_features': None, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_depth': 20, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [12], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2363, std: 0.0119 MSE for {'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20, 'n_estimators': 500, 'min_samples_split': 12, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0813, std: 0.0089 MSE for {'max_depth': 20, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [12], 'min_samples_leaf': [6], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2363, std: 0.0103 MSE for {'max_depth': 20, 'min_samples_split': 12, 'min_samples_leaf': 6, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0816, std: 0.0089 MSE for {'min_samples_leaf': 6, 'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20}
search space:
{'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [12], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2364, std: 0.0098 MSE for {'min_samples_leaf': 6, 'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 12, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0816, std: 0.0088 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_features': None}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2369, std: 0.0101 MSE for {'min_samples_split': 12, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'max_features': None}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1159, std: 0.0207 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20, 'min_samples_split': 12}
search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'min_samples_split': [12]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2968, std: 0.0054 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_leaf': 6, 'max_features': None, 'min_samples_split': 12}
search space:
{'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0788, stdev: 0.0000 MSE for {'alpha': 0.9, 'loss': 'ls', 'subsample': 0.7, 'max_leaf_nodes': 100, 'max_depth': 10, 'n_estimators': 500, 'max_features': None, 'learning_rate': 0.01}
search space:
{'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2490, stdev: 0.0000 MSE for {'alpha': 0.9, 'loss': 'ls', 'subsample': 0.7, 'max_leaf_nodes': 100, 'max_depth': 10, 'n_estimators': 500, 'max_features': None, 'learning_rate': 0.01}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.1160, std: 0.0212 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_leaf': [6], 'min_samples_split': [12], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2967, std: 0.0062 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 6, 'min_samples_split': 12, 'max_depth': 20}
search space:
{'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'subsample': [0.7], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'subsample': [0.7], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0855, stdev: 0.0065 MSE for {'max_leaf_nodes': 100, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9, 'subsample': 0.7, 'loss': 'ls', 'max_depth': 10, 'max_features': None}
search space:
{'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'subsample': [0.7], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'subsample': [0.7], 'loss': ['ls'], 'max_depth': [10], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2478, stdev: 0.0025 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'n_estimators': 500, 'alpha': 0.9, 'subsample': 0.7, 'loss': 'ls', 'max_depth': 10, 'learning_rate': 0.01}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0080 MSE for {'max_features': None, 'min_samples_split': 12, 'n_estimators': 500, 'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [12], 'max_features': [None], 'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2521, std: 0.0014 MSE for {'n_estimators': 500, 'min_samples_split': 12, 'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [9], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [9], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0873, std: 0.0083 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4, 'n_estimators': 500, 'min_samples_split': 9, 'max_leaf_nodes': 32768}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [9], 'max_leaf_nodes': [32768]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [9], 'n_estimators': [500], 'min_samples_split': [9], 'max_leaf_nodes': [32768]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2529, std: 0.0004 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_leaf': 9, 'n_estimators': 500, 'min_samples_split': 9, 'max_leaf_nodes': 32768}
search space:
{'min_samples_split': [8], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0872, std: 0.0079 MSE for {'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 4, 'max_depth': 20}
search space:
{'min_samples_split': [8], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2533, std: 0.0016 MSE for {'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 4, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0080 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 4, 'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20}
search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2528, std: 0.0017 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20, 'max_features': None, 'n_estimators': 500}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0872, std: 0.0082 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 1000, 'max_features': None, 'max_depth': 20, 'min_samples_split': 8, 'min_samples_leaf': 4}
search space:
{'max_leaf_nodes': [1024], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2530, std: 0.0019 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 20, 'min_samples_leaf': 4}
search space:
{'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0081 MSE for {'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'min_samples_split': 8}

search space:
{'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2537, std: 0.0021 MSE for {'max_features': None, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'min_samples_split': 8}

search space:
{'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0079 MSE for {'max_depth': 20, 'min_samples_leaf': 4, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_features': None}

search space:
{'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2538, std: 0.0017 MSE for {'max_depth': 20, 'min_samples_leaf': 4, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_features': None}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0873, std: 0.0080 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8, 'max_depth': 20, 'max_leaf_nodes': 1024}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2617, std: 0.0049 MSE for {'min_samples_leaf': 4, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0078 MSE for {'max_depth': 20, 'min_samples_split': 8, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2593, std: 0.0038 MSE for {'max_depth': 20, 'min_samples_split': 8, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0869, std: 0.0081 MSE for {'n_estimators': 500, 'min_samples_leaf': 4, 'max_depth': 20, 'min_samples_split': 8, 'max_features': None, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2624, std: 0.0042 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024}

search space:
{'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0082 MSE for {'max_features': None, 'min_samples_split': 8, 'max_depth': 20, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024}

search space:
{'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2625, std: 0.0037 MSE for {'max_features': None, 'min_samples_split': 8, 'min_samples_leaf': 4, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024}

search space:
{'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0079 MSE for {'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20}

search space:
{'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2522, std: 0.0017 MSE for {'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20}

search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0869, std: 0.0078 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None}

search space:
{'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2524, std: 0.0009 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0079 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'max_depth': 20}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2607, std: 0.0041 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'max_depth': 20}

search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0081 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2547, std: 0.0024 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0874, std: 0.0078 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'min_samples_leaf': 4}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2532, std: 0.0008 MSE for {'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0079 MSE for {'max_depth': 20, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2530, std: 0.0012 MSE for {'max_depth': 20, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0869, std: 0.0081 MSE for {'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2521, std: 0.0001 MSE for {'max_depth': 20, 'min_samples_split': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0080 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_features': None, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2527, std: 0.0007 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'min_samples_split': 8, 'n_estimators': 500, 'max_features': None, 'max_depth': 20}

search space:
{'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0874, std: 0.0080 MSE for {'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8}

search space:
{'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_depth': [20], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2601, std: 0.0039 MSE for {'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0869, std: 0.0077 MSE for {'n_estimators': 500, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 8}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2603, std: 0.0035 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'min_samples_split': 8}

search space:
{'min_samples_split': [8], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0869, std: 0.0079 MSE for {'min_samples_split': 8, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'n_estimators': 500}

search space:
{'min_samples_split': [8], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'max_features': [None], 'max_depth': [20], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2611, std: 0.0039 MSE for {'min_samples_split': 8, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0080 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'max_depth': 20, 'min_samples_split': 8, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2576, std: 0.0044 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'max_depth': 20, 'min_samples_split': 8, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0872, std: 0.0078 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2583, std: 0.0068 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0079 MSE for {'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20}

search space:
{'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2533, std: 0.0020 MSE for {'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20}

search space:
{'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0872, std: 0.0081 MSE for {'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_split': 8, 'n_estimators': 500}

search space:
{'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2542, std: 0.0022 MSE for {'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_split': 8, 'n_estimators': 500}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0081 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [4], 'n_estimators': [500], 'max_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2528, std: 0.0008 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'min_samples_split': [8], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0873, std: 0.0081 MSE for {'min_samples_split': 8, 'max_depth': 20, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_features': None}

search space:
{'min_samples_split': [8], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [8], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'max_depth': [20], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2538, std: 0.0005 MSE for {'min_samples_split': 8, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_features': None, 'max_depth': 20, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0872, std: 0.0081 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 4, 'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2539, std: 0.0003 MSE for {'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 4, 'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0872, std: 0.0081 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 8, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2573, std: 0.0019 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 8, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0869, std: 0.0079 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'n_estimators': 500}

search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2534, std: 0.0011 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'n_estimators': 500}

search space:
{'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, std: 0.0081 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 8}

search space:
{'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2544, std: 0.0006 MSE for {'min_samples_leaf': 4, 'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_split': 8}

search space:
{'max_depth': [20], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0866, std: 0.0079 MSE for {'max_depth': 20, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2525, std: 0.0000 MSE for {'max_depth': 20, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0871, std: 0.0083 MSE for {'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_split': 8}

search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2520, std: 0.0001 MSE for {'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 8}

search space:
{'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0864, std: 0.0080 MSE for {'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20}

search space:
{'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None], 'max_leaf_nodes': [1024], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2530, std: 0.0009 MSE for {'n_estimators': 500, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': 20}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0873, std: 0.0083 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_depth': 20, 'min_samples_split': 8, 'max_features': None}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2539, std: 0.0023 MSE for {'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_depth': 20, 'min_samples_split': 8, 'max_features': None}

search space:
{'learning_rate': [0.01], 'max_leaf_nodes': [100], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_features': [None], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'min_samples_split': [2], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'max_leaf_nodes': [100], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_features': [None], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'min_samples_split': [2], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0857, stdev: 0.0073 MSE for {'max_leaf_nodes': 100, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'max_features': None, 'subsample': 0.7, 'max_depth': 10, 'n_estimators': 500, 'alpha': 0.9, 'min_samples_split': 2, 'loss': 'ls'}

search space:
{'learning_rate': [0.01], 'max_leaf_nodes': [100], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_features': [None], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'min_samples_split': [2], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'max_leaf_nodes': [100], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_features': [None], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'min_samples_split': [2], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2483, stdev: 0.0027 MSE for {'max_leaf_nodes': 100, 'learning_rate': 0.01, 'loss': 'ls', 'max_features': None, 'subsample': 0.7, 'min_samples_split': 2, 'max_depth': 10, 'n_estimators': 500, 'min_samples_leaf': 1, 'alpha': 0.9}

search space:
{'max_features': [None], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_split': [2], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_split': [2], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0859, stdev: 0.0068 MSE for {'max_leaf_nodes': 100, 'min_samples_leaf': 1, 'subsample': 0.7, 'learning_rate': 0.01, 'max_depth': 10, 'max_features': None, 'min_samples_split': 2, 'loss': 'ls', 'alpha': 0.9, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_split': [2], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_depth': [10], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_split': [2], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2469, stdev: 0.0016 MSE for {'max_features': None, 'min_samples_leaf': 1, 'subsample': 0.7, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'max_depth': 10, 'loss': 'ls', 'alpha': 0.9, 'min_samples_split': 2, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'max_depth': [10], 'subsample': [0.7], 'min_samples_split': [2], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'max_depth': [10], 'subsample': [0.7], 'min_samples_split': [2], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0861, stdev: 0.0069 MSE for {'learning_rate': 0.01, 'loss': 'ls', 'min_samples_leaf': 1, 'max_features': None, 'max_depth': 10, 'max_leaf_nodes': 100, 'subsample': 0.7, 'min_samples_split': 2, 'alpha': 0.9, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'max_depth': [10], 'subsample': [0.7], 'min_samples_split': [2], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['ls'], 'alpha': [0.9], 'max_depth': [10], 'subsample': [0.7], 'min_samples_split': [2], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2477, stdev: 0.0026 MSE for {'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'max_features': None, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.7, 'min_samples_split': 2, 'alpha': 0.9, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0852, stdev: 0.0063 MSE for {'min_samples_split': 2, 'max_features': None, 'learning_rate': 0.01, 'max_depth': 10, 'alpha': 0.9, 'subsample': 0.7, 'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'ls', 'min_samples_leaf': 1}

search space:
{'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'alpha': [0.9], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2513, stdev: 0.0047 MSE for {'min_samples_split': 2, 'max_features': None, 'learning_rate': 0.01, 'max_depth': 10, 'alpha': 0.9, 'subsample': 0.7, 'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'ls', 'min_samples_leaf': 1}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0668, stdev: 0.0033 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 10, 'max_features': None}

search space:
{'min_samples_split': [2], 'learning_rate': [0.01], 'loss': ['ls'], 'max_features': [None], 'max_leaf_nodes': [100], 'max_depth': [10], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'learning_rate': [0.01], 'loss': ['ls'], 'max_features': [None], 'max_leaf_nodes': [100], 'max_depth': [10], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0066 MSE for {'min_samples_split': 2, 'max_depth': 10, 'loss': 'ls', 'max_features': None, 'min_samples_leaf': 1, 'alpha': 0.9, 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'subsample': 0.7, 'n_estimators': 500}

search space:
{'min_samples_split': [2], 'learning_rate': [0.01], 'loss': ['ls'], 'max_features': [None], 'max_leaf_nodes': [100], 'max_depth': [10], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'learning_rate': [0.01], 'loss': ['ls'], 'max_features': [None], 'max_leaf_nodes': [100], 'max_depth': [10], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2169, stdev: 0.0071 MSE for {'min_samples_split': 2, 'max_features': None, 'subsample': 0.7, 'loss': 'ls', 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'max_depth': 10, 'alpha': 0.9, 'min_samples_leaf': 1, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0670, stdev: 0.0027 MSE for {'n_estimators': 500, 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': None}

search space:
{'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'min_samples_leaf': [1], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'min_samples_leaf': [1], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0800, stdev: 0.0073 MSE for {'max_depth': 10, 'alpha': 0.9, 'n_estimators': 500, 'min_samples_leaf': 1, 'subsample': 0.7, 'max_features': None, 'min_samples_split': 2, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'loss': 'ls'}

search space:
{'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'min_samples_leaf': [1], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'min_samples_leaf': [1], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2170, stdev: 0.0077 MSE for {'min_samples_split': 2, 'max_depth': 10, 'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_leaf': 1, 'max_features': None, 'loss': 'ls', 'n_estimators': 500, 'learning_rate': 0.01, 'subsample': 0.7}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0671, stdev: 0.0028 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 10}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.3373, stdev: 0.0367 MSE for {'max_features': None, 'max_depth': 10, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'n_estimators': [500], 'learning_rate': [0.01], 'alpha': [0.9], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'n_estimators': [500], 'learning_rate': [0.01], 'alpha': [0.9], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0058 MSE for {'max_features': None, 'max_depth': 10, 'learning_rate': 0.01, 'loss': 'ls', 'min_samples_split': 2, 'subsample': 0.7, 'max_leaf_nodes': 100, 'n_estimators': 500, 'alpha': 0.9, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'n_estimators': [500], 'learning_rate': [0.01], 'alpha': [0.9], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'n_estimators': [500], 'learning_rate': [0.01], 'alpha': [0.9], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2271, stdev: 0.0102 MSE for {'max_features': None, 'learning_rate': 0.01, 'loss': 'ls', 'min_samples_split': 2, 'subsample': 0.7, 'max_leaf_nodes': 100, 'n_estimators': 500, 'min_samples_leaf': 1, 'alpha': 0.9, 'max_depth': 10}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0671, stdev: 0.0025 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 10, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [10], 'n_estimators': [500], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0672, stdev: 0.0040 MSE for {'max_features': None, 'max_depth': 10, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0068 MSE for {'min_samples_split': 2, 'loss': 'ls', 'max_features': None, 'max_depth': 10, 'min_samples_leaf': 1, 'subsample': 0.7, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9}

search space:
{'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2165, stdev: 0.0063 MSE for {'min_samples_split': 2, 'max_leaf_nodes': 100, 'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 1, 'subsample': 0.7, 'max_depth': 10, 'loss': 'ls', 'learning_rate': 0.01, 'alpha': 0.9}

search space:
{'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [500], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0673, stdev: 0.0038 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 10}

search space:
{'learning_rate': [0.01], 'max_depth': [10], 'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'max_depth': [10], 'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0800, stdev: 0.0072 MSE for {'learning_rate': 0.01, 'alpha': 0.9, 'min_samples_leaf': 1, 'subsample': 0.7, 'loss': 'ls', 'max_depth': 10, 'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 100, 'min_samples_split': 2}

search space:
{'learning_rate': [0.01], 'max_depth': [10], 'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.01], 'max_depth': [10], 'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2163, stdev: 0.0076 MSE for {'n_estimators': 500, 'alpha': 0.9, 'min_samples_leaf': 1, 'max_depth': 10, 'subsample': 0.7, 'loss': 'ls', 'max_features': None, 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'min_samples_split': 2}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [25], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0665, stdev: 0.0024 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 25, 'max_features': None}

search space:
{'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0682, stdev: 0.0025 MSE for {'max_features': None, 'max_depth': 10, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0678, stdev: 0.0030 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'n_estimators': 500, 'max_features': None}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'alpha': [0.9], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'alpha': [0.9], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, stdev: 0.0072 MSE for {'loss': 'ls', 'n_estimators': 500, 'max_features': None, 'subsample': 0.7, 'max_depth': 10, 'alpha': 0.9, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'min_samples_split': 2}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'alpha': [0.9], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'alpha': [0.9], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2164, stdev: 0.0072 MSE for {'n_estimators': 500, 'loss': 'ls', 'alpha': 0.9, 'max_features': None, 'max_depth': 10, 'subsample': 0.7, 'min_samples_split': 2, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'max_leaf_nodes': 100}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0666, stdev: 0.0030 MSE for {'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 10}

search space:
{'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_features': [None], 'learning_rate': [0.01], 'alpha': [0.9], 'min_samples_split': [2], 'subsample': [0.7], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_features': [None], 'learning_rate': [0.01], 'alpha': [0.9], 'min_samples_split': [2], 'subsample': [0.7], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, stdev: 0.0073 MSE for {'max_depth': 10, 'alpha': 0.9, 'n_estimators': 500, 'max_leaf_nodes': 100, 'max_features': None, 'learning_rate': 0.01, 'loss': 'ls', 'min_samples_leaf': 1, 'min_samples_split': 2, 'subsample': 0.7}

search space:
{'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_features': [None], 'learning_rate': [0.01], 'alpha': [0.9], 'min_samples_split': [2], 'subsample': [0.7], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_features': [None], 'learning_rate': [0.01], 'alpha': [0.9], 'min_samples_split': [2], 'subsample': [0.7], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2173, stdev: 0.0064 MSE for {'max_depth': 10, 'loss': 'ls', 'n_estimators': 500, 'subsample': 0.7, 'max_features': None, 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0672, stdev: 0.0029 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'max_features': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'alpha': [0.9], 'learning_rate': [0.01], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'alpha': [0.9], 'learning_rate': [0.01], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, stdev: 0.0063 MSE for {'max_features': None, 'alpha': 0.9, 'learning_rate': 0.01, 'min_samples_split': 2, 'subsample': 0.7, 'max_leaf_nodes': 100, 'max_depth': 10, 'loss': 'ls', 'n_estimators': 500, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'alpha': [0.9], 'learning_rate': [0.01], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'alpha': [0.9], 'learning_rate': [0.01], 'min_samples_split': [2], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2143, stdev: 0.0064 MSE for {'max_features': None, 'alpha': 0.9, 'learning_rate': 0.01, 'min_samples_split': 2, 'subsample': 0.7, 'max_leaf_nodes': 100, 'max_depth': 10, 'loss': 'ls', 'n_estimators': 500, 'min_samples_leaf': 1}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0668, stdev: 0.0018 MSE for {'max_features': None, 'n_estimators': 500, 'max_leaf_nodes': None, 'max_depth': 10}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0676, stdev: 0.0020 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'n_estimators': 500, 'max_features': None}

search space:
{'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'n_estimators': [500], 'max_leaf_nodes': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0678, stdev: 0.0030 MSE for {'max_features': None, 'max_depth': 10, 'n_estimators': 500, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0791, stdev: 0.0073 MSE for {'max_leaf_nodes': 100, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_depth': 10, 'loss': 'ls', 'n_estimators': 500, 'alpha': 0.9, 'learning_rate': 0.01, 'max_features': None, 'subsample': 0.7}

search space:
{'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'n_estimators': [500], 'alpha': [0.9], 'learning_rate': [0.01], 'max_features': [None], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2141, stdev: 0.0079 MSE for {'max_leaf_nodes': 100, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_depth': 10, 'loss': 'ls', 'n_estimators': 500, 'alpha': 0.9, 'learning_rate': 0.01, 'max_features': None, 'subsample': 0.7}

search space:
{'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [10], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0660, stdev: 0.0024 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'max_features': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0788, stdev: 0.0076 MSE for {'n_estimators': 500, 'min_samples_leaf': 1, 'alpha': 0.9, 'max_depth': 10, 'learning_rate': 0.01, 'loss': 'ls', 'max_leaf_nodes': 100, 'subsample': 0.7, 'max_features': None, 'min_samples_split': 2}

search space:
{'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'min_samples_leaf': [1], 'alpha': [0.9], 'max_depth': [10], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2146, stdev: 0.0063 MSE for {'n_estimators': 500, 'min_samples_leaf': 1, 'alpha': 0.9, 'max_depth': 10, 'learning_rate': 0.01, 'loss': 'ls', 'max_leaf_nodes': 100, 'subsample': 0.7, 'max_features': None, 'min_samples_split': 2}

search space:
{'max_features': [None], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'loss': ['ls'], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'loss': ['ls'], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0786, stdev: 0.0065 MSE for {'max_depth': 10, 'max_features': None, 'subsample': 0.7, 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'loss': 'ls', 'n_estimators': 500, 'min_samples_leaf': 1, 'min_samples_split': 2, 'alpha': 0.9}

search space:
{'max_features': [None], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'loss': ['ls'], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'loss': ['ls'], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2134, stdev: 0.0073 MSE for {'min_samples_split': 2, 'max_features': None, 'subsample': 0.7, 'learning_rate': 0.01, 'n_estimators': 500, 'max_depth': 10, 'max_leaf_nodes': 100, 'min_samples_leaf': 1, 'loss': 'ls', 'alpha': 0.9}

search space:
{'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0674, stdev: 0.0034 MSE for {'max_features': None, 'max_depth': 10, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [None], 'max_features': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0674, stdev: 0.0039 MSE for {'n_estimators': 500, 'max_leaf_nodes': None, 'max_features': None, 'max_depth': 10}

search space:
{'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, stdev: 0.0070 MSE for {'min_samples_split': 2, 'subsample': 0.7, 'max_features': None, 'max_depth': 10, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9, 'loss': 'ls', 'min_samples_leaf': 1}

search space:
{'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'n_estimators': [500], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2127, stdev: 0.0085 MSE for {'min_samples_split': 2, 'subsample': 0.7, 'max_features': None, 'max_depth': 10, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'n_estimators': 500, 'alpha': 0.9, 'loss': 'ls', 'min_samples_leaf': 1}

search space:
{'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0668, stdev: 0.0020 MSE for {'max_depth': 10, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0674, stdev: 0.0019 MSE for {'max_leaf_nodes': None, 'max_depth': 10, 'max_features': None, 'n_estimators': 500}

search space:
{'max_features': [None], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, stdev: 0.0073 MSE for {'max_features': None, 'min_samples_leaf': 1, 'alpha': 0.9, 'loss': 'ls', 'subsample': 0.7, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'max_depth': 10, 'n_estimators': 500, 'min_samples_split': 2}

search space:
{'max_features': [None], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'loss': ['ls'], 'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'max_depth': [10], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, stdev: 0.0066 MSE for {'alpha': 0.9, 'min_samples_leaf': 1, 'max_depth': 10, 'loss': 'ls', 'max_features': None, 'subsample': 0.7, 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'n_estimators': 500, 'min_samples_split': 2}

search space:
{'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1
 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1
 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1
  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1
 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1
  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1
 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1
  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0
  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1
 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1
  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0
  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1
 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1
  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0
  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1
 -1 -1 -1 -1 -1 -1 -1  1  1  1  1  1  0  0  0  0  0 -1 -1 -1 -1 -1 -1 -1 -1
 -1  1  1  1  1  1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=3,
       param_grid={'max_features': [None], 'max_leaf_nodes': [None], 'max_depth': [10], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0662, stdev: 0.0032 MSE for {'max_features': None, 'max_depth': 10, 'max_leaf_nodes': None, 'n_estimators': 500}

search space:
{'subsample': [0.7], 'n_estimators': [500], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_features': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [0.7], 'n_estimators': [500], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_features': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, stdev: 0.0073 MSE for {'subsample': 0.7, 'n_estimators': 500, 'max_depth': 10, 'min_samples_leaf': 1, 'loss': 'ls', 'max_leaf_nodes': 100, 'learning_rate': 0.01, 'min_samples_split': 2, 'max_features': None, 'alpha': 0.9}

search space:
{'subsample': [0.7], 'n_estimators': [500], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_features': [None], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [0.7], 'n_estimators': [500], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'max_leaf_nodes': [100], 'learning_rate': [0.01], 'min_samples_split': [2], 'max_features': [None], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2165, stdev: 0.0074 MSE for {'n_estimators': 500, 'subsample': 0.7, 'max_depth': 10, 'min_samples_leaf': 1, 'alpha': 0.9, 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'min_samples_split': 2, 'max_features': None, 'loss': 'ls'}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'min_samples_split': [2], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'min_samples_split': [2], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0074 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'ls', 'alpha': 0.9, 'min_samples_leaf': 1, 'max_features': None, 'learning_rate': 0.01, 'subsample': 0.7, 'max_depth': 10, 'min_samples_split': 2}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'min_samples_split': [2], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'loss': ['ls'], 'subsample': [0.7], 'max_depth': [10], 'min_samples_split': [2], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2133, stdev: 0.0072 MSE for {'n_estimators': 500, 'loss': 'ls', 'alpha': 0.9, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'subsample': 0.7, 'max_depth': 10, 'min_samples_split': 2, 'max_features': None}

search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0770, std: 0.0060 MSE for {'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'max_features': None, 'n_estimators': 500}
search space:
{'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_leaf': [6], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_split': [12], 'max_features': [None], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2137, std: 0.0066 MSE for {'max_features': None, 'min_samples_leaf': 6, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0817, std: 0.0087 MSE for {'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_depth': [20], 'max_features': [None], 'min_samples_split': [12], 'min_samples_leaf': [6], 'max_leaf_nodes': [1024], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2367, std: 0.0098 MSE for {'min_samples_split': 12, 'max_features': None, 'max_depth': 20, 'min_samples_leaf': 6, 'max_leaf_nodes': 1024, 'n_estimators': 500}
search space:
{'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0773, std: 0.0059 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'min_samples_split': [12], 'max_features': [None], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [6], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, std: 0.0068 MSE for {'n_estimators': 500, 'max_features': None, 'max_leaf_nodes': 1024, 'min_samples_split': 12, 'min_samples_leaf': 6, 'max_depth': 20}
search space:
{'n_estimators': [2000], 'min_samples_leaf': [1], 'max_features': [0.2], 'max_depth': [30], 'max_leaf_nodes': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [2000], 'min_samples_leaf': [1], 'max_features': [0.2], 'max_depth': [30], 'max_leaf_nodes': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, std: 0.0052 MSE for {'max_depth': 30, 'n_estimators': 2000, 'min_samples_leaf': 1, 'max_features': 0.2, 'max_leaf_nodes': None, 'min_samples_split': 2}
search space:
{'n_estimators': [2000], 'min_samples_leaf': [1], 'max_features': [0.2], 'max_depth': [30], 'max_leaf_nodes': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [2000], 'min_samples_leaf': [1], 'max_features': [0.2], 'max_depth': [30], 'max_leaf_nodes': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2149, std: 0.0068 MSE for {'n_estimators': 2000, 'min_samples_leaf': 1, 'max_features': 0.2, 'min_samples_split': 2, 'max_depth': 30, 'max_leaf_nodes': None}
search space:
{'max_depth': [24], 'max_features': [0.2], 'n_estimators': [4000], 'min_samples_split': [4], 'max_leaf_nodes': [None], 'min_samples_leaf': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [24], 'max_features': [0.2], 'n_estimators': [4000], 'min_samples_split': [4], 'max_leaf_nodes': [None], 'min_samples_leaf': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0792, std: 0.0053 MSE for {'min_samples_split': 4, 'max_features': 0.2, 'n_estimators': 4000, 'max_depth': 24, 'max_leaf_nodes': None, 'min_samples_leaf': 2}
search space:
{'max_depth': [24], 'max_features': [0.2], 'n_estimators': [4000], 'min_samples_split': [4], 'max_leaf_nodes': [None], 'min_samples_leaf': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [24], 'max_features': [0.2], 'n_estimators': [4000], 'min_samples_split': [4], 'max_leaf_nodes': [None], 'min_samples_leaf': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2146, std: 0.0073 MSE for {'min_samples_split': 4, 'max_features': 0.2, 'n_estimators': 4000, 'max_depth': 24, 'max_leaf_nodes': None, 'min_samples_leaf': 2}
search space:
{'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'alpha': [0.9], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'alpha': [0.9], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0070 MSE for {'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_split': 2, 'max_depth': 10, 'learning_rate': 0.01, 'subsample': 0.7, 'loss': 'ls', 'n_estimators': 500, 'max_features': None, 'min_samples_leaf': 1}

search space:
{'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'alpha': [0.9], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'subsample': [0.7], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['ls'], 'min_samples_leaf': [1], 'alpha': [0.9], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2141, stdev: 0.0077 MSE for {'subsample': 0.7, 'max_depth': 10, 'max_features': None, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'ls', 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1}

search space:
{'max_leaf_nodes': [None], 'max_depth': [24], 'n_estimators': [5000], 'max_features': [0.2], 'min_samples_split': [4], 'min_samples_leaf': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [24], 'n_estimators': [5000], 'max_features': [0.2], 'min_samples_split': [4], 'min_samples_leaf': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0830, std: 0.0048 MSE for {'max_leaf_nodes': None, 'max_depth': 24, 'n_estimators': 5000, 'max_features': 0.2, 'min_samples_split': 4, 'min_samples_leaf': 2}
search space:
{'max_leaf_nodes': [None], 'max_depth': [24], 'n_estimators': [5000], 'max_features': [0.2], 'min_samples_split': [4], 'min_samples_leaf': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'max_depth': [24], 'n_estimators': [5000], 'max_features': [0.2], 'min_samples_split': [4], 'min_samples_leaf': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2192, std: 0.0069 MSE for {'max_leaf_nodes': None, 'max_depth': 24, 'n_estimators': 5000, 'max_features': 0.2, 'min_samples_split': 4, 'min_samples_leaf': 2}
search space:
{'loss': ['ls'], 'subsample': [0.7], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_features': [None], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'subsample': [0.7], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_features': [None], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0790, stdev: 0.0065 MSE for {'loss': 'ls', 'subsample': 0.7, 'n_estimators': 500, 'alpha': 0.9, 'max_depth': 10, 'min_samples_split': 2, 'min_samples_leaf': 1, 'learning_rate': 0.01, 'max_features': None, 'max_leaf_nodes': 100}

search space:
{'loss': ['ls'], 'subsample': [0.7], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_features': [None], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'subsample': [0.7], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'n_estimators': [500], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_features': [None], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2146, stdev: 0.0035 MSE for {'loss': 'ls', 'subsample': 0.7, 'min_samples_split': 2, 'alpha': 0.9, 'max_depth': 10, 'n_estimators': 500, 'min_samples_leaf': 1, 'learning_rate': 0.01, 'max_features': None, 'max_leaf_nodes': 100}

search space:
{'max_features': [None], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_split': [2], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1], 'max_leaf_nodes': [100], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_split': [2], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1], 'max_leaf_nodes': [100], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, stdev: 0.0066 MSE for {'min_samples_split': 2, 'min_samples_leaf': 1, 'subsample': 0.7, 'max_features': None, 'max_depth': 10, 'alpha': 0.9, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'ls'}

search space:
{'max_features': [None], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_split': [2], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1], 'max_leaf_nodes': [100], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_split': [2], 'max_depth': [10], 'alpha': [0.9], 'loss': ['ls'], 'min_samples_leaf': [1], 'max_leaf_nodes': [100], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2143, stdev: 0.0038 MSE for {'min_samples_split': 2, 'n_estimators': 500, 'subsample': 0.7, 'max_features': None, 'max_depth': 10, 'alpha': 0.9, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'loss': 'ls'}

search space:
{'max_features': [0.2], 'max_leaf_nodes': [None], 'max_depth': [24], 'min_samples_leaf': [2], 'n_estimators': [5000], 'min_samples_split': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'max_leaf_nodes': [None], 'max_depth': [24], 'min_samples_leaf': [2], 'n_estimators': [5000], 'min_samples_split': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0914, std: 0.0000 MSE for {'max_features': 0.2, 'max_leaf_nodes': None, 'max_depth': 24, 'min_samples_leaf': 2, 'n_estimators': 5000, 'min_samples_split': 4}
search space:
{'max_features': [0.2], 'max_leaf_nodes': [None], 'max_depth': [24], 'min_samples_leaf': [2], 'n_estimators': [5000], 'min_samples_split': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 -1 ...,  0  0  0])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[-1 -1 ...,  0  0]),
       error_score='raise',
       estimator=ExtraTreesRegressor(bootstrap=False, criterion='mse', max_depth=None,
          max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
          min_samples_split=2, min_weight_fraction_leaf=0.0,
          n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
          verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'max_leaf_nodes': [None], 'max_depth': [24], 'min_samples_leaf': [2], 'n_estimators': [5000], 'min_samples_split': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2582, std: 0.0000 MSE for {'max_features': 0.2, 'max_leaf_nodes': None, 'max_depth': 24, 'min_samples_leaf': 2, 'n_estimators': 5000, 'min_samples_split': 4}
search space:
{'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0073 MSE for {'subsample': 0.7, 'learning_rate': 0.01, 'loss': 'ls', 'n_estimators': 500, 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'max_features': None, 'max_depth': 10}

search space:
{'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500], 'min_samples_split': [2], 'min_samples_leaf': [1], 'max_features': [None], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2136, stdev: 0.0067 MSE for {'subsample': 0.7, 'max_leaf_nodes': 100, 'loss': 'ls', 'n_estimators': 500, 'alpha': 0.9, 'learning_rate': 0.01, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': None, 'max_depth': 10}

search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, std: 0.0075 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'n_estimators': [500], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2129, std: 0.0099 MSE for {'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20}

search space:
{'min_samples_split': [2], 'max_features': [None], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'max_features': [None], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0072 MSE for {'min_samples_split': 2, 'max_features': None, 'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_leaf': 1, 'n_estimators': 500, 'subsample': 0.7, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10}

search space:
{'min_samples_split': [2], 'max_features': [None], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'max_features': [None], 'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_leaf': [1], 'n_estimators': [500], 'subsample': [0.7], 'learning_rate': [0.01], 'loss': ['ls'], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2140, stdev: 0.0063 MSE for {'min_samples_split': 2, 'max_features': None, 'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_leaf': 1, 'n_estimators': 500, 'subsample': 0.7, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 10}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, std: 0.0077 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_features': None}

search space:
{'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2134, std: 0.0095 MSE for {'n_estimators': 500, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_features': None}

search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, std: 0.0075 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 4, 'max_features': None, 'min_samples_split': 8}

search space:
{'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [500], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2135, std: 0.0099 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 500, 'max_depth': 20, 'min_samples_leaf': 4, 'max_features': None, 'min_samples_split': 8}

search space:
{'min_samples_split': [8], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0780, std: 0.0076 MSE for {'min_samples_split': 8, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'min_samples_split': [8], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'max_leaf_nodes': [None], 'n_estimators': [500], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2134, std: 0.0090 MSE for {'min_samples_split': 8, 'max_leaf_nodes': None, 'n_estimators': 500, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [None], 'max_features': [0.2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [None], 'max_features': [0.2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0797, std: 0.0053 MSE for {'min_samples_leaf': 4, 'min_samples_split': 8, 'n_estimators': 1000, 'max_depth': 20, 'max_leaf_nodes': None, 'max_features': 0.2}

search space:
{'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [None], 'max_features': [0.2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [None], 'max_features': [0.2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, std: 0.0078 MSE for {'min_samples_leaf': 4, 'min_samples_split': 8, 'n_estimators': 1000, 'max_depth': 20, 'max_leaf_nodes': None, 'max_features': 0.2}

search space:
{'max_features': [0.2], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [25], 'n_estimators': [1000], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [25], 'n_estimators': [1000], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0799, std: 0.0055 MSE for {'max_depth': 25, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': 0.2, 'n_estimators': 1000, 'max_leaf_nodes': None}

search space:
{'max_features': [0.2], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [25], 'n_estimators': [1000], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [25], 'n_estimators': [1000], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, std: 0.0079 MSE for {'max_depth': 25, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': 0.2, 'n_estimators': 1000, 'max_leaf_nodes': None}

search space:
{'n_estimators': [2000], 'max_depth': [25], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [0.2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [2000], 'max_depth': [25], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [0.2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0799, std: 0.0053 MSE for {'n_estimators': 2000, 'max_depth': 25, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_features': 0.2, 'max_leaf_nodes': None}

search space:
{'n_estimators': [2000], 'max_depth': [25], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [0.2], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [2000], 'max_depth': [25], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_features': [0.2], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2138, std: 0.0077 MSE for {'n_estimators': 2000, 'max_depth': 25, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_features': 0.2, 'max_leaf_nodes': None}

search space:
{'max_leaf_nodes': [None], 'min_samples_split': [8], 'max_depth': [25], 'min_samples_leaf': [4], 'max_features': [0.2], 'n_estimators': [3000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'min_samples_split': [8], 'max_depth': [25], 'min_samples_leaf': [4], 'max_features': [0.2], 'n_estimators': [3000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0798, std: 0.0053 MSE for {'max_leaf_nodes': None, 'min_samples_split': 8, 'max_depth': 25, 'min_samples_leaf': 4, 'max_features': 0.2, 'n_estimators': 3000}

search space:
{'max_leaf_nodes': [None], 'min_samples_split': [8], 'max_depth': [25], 'min_samples_leaf': [4], 'max_features': [0.2], 'n_estimators': [3000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'min_samples_split': [8], 'max_depth': [25], 'min_samples_leaf': [4], 'max_features': [0.2], 'n_estimators': [3000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2134, std: 0.0077 MSE for {'max_leaf_nodes': None, 'min_samples_split': 8, 'max_depth': 25, 'min_samples_leaf': 4, 'max_features': 0.2, 'n_estimators': 3000}

search space:
{'max_features': [0.2], 'max_depth': [25], 'n_estimators': [4000], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'max_depth': [25], 'n_estimators': [4000], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0799, std: 0.0054 MSE for {'max_features': 0.2, 'max_depth': 25, 'n_estimators': 4000, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': None}

search space:
{'max_features': [0.2], 'max_depth': [25], 'n_estimators': [4000], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'max_depth': [25], 'n_estimators': [4000], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2133, std: 0.0079 MSE for {'max_features': 0.2, 'max_depth': 25, 'n_estimators': 4000, 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_leaf_nodes': None}

search space:
{'n_estimators': [4000], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [4000], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, std: 0.0074 MSE for {'n_estimators': 4000, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8}

search space:
{'n_estimators': [4000], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [4000], 'max_depth': [20], 'max_leaf_nodes': [1024], 'max_features': [None], 'min_samples_leaf': [4], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2130, std: 0.0098 MSE for {'n_estimators': 4000, 'max_depth': 20, 'max_leaf_nodes': 1024, 'max_features': None, 'min_samples_leaf': 4, 'min_samples_split': 8}

search space:
{'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0782, std: 0.0075 MSE for {'max_features': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2129, std: 0.0100 MSE for {'max_features': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_split': [2], 'min_samples_leaf': [1], 'n_estimators': [50], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_split': [2], 'min_samples_leaf': [1], 'n_estimators': [50], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0870, stdev: 0.0071 MSE for {'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.7, 'learning_rate': 0.01, 'max_features': None, 'n_estimators': 50}

search space:
{'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_split': [2], 'min_samples_leaf': [1], 'n_estimators': [200, 500, 1000], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'alpha': [0.9], 'min_samples_split': [2], 'min_samples_leaf': [1], 'n_estimators': [200, 500, 1000], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'max_features': [None], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2133, stdev: 0.0073 MSE for {'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1, 'loss': 'ls', 'max_depth': 10, 'learning_rate': 0.01, 'subsample': 0.7, 'max_features': None, 'n_estimators': 200}
mean: 0.2132, stdev: 0.0078 MSE for {'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_depth': 10, 'loss': 'ls', 'subsample': 0.7, 'learning_rate': 0.01, 'max_features': None, 'n_estimators': 500}
mean: 0.2163, stdev: 0.0077 MSE for {'max_leaf_nodes': 100, 'alpha': 0.9, 'min_samples_split': 2, 'min_samples_leaf': 1, 'loss': 'ls', 'max_depth': 10, 'learning_rate': 0.01, 'subsample': 0.7, 'max_features': None, 'n_estimators': 1000}

search space:
{'loss': ['ls'], 'min_samples_leaf': [1], 'subsample': [0.7], 'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'min_samples_leaf': [1], 'subsample': [0.7], 'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0785, stdev: 0.0071 MSE for {'loss': 'ls', 'alpha': 0.9, 'subsample': 0.7, 'max_leaf_nodes': 100, 'max_depth': 10, 'max_features': None, 'n_estimators': 500, 'min_samples_split': 2, 'min_samples_leaf': 1, 'learning_rate': 0.01}

search space:
{'loss': ['ls'], 'min_samples_leaf': [1], 'subsample': [0.7], 'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'min_samples_leaf': [1], 'subsample': [0.7], 'alpha': [0.9], 'min_samples_split': [2], 'max_features': [None], 'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.01], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, stdev: 0.0080 MSE for {'loss': 'ls', 'min_samples_leaf': 1, 'subsample': 0.7, 'alpha': 0.9, 'min_samples_split': 2, 'max_features': None, 'n_estimators': 500, 'max_depth': 10, 'learning_rate': 0.01, 'max_leaf_nodes': 100}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['linear'], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['linear'], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0824, stdev: 0.0083 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'linear', 'max_features': None, 'max_depth': 10, 'learning_rate': 0.01}

search space:
{'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['linear'], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_leaf_nodes': [100], 'loss': ['linear'], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2212, stdev: 0.0084 MSE for {'n_estimators': 500, 'max_leaf_nodes': 100, 'loss': 'linear', 'max_features': None, 'max_depth': 10, 'learning_rate': 0.01}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['linear'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['linear'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0821, stdev: 0.0085 MSE for {'n_estimators': 500, 'learning_rate': 0.01, 'loss': 'linear', 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': 100}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['linear'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'loss': ['linear'], 'max_depth': [10], 'max_features': [None], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2224, stdev: 0.0079 MSE for {'n_estimators': 500, 'learning_rate': 0.01, 'loss': 'linear', 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': 100}

search space:
{'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'min_samples_leaf': [1], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'min_samples_leaf': [1], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0821, stdev: 0.0082 MSE for {'min_samples_split': 2, 'n_estimators': 500, 'max_leaf_nodes': 100, 'max_depth': 10, 'max_features': None, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'loss': 'linear'}

search space:
{'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'min_samples_leaf': [1], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [2], 'n_estimators': [500], 'max_leaf_nodes': [100], 'max_depth': [10], 'max_features': [None], 'learning_rate': [0.01], 'min_samples_leaf': [1], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2211, stdev: 0.0073 MSE for {'min_samples_split': 2, 'n_estimators': 500, 'max_leaf_nodes': 100, 'max_depth': 10, 'max_features': None, 'learning_rate': 0.01, 'min_samples_leaf': 1, 'loss': 'linear'}

search space:
{'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['linear'], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['linear'], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0820, stdev: 0.0082 MSE for {'max_leaf_nodes': None, 'min_samples_split': 2, 'max_features': None, 'min_samples_leaf': 1, 'learning_rate': 0.01, 'n_estimators': 500, 'loss': 'linear', 'max_depth': 10}

search space:
{'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['linear'], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'min_samples_split': [2], 'max_features': [None], 'min_samples_leaf': [1], 'learning_rate': [0.01], 'n_estimators': [500], 'loss': ['linear'], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2212, stdev: 0.0071 MSE for {'max_leaf_nodes': None, 'min_samples_split': 2, 'max_features': None, 'min_samples_leaf': 1, 'learning_rate': 0.01, 'n_estimators': 500, 'loss': 'linear', 'max_depth': 10}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'min_samples_split': [8], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'min_samples_split': [8], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0824, stdev: 0.0084 MSE for {'n_estimators': 500, 'learning_rate': 0.01, 'min_samples_split': 8, 'max_features': None, 'max_depth': 10, 'max_leaf_nodes': None, 'loss': 'linear', 'min_samples_leaf': 4}

search space:
{'n_estimators': [500], 'learning_rate': [0.01], 'min_samples_split': [8], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'learning_rate': [0.01], 'min_samples_split': [8], 'max_features': [None], 'max_depth': [10], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2223, stdev: 0.0084 MSE for {'n_estimators': 500, 'learning_rate': 0.01, 'min_samples_split': 8, 'max_features': None, 'max_depth': 10, 'max_leaf_nodes': None, 'loss': 'linear', 'min_samples_leaf': 4}

search space:
{'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.1], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.1], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0849, stdev: 0.0087 MSE for {'n_estimators': 500, 'max_depth': 10, 'learning_rate': 0.1, 'max_leaf_nodes': None, 'loss': 'linear', 'min_samples_leaf': 1, 'max_features': None, 'min_samples_split': 2}

search space:
{'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.1], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'learning_rate': [0.1], 'max_leaf_nodes': [None], 'loss': ['linear'], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2225, stdev: 0.0082 MSE for {'n_estimators': 500, 'max_depth': 10, 'learning_rate': 0.1, 'max_leaf_nodes': None, 'loss': 'linear', 'min_samples_leaf': 1, 'max_features': None, 'min_samples_split': 2}

search space:
{'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'subsample': [0.7], 'max_features': [None], 'max_leaf_nodes': [100], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'subsample': [0.7], 'max_features': [None], 'max_leaf_nodes': [100], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0786, stdev: 0.0074 MSE for {'max_depth': 10, 'min_samples_split': 2, 'learning_rate': 0.01, 'alpha': 0.9, 'n_estimators': 500, 'loss': 'ls', 'subsample': 0.7, 'max_features': None, 'max_leaf_nodes': 100, 'min_samples_leaf': 1}

search space:
{'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'subsample': [0.7], 'max_features': [None], 'max_leaf_nodes': [100], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'loss': ['ls'], 'n_estimators': [500], 'subsample': [0.7], 'max_features': [None], 'max_leaf_nodes': [100], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2137, stdev: 0.0081 MSE for {'max_depth': 10, 'min_samples_split': 2, 'learning_rate': 0.01, 'loss': 'ls', 'n_estimators': 500, 'subsample': 0.7, 'max_features': None, 'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'alpha': 0.9}

search space:
{'max_leaf_nodes': [100], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_leaf': [1], 'alpha': [0.9], 'n_estimators': [500], 'min_samples_split': [2], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_leaf': [1], 'alpha': [0.9], 'n_estimators': [500], 'min_samples_split': [2], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0076 MSE for {'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'max_features': None, 'alpha': 0.9, 'learning_rate': 0.01, 'subsample': 0.7, 'max_depth': 10, 'n_estimators': 500, 'min_samples_split': 2, 'loss': 'ls'}

search space:
{'max_leaf_nodes': [100], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_leaf': [1], 'alpha': [0.9], 'n_estimators': [500], 'min_samples_split': [2], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'max_features': [None], 'max_depth': [10], 'learning_rate': [0.01], 'subsample': [0.7], 'min_samples_leaf': [1], 'alpha': [0.9], 'n_estimators': [500], 'min_samples_split': [2], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2135, stdev: 0.0066 MSE for {'min_samples_leaf': 1, 'max_leaf_nodes': 100, 'max_features': None, 'alpha': 0.9, 'learning_rate': 0.01, 'subsample': 0.7, 'max_depth': 10, 'n_estimators': 500, 'min_samples_split': 2, 'loss': 'ls'}

search space:
{'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'n_estimators': [500], 'learning_rate': [0.5], 'loss': ['linear'], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'n_estimators': [500], 'learning_rate': [0.5], 'loss': ['linear'], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0840, stdev: 0.0084 MSE for {'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'n_estimators': 500, 'learning_rate': 0.5, 'loss': 'linear', 'max_depth': 10}

search space:
{'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'n_estimators': [500], 'learning_rate': [0.5], 'loss': ['linear'], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [None], 'min_samples_leaf': [1], 'min_samples_split': [2], 'max_leaf_nodes': [None], 'n_estimators': [500], 'learning_rate': [0.5], 'loss': ['linear'], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2204, stdev: 0.0080 MSE for {'max_features': None, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_leaf_nodes': None, 'n_estimators': 500, 'learning_rate': 0.5, 'loss': 'linear', 'max_depth': 10}

search space:
{'loss': ['linear'], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_depth': [20], 'learning_rate': [0.1], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_depth': [20], 'learning_rate': [0.1], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0844, stdev: 0.0085 MSE for {'loss': 'linear', 'n_estimators': 500, 'min_samples_leaf': 1, 'max_features': None, 'learning_rate': 0.1, 'max_depth': 20, 'min_samples_split': 2, 'max_leaf_nodes': 1024}

search space:
{'loss': ['linear'], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_depth': [20], 'learning_rate': [0.1], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'n_estimators': [500], 'min_samples_leaf': [1], 'max_depth': [20], 'learning_rate': [0.1], 'max_features': [None], 'min_samples_split': [2], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2221, stdev: 0.0078 MSE for {'loss': 'linear', 'n_estimators': 500, 'min_samples_leaf': 1, 'max_features': None, 'learning_rate': 0.1, 'max_depth': 20, 'min_samples_split': 2, 'max_leaf_nodes': 1024}

search space:
{'max_features': [0.2], 'learning_rate': [0.1], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'learning_rate': [0.1], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0847, stdev: 0.0085 MSE for {'max_features': 0.2, 'learning_rate': 0.1, 'loss': 'linear', 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_depth': 20, 'n_estimators': 500, 'min_samples_leaf': 4}

search space:
{'max_features': [0.2], 'learning_rate': [0.1], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [0.2], 'learning_rate': [0.1], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [20], 'n_estimators': [500], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2217, stdev: 0.0085 MSE for {'max_features': 0.2, 'learning_rate': 0.1, 'loss': 'linear', 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_depth': 20, 'n_estimators': 500, 'min_samples_leaf': 4}

search space:
{'max_depth': [20], 'max_features': [0.2], 'min_samples_leaf': [4], 'n_estimators': [1000], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'learning_rate': [0.1], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [20], 'max_features': [0.2], 'min_samples_leaf': [4], 'n_estimators': [1000], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'learning_rate': [0.1], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0846, stdev: 0.0085 MSE for {'max_depth': 20, 'max_features': 0.2, 'min_samples_leaf': 4, 'n_estimators': 1000, 'loss': 'linear', 'max_leaf_nodes': 1024, 'learning_rate': 0.1, 'min_samples_split': 8}

search space:
{'max_depth': [20], 'max_features': [0.2], 'min_samples_leaf': [4], 'n_estimators': [1000], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'learning_rate': [0.1], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [20], 'max_features': [0.2], 'min_samples_leaf': [4], 'n_estimators': [1000], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'learning_rate': [0.1], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2218, stdev: 0.0090 MSE for {'max_depth': 20, 'max_features': 0.2, 'min_samples_leaf': 4, 'n_estimators': 1000, 'loss': 'linear', 'max_leaf_nodes': 1024, 'learning_rate': 0.1, 'min_samples_split': 8}

search space:
{'loss': ['linear'], 'max_features': [0.2], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'n_estimators': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'max_features': [0.2], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'n_estimators': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0945, stdev: 0.0058 MSE for {'loss': 'linear', 'max_features': 0.2, 'min_samples_split': 8, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'learning_rate': 0.1, 'n_estimators': 10}

search space:
{'loss': ['exponential'], 'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'n_estimators': [1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['exponential'], 'max_features': [None], 'min_samples_split': [8], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'n_estimators': [1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2216, stdev: 0.0084 MSE for {'loss': 'exponential', 'max_features': None, 'min_samples_split': 8, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'learning_rate': 0.1, 'n_estimators': 1000}

search space:
{'max_depth': [20], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [10], 'learning_rate': [0.1], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [20], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [10], 'learning_rate': [0.1], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0936, stdev: 0.0106 MSE for {'max_depth': 20, 'max_features': 0.2, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'min_samples_split': 8, 'n_estimators': 10, 'learning_rate': 0.1, 'loss': 'linear'}

search space:
{'max_depth': [8], 'max_features': [0.2], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [1000], 'learning_rate': [0.01], 'loss': ['exponential']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [8], 'max_features': [0.2], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'n_estimators': [1000], 'learning_rate': [0.01], 'loss': ['exponential']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2209, stdev: 0.0077 MSE for {'max_depth': 8, 'max_features': 0.2, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'n_estimators': 1000, 'learning_rate': 0.01, 'loss': 'exponential'}

search space:
{'loss': ['linear'], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [0.2], 'n_estimators': [10], 'learning_rate': [0.1], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [0.2], 'n_estimators': [10], 'learning_rate': [0.1], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0954, stdev: 0.0068 MSE for {'loss': 'linear', 'max_depth': 20, 'min_samples_split': 8, 'max_features': 0.2, 'n_estimators': 10, 'learning_rate': 0.1, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4}

search space:
{'loss': ['linear'], 'max_depth': [8], 'min_samples_split': [8], 'max_features': [0.2], 'n_estimators': [1000], 'learning_rate': [0.01], 'max_leaf_nodes': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'max_depth': [8], 'min_samples_split': [8], 'max_features': [0.2], 'n_estimators': [1000], 'learning_rate': [0.01], 'max_leaf_nodes': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2216, stdev: 0.0077 MSE for {'loss': 'linear', 'max_depth': 8, 'min_samples_split': 8, 'max_features': 0.2, 'n_estimators': 1000, 'learning_rate': 0.01, 'max_leaf_nodes': None, 'min_samples_leaf': 4}

search space:
{'max_leaf_nodes': [1024], 'learning_rate': [0.1], 'max_features': [0.2], 'max_depth': [20], 'n_estimators': [10], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'learning_rate': [0.1], 'max_features': [0.2], 'max_depth': [20], 'n_estimators': [10], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0903, stdev: 0.0063 MSE for {'min_samples_split': 8, 'learning_rate': 0.1, 'max_leaf_nodes': 1024, 'max_features': 0.2, 'max_depth': 20, 'n_estimators': 10, 'min_samples_leaf': 4, 'loss': 'linear'}

search space:
{'max_leaf_nodes': [None], 'learning_rate': [0.2], 'max_features': [0.2], 'max_depth': [8], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'learning_rate': [0.2], 'max_features': [0.2], 'max_depth': [8], 'n_estimators': [500], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2210, stdev: 0.0085 MSE for {'min_samples_split': 8, 'learning_rate': 0.2, 'max_leaf_nodes': None, 'max_features': 0.2, 'max_depth': 8, 'n_estimators': 500, 'min_samples_leaf': 4, 'loss': 'linear'}

search space:
{'n_estimators': [10], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [10], 'max_depth': [20], 'min_samples_split': [8], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0965, stdev: 0.0062 MSE for {'n_estimators': 10, 'max_depth': 20, 'min_samples_split': 8, 'max_features': 0.2, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'learning_rate': 0.1, 'loss': 'linear'}

search space:
{'n_estimators': [500], 'max_depth': [10], 'min_samples_split': [8], 'max_features': [None], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'learning_rate': [0.2], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'max_depth': [10], 'min_samples_split': [8], 'max_features': [None], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'learning_rate': [0.2], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2208, stdev: 0.0081 MSE for {'n_estimators': 500, 'max_depth': 10, 'min_samples_split': 8, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'learning_rate': 0.2, 'loss': 'linear'}

search space:
{'max_leaf_nodes': [1024], 'n_estimators': [10], 'min_samples_split': [8], 'loss': ['linear'], 'min_samples_leaf': [4], 'max_depth': [20], 'max_features': [0.2], 'learning_rate': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'n_estimators': [10], 'min_samples_split': [8], 'loss': ['linear'], 'min_samples_leaf': [4], 'max_depth': [20], 'max_features': [0.2], 'learning_rate': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0934, stdev: 0.0093 MSE for {'max_leaf_nodes': 1024, 'n_estimators': 10, 'min_samples_split': 8, 'loss': 'linear', 'min_samples_leaf': 4, 'max_depth': 20, 'max_features': 0.2, 'learning_rate': 0.1}

search space:
{'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [8], 'loss': ['linear'], 'min_samples_leaf': [4], 'max_depth': [10], 'max_features': [None], 'learning_rate': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'n_estimators': [500], 'min_samples_split': [8], 'loss': ['linear'], 'min_samples_leaf': [4], 'max_depth': [10], 'max_features': [None], 'learning_rate': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2197, stdev: 0.0076 MSE for {'max_leaf_nodes': None, 'n_estimators': 500, 'min_samples_split': 8, 'loss': 'linear', 'min_samples_leaf': 4, 'max_depth': 10, 'max_features': None, 'learning_rate': 1.0}

search space:
{'learning_rate': [0.1], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'max_features': [0.2], 'n_estimators': [10], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.1], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'max_features': [0.2], 'n_estimators': [10], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0942, stdev: 0.0052 MSE for {'learning_rate': 0.1, 'loss': 'linear', 'max_leaf_nodes': 1024, 'max_features': 0.2, 'n_estimators': 10, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'learning_rate': [1.0], 'loss': ['linear'], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [100], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'loss': ['linear'], 'max_leaf_nodes': [None], 'max_features': [None], 'n_estimators': [100], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2219, stdev: 0.0070 MSE for {'learning_rate': 1.0, 'loss': 'linear', 'max_leaf_nodes': None, 'max_features': None, 'n_estimators': 100, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 10}

search space:
{'max_leaf_nodes': [1024], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [20], 'learning_rate': [0.1], 'n_estimators': [10], 'min_samples_leaf': [4], 'max_features': [0.2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [1024], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [20], 'learning_rate': [0.1], 'n_estimators': [10], 'min_samples_leaf': [4], 'max_features': [0.2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0904, stdev: 0.0062 MSE for {'max_leaf_nodes': 1024, 'min_samples_split': 8, 'loss': 'linear', 'max_depth': 20, 'learning_rate': 0.1, 'n_estimators': 10, 'min_samples_leaf': 4, 'max_features': 0.2}

search space:
{'max_leaf_nodes': [None], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [15], 'learning_rate': [1.0], 'n_estimators': [100], 'min_samples_leaf': [4], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_leaf_nodes': [None], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [15], 'learning_rate': [1.0], 'n_estimators': [100], 'min_samples_leaf': [4], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2227, stdev: 0.0057 MSE for {'max_leaf_nodes': None, 'min_samples_split': 8, 'loss': 'linear', 'max_depth': 15, 'learning_rate': 1.0, 'n_estimators': 100, 'min_samples_leaf': 4, 'max_features': None}

search space:
{'loss': ['linear'], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_depth': [20], 'n_estimators': [10], 'learning_rate': [0.1], 'max_features': [0.2], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_depth': [20], 'n_estimators': [10], 'learning_rate': [0.1], 'max_features': [0.2], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0945, stdev: 0.0065 MSE for {'loss': 'linear', 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_depth': 20, 'n_estimators': 10, 'learning_rate': 0.1, 'max_features': 0.2, 'max_leaf_nodes': 1024}

search space:
{'loss': ['linear'], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_depth': [None], 'n_estimators': [100], 'learning_rate': [1.0], 'max_features': [32768], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'min_samples_leaf': [4], 'min_samples_split': [8], 'max_depth': [None], 'n_estimators': [100], 'learning_rate': [1.0], 'max_features': [32768], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2222, stdev: 0.0094 MSE for {'loss': 'linear', 'min_samples_leaf': 4, 'min_samples_split': 8, 'max_depth': None, 'n_estimators': 100, 'learning_rate': 1.0, 'max_features': 32768, 'max_leaf_nodes': None}

search space:
{'min_samples_leaf': [4], 'learning_rate': [0.1], 'loss': ['linear'], 'n_estimators': [10], 'max_leaf_nodes': [1024], 'max_features': [0.2], 'min_samples_split': [8], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'learning_rate': [0.1], 'loss': ['linear'], 'n_estimators': [10], 'max_leaf_nodes': [1024], 'max_features': [0.2], 'min_samples_split': [8], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0911, stdev: 0.0096 MSE for {'min_samples_leaf': 4, 'learning_rate': 0.1, 'loss': 'linear', 'n_estimators': 10, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 8, 'max_features': 0.2}

search space:
{'min_samples_leaf': [4], 'learning_rate': [1.0], 'loss': ['linear'], 'n_estimators': [100], 'max_leaf_nodes': [None], 'max_features': [1024], 'min_samples_split': [8], 'max_depth': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'learning_rate': [1.0], 'loss': ['linear'], 'n_estimators': [100], 'max_leaf_nodes': [None], 'max_features': [1024], 'min_samples_split': [8], 'max_depth': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2220, stdev: 0.0059 MSE for {'min_samples_leaf': 4, 'learning_rate': 1.0, 'loss': 'linear', 'n_estimators': 100, 'max_leaf_nodes': None, 'max_depth': None, 'min_samples_split': 8, 'max_features': 1024}

search space:
{'learning_rate': [0.1], 'n_estimators': [10], 'loss': ['linear'], 'min_samples_split': [8], 'max_depth': [20], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.1], 'n_estimators': [10], 'loss': ['linear'], 'min_samples_split': [8], 'max_depth': [20], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0944, stdev: 0.0116 MSE for {'learning_rate': 0.1, 'n_estimators': 10, 'loss': 'linear', 'min_samples_split': 8, 'max_depth': 20, 'max_features': 0.2, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4}

search space:
{'learning_rate': [1.0], 'n_estimators': [10, 20, 50, 100], 'loss': ['linear'], 'min_samples_split': [8], 'max_depth': [None], 'max_features': [1024], 'max_leaf_nodes': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'n_estimators': [10, 20, 50, 100], 'loss': ['linear'], 'min_samples_split': [8], 'max_depth': [None], 'max_features': [1024], 'max_leaf_nodes': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2582, stdev: 0.0079 MSE for {'learning_rate': 1.0, 'n_estimators': 10, 'loss': 'linear', 'min_samples_split': 8, 'max_depth': None, 'max_features': 1024, 'max_leaf_nodes': None, 'min_samples_leaf': 4}
mean: 0.2371, stdev: 0.0077 MSE for {'learning_rate': 1.0, 'n_estimators': 20, 'loss': 'linear', 'min_samples_split': 8, 'max_depth': None, 'max_features': 1024, 'max_leaf_nodes': None, 'min_samples_leaf': 4}
mean: 0.2284, stdev: 0.0054 MSE for {'learning_rate': 1.0, 'n_estimators': 50, 'loss': 'linear', 'min_samples_split': 8, 'max_depth': None, 'max_features': 1024, 'max_leaf_nodes': None, 'min_samples_leaf': 4}
mean: 0.2207, stdev: 0.0081 MSE for {'learning_rate': 1.0, 'n_estimators': 100, 'loss': 'linear', 'min_samples_split': 8, 'max_depth': None, 'max_features': 1024, 'max_leaf_nodes': None, 'min_samples_leaf': 4}

search space:
{'learning_rate': [0.1], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [10], 'loss': ['linear'], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.1], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_leaf': [4], 'n_estimators': [10], 'loss': ['linear'], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0946, stdev: 0.0062 MSE for {'learning_rate': 0.1, 'max_features': 0.2, 'loss': 'linear', 'max_depth': 20, 'min_samples_leaf': 4, 'n_estimators': 10, 'max_leaf_nodes': 1024, 'min_samples_split': 8}

search space:
{'learning_rate': [1.0], 'max_features': [1024], 'max_leaf_nodes': [None], 'max_depth': [None], 'min_samples_leaf': [4], 'n_estimators': [20, 50], 'loss': ['linear'], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'max_features': [1024], 'max_leaf_nodes': [None], 'max_depth': [None], 'min_samples_leaf': [4], 'n_estimators': [20, 50], 'loss': ['linear'], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2442, stdev: 0.0019 MSE for {'learning_rate': 1.0, 'max_features': 1024, 'loss': 'linear', 'max_depth': None, 'min_samples_leaf': 4, 'n_estimators': 20, 'max_leaf_nodes': None, 'min_samples_split': 8}
mean: 0.2262, stdev: 0.0060 MSE for {'learning_rate': 1.0, 'max_features': 1024, 'loss': 'linear', 'max_depth': None, 'min_samples_leaf': 4, 'n_estimators': 50, 'max_leaf_nodes': None, 'min_samples_split': 8}

search space:
{'max_depth': [20], 'max_features': [0.2], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'learning_rate': [0.1], 'n_estimators': [10], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [20], 'max_features': [0.2], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'learning_rate': [0.1], 'n_estimators': [10], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0948, stdev: 0.0083 MSE for {'max_depth': 20, 'max_features': 0.2, 'min_samples_split': 8, 'min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 0.1, 'n_estimators': 10, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [None], 'max_features': [1024], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'learning_rate': [1.0], 'n_estimators': [20, 21], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_features': [1024], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'learning_rate': [1.0], 'n_estimators': [20, 21], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2435, stdev: 0.0105 MSE for {'max_depth': None, 'max_features': 1024, 'min_samples_split': 8, 'min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 1.0, 'n_estimators': 20, 'max_leaf_nodes': None}
mean: 0.2404, stdev: 0.0092 MSE for {'max_depth': None, 'max_features': 1024, 'min_samples_split': 8, 'min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 1.0, 'n_estimators': 21, 'max_leaf_nodes': None}

search space:
{'loss': ['linear'], 'max_features': [0.2], 'max_depth': [20], 'n_estimators': [10], 'min_samples_split': [8], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'max_features': [0.2], 'max_depth': [20], 'n_estimators': [10], 'min_samples_split': [8], 'min_samples_leaf': [4], 'learning_rate': [0.1], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0947, stdev: 0.0086 MSE for {'loss': 'linear', 'max_features': 0.2, 'max_depth': 20, 'n_estimators': 10, 'min_samples_split': 8, 'min_samples_leaf': 4, 'learning_rate': 0.1, 'max_leaf_nodes': 1024}

search space:
{'loss': ['linear'], 'max_features': [1024], 'max_depth': [None], 'n_estimators': [50], 'min_samples_split': [8], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'max_leaf_nodes': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'max_features': [1024], 'max_depth': [None], 'n_estimators': [50], 'min_samples_split': [8], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'max_leaf_nodes': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2297, stdev: 0.0015 MSE for {'loss': 'linear', 'max_features': 1024, 'max_depth': None, 'n_estimators': 50, 'min_samples_split': 8, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'max_leaf_nodes': None}

search space:
{'learning_rate': [0.1], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [10], 'min_samples_split': [8], 'max_features': [0.2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.1], 'max_depth': [20], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [10], 'min_samples_split': [8], 'max_features': [0.2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0913, stdev: 0.0071 MSE for {'learning_rate': 0.1, 'max_depth': 20, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'loss': 'linear', 'n_estimators': 10, 'min_samples_split': 8, 'max_features': 0.2}

search space:
{'learning_rate': [1.0], 'max_depth': [None], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'loss': ['linear', 'exponential'], 'n_estimators': [50], 'min_samples_split': [8], 'max_features': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'max_depth': [None], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'loss': ['linear', 'exponential'], 'n_estimators': [50], 'min_samples_split': [8], 'max_features': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2253, stdev: 0.0089 MSE for {'learning_rate': 1.0, 'max_depth': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'loss': 'linear', 'n_estimators': 50, 'min_samples_split': 8, 'max_features': 1024}
mean: 0.2274, stdev: 0.0064 MSE for {'learning_rate': 1.0, 'max_depth': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'loss': 'exponential', 'n_estimators': 50, 'min_samples_split': 8, 'max_features': 1024}

search space:
{'max_depth': [None], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'max_features': [0.2], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'n_estimators': [10], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'max_features': [0.2], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'n_estimators': [10], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0944, stdev: 0.0059 MSE for {'max_features': 0.2, 'max_leaf_nodes': 1024, 'max_depth': None, 'loss': 'linear', 'min_samples_leaf': 4, 'learning_rate': 1.0, 'n_estimators': 10, 'min_samples_split': 8}

search space:
{'max_depth': [None], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'max_features': [None], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'n_estimators': [50], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'max_features': [None], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'n_estimators': [50], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2291, stdev: 0.0083 MSE for {'max_features': None, 'max_leaf_nodes': 1024, 'max_depth': None, 'loss': 'linear', 'min_samples_leaf': 4, 'learning_rate': 1.0, 'n_estimators': 50, 'min_samples_split': 8}

search space:
{'learning_rate': [1.0], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [None], 'n_estimators': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'max_features': [0.2], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [None], 'n_estimators': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0965, stdev: 0.0081 MSE for {'learning_rate': 1.0, 'max_features': 0.2, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'min_samples_split': 8, 'loss': 'linear', 'max_depth': None, 'n_estimators': 10}

search space:
{'learning_rate': [1.0], 'max_features': [None], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [None], 'n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'max_features': [None], 'max_leaf_nodes': [None], 'min_samples_leaf': [4], 'min_samples_split': [8], 'loss': ['linear'], 'max_depth': [None], 'n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2294, stdev: 0.0085 MSE for {'learning_rate': 1.0, 'max_features': None, 'max_leaf_nodes': None, 'min_samples_leaf': 4, 'min_samples_split': 8, 'loss': 'linear', 'max_depth': None, 'n_estimators': 50}

search space:
{'max_depth': [None], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [10], 'learning_rate': [1.0], 'max_features': [0.2], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [10], 'learning_rate': [1.0], 'max_features': [0.2], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0939, stdev: 0.0062 MSE for {'max_depth': None, 'min_samples_split': 8, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'n_estimators': 10, 'loss': 'linear', 'max_features': 0.2, 'max_leaf_nodes': 1024}

search space:
{'max_depth': [None], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [50], 'learning_rate': [1.0], 'max_features': [None], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'min_samples_split': [8], 'min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [50], 'learning_rate': [1.0], 'max_features': [None], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2261, stdev: 0.0042 MSE for {'max_depth': None, 'min_samples_split': 8, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'n_estimators': 50, 'loss': 'linear', 'max_features': None, 'max_leaf_nodes': 1024}

search space:
{'min_samples_leaf': [4], 'max_features': [0.2], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'n_estimators': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'max_features': [0.2], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'n_estimators': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0941, stdev: 0.0049 MSE for {'min_samples_leaf': 4, 'max_features': 0.2, 'loss': 'linear', 'max_leaf_nodes': 1024, 'learning_rate': 1.0, 'max_depth': None, 'min_samples_split': 8, 'n_estimators': 10}

search space:
{'min_samples_leaf': [4], 'max_features': [None], 'loss': ['linear'], 'max_leaf_nodes': [256], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'max_features': [None], 'loss': ['linear'], 'max_leaf_nodes': [256], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2288, stdev: 0.0068 MSE for {'min_samples_leaf': 4, 'max_features': None, 'loss': 'linear', 'max_leaf_nodes': 256, 'learning_rate': 1.0, 'max_depth': None, 'min_samples_split': 8, 'n_estimators': 50}

search space:
{'min_samples_leaf': [4], 'max_features': [0.2], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'n_estimators': [10]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'max_features': [0.2], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'n_estimators': [10]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0950, stdev: 0.0054 MSE for {'min_samples_leaf': 4, 'max_features': 0.2, 'learning_rate': 1.0, 'max_depth': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'loss': 'linear', 'n_estimators': 10}

search space:
{'min_samples_leaf': [4], 'max_features': [None], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'max_features': [None], 'learning_rate': [1.0], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'loss': ['linear'], 'n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2264, stdev: 0.0079 MSE for {'min_samples_leaf': 4, 'max_features': None, 'learning_rate': 1.0, 'max_depth': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'loss': 'linear', 'n_estimators': 50}

search space:
{'max_depth': [None], 'learning_rate': [1.0], 'loss': ['linear'], 'n_estimators': [50], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'learning_rate': [1.0], 'loss': ['linear'], 'n_estimators': [50], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0849, stdev: 0.0069 MSE for {'max_depth': None, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'max_leaf_nodes': 1024, 'n_estimators': 50, 'loss': 'linear', 'max_features': None, 'min_samples_split': 8}

search space:
{'max_depth': [None], 'learning_rate': [1.0], 'loss': ['linear'], 'n_estimators': [50], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'learning_rate': [1.0], 'loss': ['linear'], 'n_estimators': [50], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2256, stdev: 0.0061 MSE for {'max_depth': None, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'max_leaf_nodes': 1024, 'n_estimators': 50, 'loss': 'linear', 'max_features': None, 'min_samples_split': 8}

search space:
{'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_ada_estimators': [50], 'min_samples_split': [8], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_ada_estimators': [50], 'min_samples_split': [8], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0848, stdev: 0.0084 MSE for {'learning_rate': 1.0, 'loss': 'linear', 'max_depth': None, 'max_leaf_nodes': 1024, 'max_features': None, 'n_ada_estimators': 50, 'min_samples_split': 8, 'min_samples_leaf': 4}

search space:
{'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_ada_estimators': [50], 'min_samples_split': [8], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'max_leaf_nodes': [1024], 'max_features': [None], 'n_ada_estimators': [50], 'min_samples_split': [8], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2293, stdev: 0.0070 MSE for {'learning_rate': 1.0, 'loss': 'linear', 'max_depth': None, 'max_leaf_nodes': 1024, 'max_features': None, 'n_ada_estimators': 50, 'min_samples_split': 8, 'min_samples_leaf': 4}

search space:
{'loss': ['linear'], 'learning_rate': [1.0], 'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'learning_rate': [1.0], 'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0847, stdev: 0.0081 MSE for {'loss': 'linear', 'learning_rate': 1.0, 'n_ada_estimators': 50, 'min_samples_leaf': 4, 'max_features': None, 'max_depth': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024}

search space:
{'loss': ['linear'], 'learning_rate': [1.0], 'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'learning_rate': [1.0], 'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2257, stdev: 0.0051 MSE for {'loss': 'linear', 'learning_rate': 1.0, 'n_ada_estimators': 50, 'min_samples_leaf': 4, 'max_features': None, 'max_depth': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024}

search space:
{'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'n_ada_estimators': [50], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'n_ada_estimators': [50], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0845, stdev: 0.0083 MSE for {'n_ada_estimators': 50, 'max_leaf_nodes': 1024, 'learning_rate': 1.0, 'max_features': None, 'max_depth': None, 'loss': 'linear', 'min_samples_leaf': 4, 'min_samples_split': 8}

search space:
{'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'n_ada_estimators': [50], 'max_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,
            min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'loss': ['linear'], 'max_depth': [None], 'n_ada_estimators': [50], 'max_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2257, stdev: 0.0076 MSE for {'n_ada_estimators': 50, 'max_leaf_nodes': 1024, 'learning_rate': 1.0, 'max_features': None, 'max_depth': None, 'loss': 'linear', 'min_samples_leaf': 4, 'min_samples_split': 8}

search space:
{'max_depth': [None], 'max_dtree_features': [None], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'n_ada_estimators': [50], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_dtree_features=None, max_leaf_nodes=None,
            min_samples_leaf=1, min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_dtree_features': [None], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'n_ada_estimators': [50], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0856, stdev: 0.0072 MSE for {'max_depth': None, 'max_dtree_features': None, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'loss': 'linear', 'max_leaf_nodes': 1024, 'n_ada_estimators': 50, 'min_samples_split': 8}

search space:
{'max_depth': [None], 'max_dtree_features': [None], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'n_ada_estimators': [50], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_dtree_features=None, max_leaf_nodes=None,
            min_samples_leaf=1, min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_dtree_features': [None], 'min_samples_leaf': [4], 'learning_rate': [1.0], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'n_ada_estimators': [50], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2236, stdev: 0.0047 MSE for {'max_depth': None, 'max_dtree_features': None, 'min_samples_leaf': 4, 'learning_rate': 1.0, 'loss': 'linear', 'max_leaf_nodes': 1024, 'n_ada_estimators': 50, 'min_samples_split': 8}

search space:
{'bootstrap': [True], 'n_ada_estimators': [2], 'max_dtree_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [None], 'min_samples_leaf': [4], 'n_bag_estimators': [1], 'learning_rate': [1.0], 'max_samples': [0.7], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'bootstrap': [True], 'n_ada_estimators': [2], 'max_dtree_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [None], 'min_samples_leaf': [4], 'n_bag_estimators': [1], 'learning_rate': [1.0], 'max_samples': [0.7], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0805, stdev: 0.0077 MSE for {'bootstrap': True, 'n_bag_estimators': 1, 'n_ada_estimators': 2, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_depth': None, 'min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 1.0, 'max_samples': 0.7, 'max_dtree_features': None}

search space:
{'bootstrap': [True], 'n_ada_estimators': [50], 'max_dtree_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [None], 'min_samples_leaf': [4], 'n_bag_estimators': [10], 'learning_rate': [1.0], 'max_samples': [0.7], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'bootstrap': [True], 'n_ada_estimators': [50], 'max_dtree_features': [None], 'max_leaf_nodes': [1024], 'min_samples_split': [8], 'max_depth': [None], 'min_samples_leaf': [4], 'n_bag_estimators': [10], 'learning_rate': [1.0], 'max_samples': [0.7], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2156, stdev: 0.0076 MSE for {'bootstrap': True, 'n_bag_estimators': 10, 'n_ada_estimators': 50, 'max_leaf_nodes': 1024, 'min_samples_split': 8, 'max_depth': None, 'min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 1.0, 'max_samples': 0.7, 'max_dtree_features': None}

search space:
{'n_bag_estimators': [1], 'max_samples': [0.7], 'bootstrap': [True], 'min_samples_leaf': [4], 'max_depth': [None], 'learning_rate': [1.0], 'min_samples_split': [8], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'max_dtree_features': [None], 'n_ada_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_bag_estimators': [1], 'max_samples': [0.7], 'bootstrap': [True], 'min_samples_leaf': [4], 'max_depth': [None], 'learning_rate': [1.0], 'min_samples_split': [8], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'max_dtree_features': [None], 'n_ada_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0798, stdev: 0.0079 MSE for {'n_bag_estimators': 1, 'max_samples': 0.7, 'bootstrap': True, 'min_samples_leaf': 4, 'max_depth': None, 'learning_rate': 1.0, 'min_samples_split': 8, 'loss': 'linear', 'max_leaf_nodes': 1024, 'max_dtree_features': None, 'n_ada_estimators': 50}

search space:
{'n_bag_estimators': [1], 'max_samples': [0.7], 'bootstrap': [True], 'min_samples_leaf': [4], 'max_depth': [None], 'learning_rate': [1.0], 'min_samples_split': [8], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'max_dtree_features': [None], 'n_ada_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_bag_estimators': [1], 'max_samples': [0.7], 'bootstrap': [True], 'min_samples_leaf': [4], 'max_depth': [None], 'learning_rate': [1.0], 'min_samples_split': [8], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'max_dtree_features': [None], 'n_ada_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2143, stdev: 0.0081 MSE for {'n_bag_estimators': 1, 'max_samples': 0.7, 'bootstrap': True, 'min_samples_leaf': 4, 'max_depth': None, 'learning_rate': 1.0, 'min_samples_split': 8, 'loss': 'linear', 'max_leaf_nodes': 1024, 'max_dtree_features': None, 'n_ada_estimators': 50}

search space:
{'max_depth': [None], 'max_dtree_features': [None], 'min_samples_split': [8], 'n_ada_estimators': [50], 'bootstrap': [True], 'max_samples': [1.0], 'n_bag_estimators': [1], 'learning_rate': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_dtree_features': [None], 'min_samples_split': [8], 'n_ada_estimators': [50], 'bootstrap': [True], 'max_samples': [1.0], 'n_bag_estimators': [1], 'learning_rate': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0807, stdev: 0.0077 MSE for {'max_dtree_features': None, 'min_samples_split': 8, 'n_ada_estimators': 50, 'bootstrap': True, 'max_samples': 1.0, 'learning_rate': 1.0, 'n_bag_estimators': 1, 'loss': 'linear', 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': None}

search space:
{'max_depth': [None], 'max_dtree_features': [None], 'min_samples_split': [8], 'n_ada_estimators': [50], 'bootstrap': [True], 'max_samples': [1.0], 'n_bag_estimators': [1], 'learning_rate': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_depth': [None], 'max_dtree_features': [None], 'min_samples_split': [8], 'n_ada_estimators': [50], 'bootstrap': [True], 'max_samples': [1.0], 'n_bag_estimators': [1], 'learning_rate': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2143, stdev: 0.0077 MSE for {'max_dtree_features': None, 'min_samples_split': 8, 'n_ada_estimators': 50, 'bootstrap': True, 'max_samples': 1.0, 'learning_rate': 1.0, 'n_bag_estimators': 1, 'loss': 'linear', 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'max_depth': None}

search space:
{'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_depth': [None], 'loss': ['linear'], 'max_dtree_features': [None], 'bootstrap': [False], 'learning_rate': [1.0], 'max_samples': [1.0], 'max_leaf_nodes': [1024], 'n_bag_estimators': [1], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_depth': [None], 'loss': ['linear'], 'max_dtree_features': [None], 'bootstrap': [False], 'learning_rate': [1.0], 'max_samples': [1.0], 'max_leaf_nodes': [1024], 'n_bag_estimators': [1], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0821, stdev: 0.0077 MSE for {'n_ada_estimators': 50, 'min_samples_leaf': 4, 'max_depth': None, 'learning_rate': 1.0, 'min_samples_split': 8, 'max_dtree_features': None, 'bootstrap': False, 'max_samples': 1.0, 'max_leaf_nodes': 1024, 'n_bag_estimators': 1, 'loss': 'linear'}

search space:
{'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_depth': [None], 'loss': ['linear'], 'max_dtree_features': [None], 'bootstrap': [False], 'learning_rate': [1.0], 'max_samples': [1.0], 'max_leaf_nodes': [1024], 'n_bag_estimators': [1], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_ada_estimators': [50], 'min_samples_leaf': [4], 'max_depth': [None], 'loss': ['linear'], 'max_dtree_features': [None], 'bootstrap': [False], 'learning_rate': [1.0], 'max_samples': [1.0], 'max_leaf_nodes': [1024], 'n_bag_estimators': [1], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2172, stdev: 0.0074 MSE for {'n_ada_estimators': 50, 'min_samples_leaf': 4, 'max_depth': None, 'learning_rate': 1.0, 'min_samples_split': 8, 'max_dtree_features': None, 'bootstrap': False, 'max_samples': 1.0, 'max_leaf_nodes': 1024, 'n_bag_estimators': 1, 'loss': 'linear'}

search space:
{'learning_rate': [1.0], 'max_depth': [None], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'n_ada_estimators': [50], 'max_dtree_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_dtree_features=None, max_leaf_nodes=None,
            min_samples_leaf=1, min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'max_depth': [None], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'n_ada_estimators': [50], 'max_dtree_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0850, stdev: 0.0072 MSE for {'learning_rate': 1.0, 'max_depth': None, 'loss': 'linear', 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'n_ada_estimators': 50, 'max_dtree_features': None, 'min_samples_split': 8}

search space:
{'learning_rate': [1.0], 'max_depth': [None], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'n_ada_estimators': [50], 'max_dtree_features': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(learning_rate=1.0, loss='linear', max_depth=None,
            max_dtree_features=None, max_leaf_nodes=None,
            min_samples_leaf=1, min_samples_split=2, n_ada_estimators=50),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [1.0], 'max_depth': [None], 'loss': ['linear'], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'n_ada_estimators': [50], 'max_dtree_features': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2265, stdev: 0.0086 MSE for {'learning_rate': 1.0, 'max_depth': None, 'loss': 'linear', 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'n_ada_estimators': 50, 'max_dtree_features': None, 'min_samples_split': 8}

search space:
{'max_samples': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'n_bag_estimators': [1], 'n_ada_estimators': [50], 'bootstrap': [False], 'max_dtree_features': [None], 'loss': ['linear'], 'max_depth': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_samples': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'n_bag_estimators': [1], 'n_ada_estimators': [50], 'bootstrap': [False], 'max_dtree_features': [None], 'loss': ['linear'], 'max_depth': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0813, stdev: 0.0075 MSE for {'max_samples': 1.0, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'loss': 'linear', 'n_bag_estimators': 1, 'n_ada_estimators': 50, 'bootstrap': False, 'max_dtree_features': None, 'learning_rate': 1.0, 'max_depth': None, 'min_samples_split': 8}

search space:
{'max_samples': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'n_bag_estimators': [1], 'n_ada_estimators': [50], 'bootstrap': [False], 'max_dtree_features': [None], 'loss': ['linear'], 'max_depth': [None], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(bootstrap=True, learning_rate=1.0, loss='linear',
        max_depth=None, max_dtree_features=None, max_leaf_nodes=None,
        max_samples=1.0, min_samples_leaf=1, min_samples_split=2,
        n_ada_estimators=50, n_bag_estimators=10),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_samples': [1.0], 'min_samples_leaf': [4], 'max_leaf_nodes': [1024], 'learning_rate': [1.0], 'n_bag_estimators': [1], 'n_ada_estimators': [50], 'bootstrap': [False], 'max_dtree_features': [None], 'loss': ['linear'], 'max_depth': [None], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2175, stdev: 0.0074 MSE for {'max_samples': 1.0, 'min_samples_leaf': 4, 'max_leaf_nodes': 1024, 'loss': 'linear', 'n_bag_estimators': 1, 'n_ada_estimators': 50, 'bootstrap': False, 'max_dtree_features': None, 'learning_rate': 1.0, 'max_depth': None, 'min_samples_split': 8}

search space:
{'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8], 'ada_n_estimators': [50], 'tree_max_depth': [None], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8], 'ada_n_estimators': [50], 'tree_max_depth': [None], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0843, stdev: 0.0065 MSE for {'tree_max_features': None, 'ada_learning_rate': 1.0, 'tree_min_samples_split': 8, 'tree_max_depth': None, 'ada_n_estimators': 50, 'tree_max_leaf_nodes': 1024, 'ada_loss': 'linear', 'tree_min_samples_leaf': 4}

search space:
{'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8], 'ada_n_estimators': [50], 'tree_max_depth': [None], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8], 'ada_n_estimators': [50], 'tree_max_depth': [None], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2261, stdev: 0.0033 MSE for {'tree_max_features': None, 'ada_learning_rate': 1.0, 'tree_min_samples_split': 8, 'tree_max_depth': None, 'ada_n_estimators': 50, 'tree_max_leaf_nodes': 1024, 'ada_loss': 'linear', 'tree_min_samples_leaf': 4}

search space:
{'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'tree_max_features': [None], 'tree_max_depth': [None], 'ada_n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'tree_max_features': [None], 'tree_max_depth': [None], 'ada_n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0836, stdev: 0.0074 MSE for {'tree_max_leaf_nodes': 1024, 'ada_n_estimators': 50, 'ada_loss': 'linear', 'ada_learning_rate': 1.0, 'tree_min_samples_leaf': 4, 'tree_max_features': None, 'tree_max_depth': None, 'tree_min_samples_split': 8}

search space:
{'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'tree_max_features': [None], 'tree_max_depth': [None], 'ada_n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'tree_max_features': [None], 'tree_max_depth': [None], 'ada_n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2279, stdev: 0.0072 MSE for {'tree_max_leaf_nodes': 1024, 'ada_n_estimators': 50, 'ada_loss': 'linear', 'ada_learning_rate': 1.0, 'tree_min_samples_leaf': 4, 'tree_max_features': None, 'tree_max_depth': None, 'tree_min_samples_split': 8}

search space:
{'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'tree_max_features': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_min_samples_split': [8], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'ada_learning_rate': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'tree_max_features': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_min_samples_split': [8], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'ada_learning_rate': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0809, stdev: 0.0078 MSE for {'tree_max_leaf_nodes': 1024, 'bag_max_samples': 1.0, 'ada_loss': 'linear', 'tree_max_depth': None, 'tree_max_features': None, 'ada_n_estimators': 50, 'tree_min_samples_leaf': 4, 'bag_bootstrap': False, 'tree_min_samples_split': 8, 'bag_n_estimators': 1, 'ada_learning_rate': 1.0}

search space:
{'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'tree_max_features': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_min_samples_split': [8], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'ada_learning_rate': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'tree_max_features': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_min_samples_split': [8], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'ada_learning_rate': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2157, stdev: 0.0067 MSE for {'tree_max_leaf_nodes': 1024, 'bag_max_samples': 1.0, 'ada_loss': 'linear', 'tree_max_depth': None, 'tree_max_features': None, 'ada_n_estimators': 50, 'tree_min_samples_leaf': 4, 'bag_bootstrap': False, 'tree_min_samples_split': 8, 'bag_n_estimators': 1, 'ada_learning_rate': 1.0}

search space:
{'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_learning_rate': [1.0], 'ada_n_estimators': [50], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_learning_rate': [1.0], 'ada_n_estimators': [50], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0842, stdev: 0.0079 MSE for {'tree_max_depth': None, 'ada_n_estimators': 50, 'ada_learning_rate': 1.0, 'tree_max_features': None, 'tree_min_samples_leaf': 4, 'ada_loss': 'linear', 'tree_max_leaf_nodes': 1024, 'tree_min_samples_split': 8}

search space:
{'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_learning_rate': [1.0], 'ada_n_estimators': [50], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_learning_rate': [1.0], 'ada_n_estimators': [50], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2267, stdev: 0.0064 MSE for {'tree_max_depth': None, 'ada_n_estimators': 50, 'ada_learning_rate': 1.0, 'tree_max_features': None, 'tree_min_samples_leaf': 4, 'ada_loss': 'linear', 'tree_max_leaf_nodes': 1024, 'tree_min_samples_split': 8}

search space:
{'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'ada_n_estimators': [50], 'bag_bootstrap': [False], 'tree_min_samples_leaf': [4], 'bag_n_estimators': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'ada_n_estimators': [50], 'bag_bootstrap': [False], 'tree_min_samples_leaf': [4], 'bag_n_estimators': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0801, stdev: 0.0072 MSE for {'tree_max_leaf_nodes': 1024, 'ada_loss': 'linear', 'tree_max_features': None, 'ada_learning_rate': 1.0, 'ada_n_estimators': 50, 'tree_max_depth': None, 'bag_bootstrap': False, 'tree_min_samples_leaf': 4, 'bag_max_samples': 1.0, 'tree_min_samples_split': 8, 'bag_n_estimators': 1}

search space:
{'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'ada_n_estimators': [50], 'bag_bootstrap': [False], 'tree_min_samples_leaf': [4], 'bag_n_estimators': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_depth': [None], 'ada_n_estimators': [50], 'bag_bootstrap': [False], 'tree_min_samples_leaf': [4], 'bag_n_estimators': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2148, stdev: 0.0068 MSE for {'tree_max_features': None, 'tree_max_leaf_nodes': 1024, 'ada_loss': 'linear', 'ada_learning_rate': 1.0, 'tree_min_samples_leaf': 4, 'tree_min_samples_split': 8, 'tree_max_depth': None, 'bag_bootstrap': False, 'ada_n_estimators': 50, 'bag_max_samples': 1.0, 'bag_n_estimators': 1}

search space:
{'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'ada_n_estimators': [50], 'tree_min_samples_leaf': [4], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'ada_n_estimators': [50], 'tree_min_samples_leaf': [4], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0812, stdev: 0.0087 MSE for {'tree_max_features': None, 'bag_n_estimators': 1, 'ada_learning_rate': 1.0, 'tree_min_samples_split': 8, 'ada_n_estimators': 50, 'tree_min_samples_leaf': 4, 'bag_bootstrap': False, 'bag_max_samples': 1.0, 'ada_loss': 'linear', 'tree_max_leaf_nodes': 1024, 'tree_max_depth': None}

search space:
{'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'ada_n_estimators': [50], 'tree_min_samples_leaf': [4], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_learning_rate': [1.0], 'tree_max_leaf_nodes': [1024], 'ada_n_estimators': [50], 'tree_min_samples_leaf': [4], 'bag_bootstrap': [False], 'bag_n_estimators': [1], 'tree_max_features': [None], 'ada_loss': ['linear'], 'tree_min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2160, stdev: 0.0066 MSE for {'tree_max_features': None, 'tree_max_depth': None, 'ada_learning_rate': 1.0, 'tree_max_leaf_nodes': 1024, 'ada_n_estimators': 50, 'tree_min_samples_leaf': 4, 'bag_bootstrap': False, 'bag_n_estimators': 1, 'bag_max_samples': 1.0, 'ada_loss': 'linear', 'tree_min_samples_split': 8}

search space:
{'tree_max_features': [None], 'tree_max_depth': [None], 'bag_bootstrap': [False], 'tree_max_leaf_nodes': [1024], 'ada_learning_rate': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [1], 'tree_min_samples_split': [8], 'bag_max_samples': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_features': [None], 'tree_max_depth': [None], 'bag_bootstrap': [False], 'tree_max_leaf_nodes': [1024], 'ada_learning_rate': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [1], 'tree_min_samples_split': [8], 'bag_max_samples': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0800, stdev: 0.0074 MSE for {'tree_max_features': None, 'ada_loss': 'linear', 'tree_max_depth': None, 'bag_bootstrap': False, 'tree_max_leaf_nodes': 1024, 'ada_n_estimators': 50, 'ada_learning_rate': 1.0, 'tree_min_samples_split': 8, 'bag_n_estimators': 1, 'bag_max_samples': 1.0, 'tree_min_samples_leaf': 4}

search space:
{'tree_max_features': [None], 'tree_max_depth': [None], 'bag_bootstrap': [False], 'tree_max_leaf_nodes': [1024], 'ada_learning_rate': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [10], 'tree_min_samples_split': [8], 'bag_max_samples': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_features': [None], 'tree_max_depth': [None], 'bag_bootstrap': [False], 'tree_max_leaf_nodes': [1024], 'ada_learning_rate': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [10], 'tree_min_samples_split': [8], 'bag_max_samples': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2147, stdev: 0.0076 MSE for {'tree_max_leaf_nodes': 1024, 'tree_max_features': None, 'bag_n_estimators': 10, 'bag_bootstrap': False, 'ada_n_estimators': 50, 'tree_max_depth': None, 'ada_learning_rate': 1.0, 'ada_loss': 'linear', 'tree_min_samples_split': 8, 'bag_max_samples': 1.0, 'tree_min_samples_leaf': 4}

search space:
{'tree_max_leaf_nodes': [1024], 'bag_bootstrap': [False], 'tree_min_samples_split': [8], 'ada_learning_rate': [1.0], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [1], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_leaf_nodes': [1024], 'bag_bootstrap': [False], 'tree_min_samples_split': [8], 'ada_learning_rate': [1.0], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [1], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0803, stdev: 0.0077 MSE for {'tree_max_leaf_nodes': 1024, 'ada_n_estimators': 50, 'bag_bootstrap': False, 'tree_min_samples_leaf': 4, 'ada_learning_rate': 1.0, 'bag_max_samples': 1.0, 'bag_n_estimators': 1, 'ada_loss': 'linear', 'tree_max_depth': None, 'tree_max_features': None, 'tree_min_samples_split': 8}

search space:
{'tree_max_leaf_nodes': [1024], 'bag_bootstrap': [False], 'tree_min_samples_split': [8], 'ada_learning_rate': [1.0], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [20], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_max_leaf_nodes': [1024], 'bag_bootstrap': [False], 'tree_min_samples_split': [8], 'ada_learning_rate': [1.0], 'bag_max_samples': [1.0], 'ada_loss': ['linear'], 'bag_n_estimators': [20], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2163, stdev: 0.0079 MSE for {'tree_max_leaf_nodes': 1024, 'bag_bootstrap': False, 'tree_min_samples_leaf': 4, 'tree_min_samples_split': 8, 'bag_max_samples': 1.0, 'ada_n_estimators': 50, 'bag_n_estimators': 20, 'ada_loss': 'linear', 'tree_max_depth': None, 'tree_max_features': None, 'ada_learning_rate': 1.0}

search space:
{'tree_min_samples_leaf': [4], 'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_n_estimators': [50], 'tree_max_leaf_nodes': [1024], 'bag_n_estimators': [1], 'ada_loss': ['linear'], 'bag_bootstrap': [False], 'tree_max_features': [None], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_min_samples_leaf': [4], 'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_n_estimators': [50], 'tree_max_leaf_nodes': [1024], 'bag_n_estimators': [1], 'ada_loss': ['linear'], 'bag_bootstrap': [False], 'tree_max_features': [None], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0804, stdev: 0.0077 MSE for {'tree_min_samples_leaf': 4, 'bag_n_estimators': 1, 'bag_max_samples': 1.0, 'ada_n_estimators': 50, 'tree_max_leaf_nodes': 1024, 'tree_max_depth': None, 'ada_loss': 'linear', 'bag_bootstrap': False, 'tree_max_features': None, 'ada_learning_rate': 1.0, 'tree_min_samples_split': 8}

search space:
{'tree_min_samples_leaf': [4], 'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_n_estimators': [50], 'tree_max_leaf_nodes': [1024], 'bag_n_estimators': [20], 'ada_loss': ['linear'], 'bag_bootstrap': [False], 'tree_max_features': [None], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBagRegressor(ada_learning_rate=1.0, ada_loss='linear', ada_n_estimators=50,
        bag_bootstrap=True, bag_max_samples=1.0, bag_n_estimators=10,
        tree_max_depth=None, tree_max_features=None,
        tree_max_leaf_nodes=None, tree_min_samples_leaf=1,
        tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'tree_min_samples_leaf': [4], 'tree_max_depth': [None], 'bag_max_samples': [1.0], 'ada_n_estimators': [50], 'tree_max_leaf_nodes': [1024], 'bag_n_estimators': [20], 'ada_loss': ['linear'], 'bag_bootstrap': [False], 'tree_max_features': [None], 'ada_learning_rate': [1.0], 'tree_min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2158, stdev: 0.0073 MSE for {'tree_min_samples_leaf': 4, 'bag_n_estimators': 20, 'bag_max_samples': 1.0, 'ada_n_estimators': 50, 'tree_max_leaf_nodes': 1024, 'tree_max_depth': None, 'ada_loss': 'linear', 'bag_bootstrap': False, 'tree_max_features': None, 'ada_learning_rate': 1.0, 'tree_min_samples_split': 8}

search space:
{'tree_max_leaf_nodes': [1024], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50, 51], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_features': [None], 'ada_learning_rate': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_leaf_nodes': [1024], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50, 51], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_features': [None], 'ada_learning_rate': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0855, stdev: 0.0078 MSE for {'tree_max_leaf_nodes': 1024, 'tree_max_depth': None, 'tree_min_samples_leaf': 4, 'ada_n_estimators': 50, 'tree_min_samples_split': 8, 'ada_loss': 'linear', 'tree_max_features': None, 'ada_learning_rate': 1.0}
mean: 0.0864, stdev: 0.0075 MSE for {'tree_max_leaf_nodes': 1024, 'tree_max_depth': None, 'tree_min_samples_leaf': 4, 'ada_n_estimators': 51, 'tree_min_samples_split': 8, 'ada_loss': 'linear', 'tree_max_features': None, 'ada_learning_rate': 1.0}

search space:
{'tree_max_leaf_nodes': [1024], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_features': [None], 'ada_learning_rate': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'tree_max_leaf_nodes': [1024], 'tree_max_depth': [None], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_min_samples_split': [8], 'ada_loss': ['linear'], 'tree_max_features': [None], 'ada_learning_rate': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2268, stdev: 0.0104 MSE for {'tree_max_leaf_nodes': 1024, 'tree_max_depth': None, 'tree_min_samples_leaf': 4, 'ada_n_estimators': 50, 'tree_min_samples_split': 8, 'ada_loss': 'linear', 'tree_max_features': None, 'ada_learning_rate': 1.0}

search space:
{'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50, 51], 'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'tree_max_depth': [None], 'ada_loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50, 51], 'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'tree_max_depth': [None], 'ada_loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0854, stdev: 0.0075 MSE for {'ada_learning_rate': 1.0, 'ada_loss': 'linear', 'tree_min_samples_leaf': 4, 'ada_n_estimators': 50, 'tree_max_leaf_nodes': 1024, 'tree_min_samples_split': 8, 'tree_max_depth': None, 'tree_max_features': None}
mean: 0.0855, stdev: 0.0073 MSE for {'ada_learning_rate': 1.0, 'ada_loss': 'linear', 'tree_min_samples_leaf': 4, 'ada_n_estimators': 51, 'tree_max_leaf_nodes': 1024, 'tree_min_samples_split': 8, 'tree_max_depth': None, 'tree_max_features': None}

search space:
{'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'tree_max_depth': [None], 'ada_loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressorDTree(ada_learning_rate=1.0, ada_loss='linear',
            ada_n_estimators=50, tree_max_depth=None,
            tree_max_features=None, tree_max_leaf_nodes=None,
            tree_min_samples_leaf=1, tree_min_samples_split=2),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'ada_learning_rate': [1.0], 'tree_min_samples_leaf': [4], 'ada_n_estimators': [50], 'tree_max_features': [None], 'tree_max_leaf_nodes': [1024], 'tree_min_samples_split': [8], 'tree_max_depth': [None], 'ada_loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2232, stdev: 0.0050 MSE for {'ada_learning_rate': 1.0, 'ada_loss': 'linear', 'tree_min_samples_leaf': 4, 'ada_n_estimators': 50, 'tree_max_leaf_nodes': 1024, 'tree_min_samples_split': 8, 'tree_max_depth': None, 'tree_max_features': None}

search space:
{'n_estimators': [50], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_leaf_nodes': [1024], 'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [50], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_leaf_nodes': [1024], 'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0849, stdev: 0.0070 MSE for {'n_estimators': 50, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 1.0, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None}

search space:
{'n_estimators': [50], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_leaf_nodes': [1024], 'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [50], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_leaf_nodes': [1024], 'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2248, stdev: 0.0056 MSE for {'n_estimators': 50, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4, 'loss': 'linear', 'learning_rate': 1.0, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None}

search space:
{'base_estimator__max_leaf_nodes': [1048576], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [1], 'loss': ['linear'], 'base_estimator__min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_leaf_nodes': [1048576], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [1], 'loss': ['linear'], 'base_estimator__min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0853, stdev: 0.0072 MSE for {'base_estimator__max_leaf_nodes': 1048576, 'learning_rate': 1.0, 'base_estimator__max_features': None, 'base_estimator__min_samples_split': 2, 'base_estimator__max_depth': None, 'base_estimator__min_samples_leaf': 1, 'loss': 'linear', 'n_estimators': 50}

search space:
{'base_estimator__max_leaf_nodes': [1024], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_leaf_nodes': [1024], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2236, stdev: 0.0107 MSE for {'base_estimator__max_leaf_nodes': 1024, 'learning_rate': 1.0, 'base_estimator__max_features': None, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__min_samples_leaf': 4, 'loss': 'linear', 'n_estimators': 50}

search space:
{'n_estimators': [50], 'base_estimator__min_samples_split': [8], 'loss': ['linear'], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__max_depth': [None], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [50], 'base_estimator__min_samples_split': [8], 'loss': ['linear'], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__max_depth': [None], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0851, stdev: 0.0069 MSE for {'n_estimators': 50, 'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__max_depth': None, 'learning_rate': 1.0, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_features': None}

search space:
{'n_estimators': [50], 'base_estimator__min_samples_split': [8], 'loss': ['linear'], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__max_depth': [None], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [50], 'base_estimator__min_samples_split': [8], 'loss': ['linear'], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__max_depth': [None], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2227, stdev: 0.0061 MSE for {'n_estimators': 50, 'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__max_depth': None, 'learning_rate': 1.0, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_features': None}

search space:
{'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'loss': ['linear'], 'n_estimators': [50], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'loss': ['linear'], 'n_estimators': [50], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0853, stdev: 0.0085 MSE for {'base_estimator__min_samples_leaf': 4, 'base_estimator__max_depth': None, 'loss': 'linear', 'n_estimators': 50, 'learning_rate': 1.0, 'base_estimator__max_features': None, 'base_estimator__min_samples_split': 8, 'base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'loss': ['linear'], 'n_estimators': [50], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'loss': ['linear'], 'n_estimators': [50], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2233, stdev: 0.0083 MSE for {'base_estimator__min_samples_leaf': 4, 'base_estimator__max_depth': None, 'loss': 'linear', 'n_estimators': 50, 'learning_rate': 1.0, 'base_estimator__max_features': None, 'base_estimator__min_samples_split': 8, 'base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__min_samples_leaf': [4], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'learning_rate': [1.0], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__min_samples_leaf': [4], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'learning_rate': [1.0], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0847, stdev: 0.0079 MSE for {'base_estimator__min_samples_leaf': 4, 'n_estimators': 50, 'base_estimator__max_depth': None, 'base_estimator__min_samples_split': 8, 'learning_rate': 1.0, 'loss': 'linear', 'base_estimator__max_features': None, 'base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__min_samples_leaf': [4], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'learning_rate': [1.0], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__min_samples_leaf': [4], 'n_estimators': [50], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'learning_rate': [1.0], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2245, stdev: 0.0077 MSE for {'base_estimator__min_samples_leaf': 4, 'n_estimators': 50, 'base_estimator__max_depth': None, 'base_estimator__min_samples_split': 8, 'learning_rate': 1.0, 'loss': 'linear', 'base_estimator__max_features': None, 'base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'n_estimators': [50], 'loss': ['linear'], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'n_estimators': [50], 'loss': ['linear'], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0845, stdev: 0.0069 MSE for {'base_estimator__max_depth': None, 'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 50, 'base_estimator__min_samples_split': 8, 'learning_rate': 1.0, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__min_samples_leaf': 4}

search space:
{'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'n_estimators': [50], 'loss': ['linear'], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'n_estimators': [50], 'loss': ['linear'], 'learning_rate': [1.0], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2242, stdev: 0.0052 MSE for {'base_estimator__max_depth': None, 'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 50, 'base_estimator__min_samples_split': 8, 'learning_rate': 1.0, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__min_samples_leaf': 4}

search space:
{'bootstrap': [False], 'base_estimator__learning_rate': [1.0], 'max_samples': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [1], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'bootstrap': [False], 'base_estimator__learning_rate': [1.0], 'max_samples': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [1], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0850, stdev: 0.0080 MSE for {'bootstrap': False, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 1.0, 'max_samples': 1.0, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 1, 'base_estimator__base_estimator__max_features': None, 'base_estimator__n_estimators': 50, 'base_estimator__loss': 'linear'}

search space:
{'bootstrap': [False], 'base_estimator__learning_rate': [1.0], 'max_samples': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [1], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'bootstrap': [False], 'base_estimator__learning_rate': [1.0], 'max_samples': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [1], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2264, stdev: 0.0070 MSE for {'bootstrap': False, 'base_estimator__learning_rate': 1.0, 'max_samples': 1.0, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 1, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50}

search space:
{'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [1], 'bootstrap': [False], 'max_samples': [1.0], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [1], 'bootstrap': [False], 'max_samples': [1.0], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0847, stdev: 0.0088 MSE for {'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 1, 'bootstrap': False, 'max_samples': 1.0, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 1.0, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [1], 'bootstrap': [False], 'max_samples': [1.0], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [1], 'bootstrap': [False], 'max_samples': [1.0], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2239, stdev: 0.0053 MSE for {'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__n_estimators': 50, 'max_samples': 1.0, 'base_estimator__learning_rate': 1.0, 'n_estimators': 1, 'bootstrap': False, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0852, stdev: 0.0074 MSE for {'n_estimators': 50, 'base_estimator__max_depth': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__max_features': None, 'learning_rate': 1.0, 'base_estimator__min_samples_split': 8, 'loss': 'linear'}

search space:
{'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_leaf_nodes': [1024], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'learning_rate': [1.0], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2235, stdev: 0.0106 MSE for {'n_estimators': 50, 'base_estimator__max_depth': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__max_features': None, 'learning_rate': 1.0, 'base_estimator__min_samples_split': 8, 'loss': 'linear'}

search space:
{'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [10], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [10], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0793, stdev: 0.0069 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__n_estimators': 50, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 10, 'max_samples': 0.7, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear'}

search space:
{'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [10], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [10], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2153, stdev: 0.0073 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_features': None, 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 10, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear'}

search space:
{'base_estimator__learning_rate': [1.0], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'n_estimators': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'n_estimators': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0797, stdev: 0.0075 MSE for {'base_estimator__learning_rate': 1.0, 'max_samples': 0.7, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__loss': 'linear', 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_split': 8}

search space:
{'base_estimator__learning_rate': [1.0], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'n_estimators': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'n_estimators': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2127, stdev: 0.0070 MSE for {'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 1.0, 'max_samples': 0.7, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__n_estimators': 50, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20}

search space:
{'max_samples': [0.7], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [1], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_samples': [0.7], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [1], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0897, stdev: 0.0072 MSE for {'base_estimator__base_estimator__max_depth': None, 'n_estimators': 1, 'base_estimator__loss': 'linear', 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_leaf': 4}

search space:
{'max_samples': [0.7], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__learning_rate': [0.1, 0.5, 1.0], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'max_samples': [0.7], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__learning_rate': [0.1, 0.5, 1.0], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2134, stdev: 0.0077 MSE for {'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'max_samples': 0.7, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4}
mean: 0.2125, stdev: 0.0075 MSE for {'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'max_samples': 0.7, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 0.5, 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4}
mean: 0.2128, stdev: 0.0075 MSE for {'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'max_samples': 0.7, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4}

search space:
{'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [1], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [1], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0900, stdev: 0.0103 MSE for {'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 1.0, 'bootstrap': True, 'n_estimators': 1, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_features': None}

search space:
{'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__learning_rate': [0.5, 1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__learning_rate': [0.5, 1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2133, stdev: 0.0076 MSE for {'bootstrap': True, 'max_samples': 0.7, 'base_estimator__learning_rate': 0.5, 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_leaf_nodes': 1024}
mean: 0.2126, stdev: 0.0084 MSE for {'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 1.0, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'max_samples': 0.7}

search space:
{'n_estimators': [1], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [1], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0875, stdev: 0.0039 MSE for {'n_estimators': 1, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__learning_rate': 1.0, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7}

search space:
{'n_estimators': [20], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7, 1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [20], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [1.0], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7, 1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2125, stdev: 0.0084 MSE for {'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4, 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__loss': 'linear', 'base_estimator__n_estimators': 50, 'max_samples': 0.7, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 1.0}
mean: 0.2141, stdev: 0.0074 MSE for {'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4, 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__loss': 'linear', 'base_estimator__n_estimators': 50, 'max_samples': 1.0, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 1.0}

search space:
{'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [1], 'base_estimator__loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [1], 'base_estimator__loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0900, stdev: 0.0071 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'bootstrap': True, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_depth': None, 'max_samples': 0.7, 'n_estimators': 1, 'base_estimator__base_estimator__max_features': None, 'base_estimator__loss': 'linear'}

search space:
{'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.5, 0.7, 1.0], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [20], 'base_estimator__loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.5, 0.7, 1.0], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'n_estimators': [20], 'base_estimator__loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2134, stdev: 0.0076 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_split': 8, 'max_samples': 0.5, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__n_estimators': 50}
mean: 0.2123, stdev: 0.0072 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__loss': 'linear', 'bootstrap': True, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50}
mean: 0.2128, stdev: 0.0072 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__loss': 'linear', 'bootstrap': True, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_features': None, 'max_samples': 1.0, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50}

search space:
{'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'n_estimators': [1], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'n_estimators': [1], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0883, stdev: 0.0108 MSE for {'n_estimators': 1, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_depth': None, 'max_samples': 0.7, 'base_estimator__learning_rate': 1.0, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [32, 1024, 32768], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_leaf_nodes': [32, 1024, 32768], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2257, stdev: 0.0087 MSE for {'bootstrap': True, 'max_samples': 0.7, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 32}
mean: 0.2125, stdev: 0.0081 MSE for {'bootstrap': True, 'max_samples': 0.7, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024}
mean: 0.2120, stdev: 0.0078 MSE for {'bootstrap': True, 'max_samples': 0.7, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 32768}

search space:
{'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0793, stdev: 0.0072 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'max_samples': 0.7, 'bootstrap': True, 'n_estimators': 20, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, stdev: 0.0075 MSE for {'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'max_samples': 0.7, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0074 MSE for {'alpha': 0.9, 'loss': 'ls', 'subsample': 0.7, 'max_leaf_nodes': 100, 'min_samples_leaf': 1, 'max_depth': 10, 'learning_rate': 0.01, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 2}

search space:
{'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.9], 'subsample': [0.7], 'max_leaf_nodes': [100], 'max_depth': [10], 'min_samples_leaf': [1], 'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'max_features': [None], 'min_samples_split': [2]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2131, stdev: 0.0070 MSE for {'alpha': 0.9, 'subsample': 0.7, 'max_leaf_nodes': 100, 'loss': 'ls', 'min_samples_leaf': 1, 'max_depth': 10, 'learning_rate': 0.01, 'n_estimators': 500, 'max_features': None, 'min_samples_split': 2}

search space:
{'base_estimator__base_estimator__max_features': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [1.0], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_features': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [1.0], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0796, stdev: 0.0073 MSE for {'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_features': None, 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__learning_rate': 1.0, 'max_samples': 0.7, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50}

search space:
{'base_estimator__base_estimator__max_features': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [1.0], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_features': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [1.0], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, stdev: 0.0076 MSE for {'base_estimator__base_estimator__max_features': None, 'base_estimator__loss': 'linear', 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__learning_rate': 1.0, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50}

search space:
{'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [1.0], 'base_estimator__base_estimator__min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0793, stdev: 0.0070 MSE for {'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'base_estimator__learning_rate': 1.0, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__loss': 'linear', 'n_estimators': 20, 'bootstrap': True, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_leaf': 4}

search space:
{'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [0.5, 1.0], 'base_estimator__base_estimator__min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'n_estimators': [20], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [0.5, 1.0], 'base_estimator__base_estimator__min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2126, stdev: 0.0080 MSE for {'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__learning_rate': 0.5, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_leaf': 4}
mean: 0.2131, stdev: 0.0075 MSE for {'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'base_estimator__n_estimators': 50, 'max_samples': 0.7, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 1.0, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4}

search space:
{'base_estimator__base_estimator__min_samples_leaf': [4], 'bootstrap': [True], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_leaf': [4], 'bootstrap': [True], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0802, stdev: 0.0079 MSE for {'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'max_samples': 0.7, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 1.0, 'base_estimator__loss': 'linear'}

search space:
{'base_estimator__base_estimator__min_samples_leaf': [4], 'bootstrap': [True], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [0.1, 0.5]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_leaf': [4], 'bootstrap': [True], 'n_estimators': [20], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__learning_rate': [0.1, 0.5]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2127, stdev: 0.0084 MSE for {'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_split': 8, 'max_samples': 0.7, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__max_features': None, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__learning_rate': 0.1}
mean: 0.2123, stdev: 0.0073 MSE for {'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 0.5, 'base_estimator__loss': 'linear'}

search space:
{'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0803, stdev: 0.0081 MSE for {'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.5, 'base_estimator__base_estimator__max_depth': None, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_split': 8, 'max_samples': 0.7, 'base_estimator__base_estimator__max_features': None, 'base_estimator__loss': 'linear', 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2127, stdev: 0.0076 MSE for {'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.5, 'bootstrap': True, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_split': 8, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0071 MSE for {'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__loss': 'linear', 'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'bootstrap': True, 'base_estimator__learning_rate': 0.5, 'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'max_samples': 0.7}

search space:
{'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.5], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_split': [8], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2118, stdev: 0.0064 MSE for {'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__loss': 'linear', 'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'bootstrap': True, 'base_estimator__learning_rate': 0.5, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_features': None}

search space:
{'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__learning_rate': [1.0], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__learning_rate': [1.0], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0801, stdev: 0.0072 MSE for {'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__max_features': None, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_leaf': 4, 'bootstrap': True, 'base_estimator__learning_rate': 1.0, 'max_samples': 0.7}

search space:
{'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__learning_rate': [1.0], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'n_estimators': [20], 'bootstrap': [True], 'base_estimator__learning_rate': [1.0], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2122, stdev: 0.0078 MSE for {'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_leaf': 4, 'n_estimators': 20, 'base_estimator__base_estimator__max_features': None, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'max_samples': 0.7, 'base_estimator__learning_rate': 1.0}

search space:
{'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0795, stdev: 0.0075 MSE for {'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__loss': 'linear', 'n_estimators': 20, 'bootstrap': True}

search space:
{'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'n_estimators': [20], 'bootstrap': [True]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2120, stdev: 0.0078 MSE for {'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 20, 'bootstrap': True}

search space:
{'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'n_estimators': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'n_estimators': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0791, stdev: 0.0068 MSE for {'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__n_estimators': 50, 'bootstrap': True, 'base_estimator__learning_rate': 0.1, 'max_samples': 0.7, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_features': None, 'n_estimators': 20}

search space:
{'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'n_estimators': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'bootstrap': [True], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__loss': ['linear'], 'n_estimators': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2132, stdev: 0.0082 MSE for {'base_estimator__base_estimator__max_features': None, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_leaf': 4, 'bootstrap': True, 'base_estimator__loss': 'linear', 'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__min_samples_split': 8, 'max_samples': 0.7}

search space:
{'n_estimators': [500], 'loss': ['linear'], 'learning_rate': [0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [256]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'loss': ['linear'], 'learning_rate': [0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [256]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0849, stdev: 0.0071 MSE for {'n_estimators': 500, 'loss': 'linear', 'learning_rate': 0.1, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_features': None, 'base_estimator__max_leaf_nodes': 256}

search space:
{'n_estimators': [500], 'loss': ['linear'], 'learning_rate': [0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [256]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'loss': ['linear'], 'learning_rate': [0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [256]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2178, stdev: 0.0087 MSE for {'n_estimators': 500, 'loss': 'linear', 'learning_rate': 0.1, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_features': None, 'base_estimator__max_leaf_nodes': 256}

search space:
{'learning_rate': [0.1], 'base_estimator__max_leaf_nodes': [256], 'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'n_estimators': [5], 'base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.1], 'base_estimator__max_leaf_nodes': [256], 'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'n_estimators': [5], 'base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0878, stdev: 0.0089 MSE for {'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_features': None, 'learning_rate': 0.1, 'base_estimator__max_depth': None, 'n_estimators': 5, 'base_estimator__max_leaf_nodes': 256}

search space:
{'learning_rate': [0.01], 'base_estimator__max_leaf_nodes': [128], 'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'n_estimators': [500], 'base_estimator__max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.01], 'base_estimator__max_leaf_nodes': [128], 'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'n_estimators': [500], 'base_estimator__max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2142, stdev: 0.0079 MSE for {'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_features': None, 'learning_rate': 0.01, 'base_estimator__max_depth': None, 'n_estimators': 500, 'base_estimator__max_leaf_nodes': 128}

search space:
{'base_estimator__max_leaf_nodes': [256], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [5], 'base_estimator__max_features': [None], 'learning_rate': [0.1], 'base_estimator__max_depth': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_leaf_nodes': [256], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [5], 'base_estimator__max_features': [None], 'learning_rate': [0.1], 'base_estimator__max_depth': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0909, stdev: 0.0044 MSE for {'base_estimator__max_leaf_nodes': 256, 'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__min_samples_leaf': 4, 'n_estimators': 5, 'base_estimator__max_features': None, 'learning_rate': 0.1, 'base_estimator__max_depth': None}

search space:
{'base_estimator__max_leaf_nodes': [128], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [500], 'base_estimator__max_features': [None], 'learning_rate': [0.01, 0.1], 'base_estimator__max_depth': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'base_estimator__max_leaf_nodes': [128], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'n_estimators': [500], 'base_estimator__max_features': [None], 'learning_rate': [0.01, 0.1], 'base_estimator__max_depth': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2143, stdev: 0.0078 MSE for {'base_estimator__max_leaf_nodes': 128, 'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__min_samples_leaf': 4, 'n_estimators': 500, 'base_estimator__max_features': None, 'learning_rate': 0.01, 'base_estimator__max_depth': None}
mean: 0.2221, stdev: 0.0102 MSE for {'base_estimator__max_leaf_nodes': 128, 'base_estimator__min_samples_split': 8, 'loss': 'linear', 'base_estimator__min_samples_leaf': 4, 'n_estimators': 500, 'base_estimator__max_features': None, 'learning_rate': 0.1, 'base_estimator__max_depth': None}

search space:
{'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'learning_rate': [0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'n_estimators': [5], 'base_estimator__max_leaf_nodes': [256]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'learning_rate': [0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'n_estimators': [5], 'base_estimator__max_leaf_nodes': [256]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0889, stdev: 0.0060 MSE for {'loss': 'linear', 'base_estimator__max_depth': None, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__min_samples_split': 8, 'learning_rate': 0.1, 'base_estimator__max_leaf_nodes': 256, 'n_estimators': 5}

search space:
{'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'learning_rate': [0.001, 0.01, 0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'n_estimators': [500], 'base_estimator__max_leaf_nodes': [128]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'base_estimator__max_depth': [None], 'base_estimator__max_features': [None], 'learning_rate': [0.001, 0.01, 0.1], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'n_estimators': [500], 'base_estimator__max_leaf_nodes': [128]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2161, stdev: 0.0095 MSE for {'loss': 'linear', 'base_estimator__max_depth': None, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__min_samples_split': 8, 'learning_rate': 0.001, 'base_estimator__max_leaf_nodes': 128, 'n_estimators': 500}
mean: 0.2139, stdev: 0.0079 MSE for {'loss': 'linear', 'base_estimator__max_depth': None, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__min_samples_split': 8, 'learning_rate': 0.01, 'base_estimator__max_leaf_nodes': 128, 'n_estimators': 500}
mean: 0.2215, stdev: 0.0091 MSE for {'loss': 'linear', 'base_estimator__max_depth': None, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4, 'base_estimator__min_samples_split': 8, 'learning_rate': 0.1, 'base_estimator__max_leaf_nodes': 128, 'n_estimators': 500}

search space:
{'n_estimators': [5], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [256], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [5], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [256], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0900, stdev: 0.0089 MSE for {'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 5, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 256, 'base_estimator__min_samples_leaf': 4, 'learning_rate': 0.01}

search space:
{'n_estimators': [500], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [32, 128, 1024], 'learning_rate': [0.01]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'n_estimators': [500], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__min_samples_leaf': [4], 'loss': ['linear'], 'base_estimator__max_features': [None], 'base_estimator__max_leaf_nodes': [32, 128, 1024], 'learning_rate': [0.01]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2199, stdev: 0.0093 MSE for {'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 500, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 32, 'base_estimator__min_samples_leaf': 4, 'learning_rate': 0.01}
mean: 0.2142, stdev: 0.0076 MSE for {'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 500, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 128, 'base_estimator__min_samples_leaf': 4, 'learning_rate': 0.01}
mean: 0.2157, stdev: 0.0080 MSE for {'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 500, 'base_estimator__min_samples_split': 8, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 1024, 'base_estimator__min_samples_leaf': 4, 'learning_rate': 0.01}

search space:
{'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'n_estimators': [5], 'learning_rate': [0.01], 'base_estimator__max_depth': [None], 'base_estimator__max_leaf_nodes': [256], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'n_estimators': [5], 'learning_rate': [0.01], 'base_estimator__max_depth': [None], 'base_estimator__max_leaf_nodes': [256], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0866, stdev: 0.0089 MSE for {'loss': 'linear', 'base_estimator__min_samples_split': 8, 'n_estimators': 5, 'learning_rate': 0.01, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 256, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4}

search space:
{'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'n_estimators': [100, 500, 1000], 'learning_rate': [0.01], 'base_estimator__max_depth': [None], 'base_estimator__max_leaf_nodes': [128], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'loss': ['linear'], 'base_estimator__min_samples_split': [8], 'n_estimators': [100, 500, 1000], 'learning_rate': [0.01], 'base_estimator__max_depth': [None], 'base_estimator__max_leaf_nodes': [128], 'base_estimator__max_features': [None], 'base_estimator__min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2168, stdev: 0.0093 MSE for {'loss': 'linear', 'base_estimator__min_samples_split': 8, 'n_estimators': 100, 'learning_rate': 0.01, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 128, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4}
mean: 0.2141, stdev: 0.0080 MSE for {'loss': 'linear', 'base_estimator__min_samples_split': 8, 'n_estimators': 500, 'learning_rate': 0.01, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 128, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4}
mean: 0.2146, stdev: 0.0082 MSE for {'loss': 'linear', 'base_estimator__min_samples_split': 8, 'n_estimators': 1000, 'learning_rate': 0.01, 'base_estimator__max_depth': None, 'base_estimator__max_leaf_nodes': 128, 'base_estimator__max_features': None, 'base_estimator__min_samples_leaf': 4}

search space:
{'learning_rate': [0.01], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [500], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [128]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.01], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [500], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [128]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0845, stdev: 0.0084 MSE for {'base_estimator__max_leaf_nodes': 128, 'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 500, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_depth': None, 'base_estimator__min_samples_split': 8, 'learning_rate': 0.01}

search space:
{'learning_rate': [0.01], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [500], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [128]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitter='best'),
         learning_rate=1.0, loss='linear', n_estimators=50,
         random_state=None),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'learning_rate': [0.01], 'base_estimator__max_features': [None], 'loss': ['linear'], 'n_estimators': [500], 'base_estimator__min_samples_leaf': [4], 'base_estimator__max_depth': [None], 'base_estimator__min_samples_split': [8], 'base_estimator__max_leaf_nodes': [128]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2139, stdev: 0.0079 MSE for {'base_estimator__max_leaf_nodes': 128, 'base_estimator__max_features': None, 'loss': 'linear', 'n_estimators': 500, 'base_estimator__min_samples_leaf': 4, 'base_estimator__max_depth': None, 'base_estimator__min_samples_split': 8, 'learning_rate': 0.01}

search space:
{'n_estimators': [500], 'loss': ['ls'], 'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'loss': ['ls'], 'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0783, stdev: 0.0075 MSE for {'learning_rate': 0.01, 'max_depth': 10, 'min_samples_split': 2, 'alpha': 0.9, 'loss': 'ls', 'max_leaf_nodes': 100, 'n_estimators': 500, 'min_samples_leaf': 1, 'subsample': 0.7, 'max_features': None}

search space:
{'n_estimators': [500], 'loss': ['ls'], 'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [500], 'loss': ['ls'], 'max_depth': [10], 'min_samples_split': [2], 'alpha': [0.9], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'subsample': [0.7], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2139, stdev: 0.0069 MSE for {'learning_rate': 0.01, 'max_depth': 10, 'min_samples_split': 2, 'alpha': 0.9, 'n_estimators': 500, 'max_leaf_nodes': 100, 'subsample': 0.7, 'min_samples_leaf': 1, 'loss': 'ls', 'max_features': None}

search space:
{'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0784, stdev: 0.0070 MSE for {'base_estimator__learning_rate': 0.1, 'bootstrap': True, 'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__n_estimators': 50, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None}

search space:
{'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_features': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__learning_rate': [0.1], 'base_estimator__n_estimators': [50], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__loss': ['linear']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2135, stdev: 0.0082 MSE for {'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_split': 8, 'n_estimators': 20, 'bootstrap': True, 'base_estimator__base_estimator__min_samples_leaf': 4, 'max_samples': 0.7, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear'}

search space:
{'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0781, std: 0.0074 MSE for {'max_features': None, 'min_samples_leaf': 4, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 8}

search space:
{'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [8]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'max_features': [None], 'min_samples_leaf': [4], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'min_samples_split': [8]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2127, std: 0.0099 MSE for {'max_features': None, 'min_samples_leaf': 4, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'min_samples_split': 8}

search space:
{'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7], 'learning_rate': [0.01], 'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'min_samples_split': [2], 'loss': ['ls'], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7], 'learning_rate': [0.01], 'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'min_samples_split': [2], 'loss': ['ls'], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0755, stdev: 0.0086 MSE for {'max_leaf_nodes': 100, 'alpha': 0.9, 'subsample': 0.7, 'min_samples_split': 2, 'max_depth': 10, 'n_estimators': 500, 'max_features': None, 'learning_rate': 0.01, 'loss': 'ls', 'min_samples_leaf': 1}

search space:
{'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7], 'learning_rate': [0.01], 'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'min_samples_split': [2], 'loss': ['ls'], 'min_samples_leaf': [1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_leaf_nodes': [100], 'alpha': [0.9], 'subsample': [0.7], 'learning_rate': [0.01], 'n_estimators': [500], 'max_depth': [10], 'max_features': [None], 'min_samples_split': [2], 'loss': ['ls'], 'min_samples_leaf': [1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2108, stdev: 0.0096 MSE for {'max_leaf_nodes': 100, 'max_features': None, 'subsample': 0.7, 'min_samples_split': 2, 'learning_rate': 0.01, 'n_estimators': 500, 'max_depth': 10, 'alpha': 0.9, 'min_samples_leaf': 1, 'loss': 'ls'}

search space:
{'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'subsample': [0.7], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'subsample': [0.7], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0761, stdev: 0.0088 MSE for {'loss': 'ls', 'n_estimators': 500, 'max_features': None, 'subsample': 0.7, 'learning_rate': 0.01, 'alpha': 0.9, 'min_samples_split': 2, 'max_depth': 10, 'max_leaf_nodes': 100, 'min_samples_leaf': 1}

search space:
{'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'subsample': [0.7], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'loss': ['ls'], 'learning_rate': [0.01], 'n_estimators': [500], 'subsample': [0.7], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2121, stdev: 0.0092 MSE for {'loss': 'ls', 'learning_rate': 0.01, 'max_features': None, 'subsample': 0.7, 'min_samples_leaf': 1, 'n_estimators': 500, 'min_samples_split': 2, 'alpha': 0.9, 'max_depth': 10, 'max_leaf_nodes': 100}

search space:
{'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0779, stdev: 0.0091 MSE for {'base_estimator__base_estimator__max_depth': None, 'bootstrap': True, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_features': None, 'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 20, 'max_samples': 0.7}

search space:
{'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'max_samples': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'n_estimators': [20], 'bootstrap': [True], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_leaf_nodes': [1024], 'base_estimator__base_estimator__max_depth': [None], 'base_estimator__loss': ['linear'], 'max_samples': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2124, stdev: 0.0105 MSE for {'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'bootstrap': True, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__max_features': None, 'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__loss': 'linear', 'max_samples': 0.7}

search space:
{'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0769, std: 0.0089 MSE for {'min_samples_split': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'max_depth': 20}

search space:
{'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'min_samples_leaf': [4], 'max_features': [None], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2122, std: 0.0119 MSE for {'min_samples_split': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'min_samples_leaf': 4, 'max_features': None, 'max_depth': 20}

search space:
{'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0769, stdev: 0.0079 MSE for {'bootstrap': True, 'max_samples': 0.7, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'n_estimators': 20, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__n_estimators': 50, 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 0.1}

search space:
{'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__base_estimator__max_leaf_nodes': [1024], 'bootstrap': [True], 'base_estimator__base_estimator__max_depth': [None], 'max_samples': [0.7], 'base_estimator__base_estimator__min_samples_leaf': [4], 'n_estimators': [20], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__n_estimators': [50], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__max_features': [None], 'base_estimator__learning_rate': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2113, stdev: 0.0099 MSE for {'bootstrap': True, 'base_estimator__base_estimator__max_leaf_nodes': 1024, 'base_estimator__base_estimator__max_depth': None, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__n_estimators': 50, 'n_estimators': 20, 'max_samples': 0.7, 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__max_features': None, 'base_estimator__learning_rate': 0.1}

search space:
{'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0773, stdev: 0.0084 MSE for {'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__max_leaf_nodes': [1024]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=BaggingRegressor(base_estimator=AdaBoostRegressor(base_estimator=DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,
           max_leaf_nodes=None, min_samples_leaf=1, min_samples_split=2,
           min_weight_fraction_leaf=0.0, random_state=None,
           splitte... max_samples=1.0, n_estimators=10, n_jobs=1, oob_score=False,
         random_state=None, verbose=0),
       fit_params={}, iid=True, loss_func=None, n_jobs=2,
       param_grid={'base_estimator__n_estimators': [50], 'base_estimator__learning_rate': [0.1], 'max_samples': [0.7], 'base_estimator__base_estimator__max_features': [None], 'bootstrap': [True], 'base_estimator__loss': ['linear'], 'base_estimator__base_estimator__min_samples_leaf': [4], 'base_estimator__base_estimator__min_samples_split': [8], 'base_estimator__base_estimator__max_depth': [None], 'n_estimators': [20], 'base_estimator__base_estimator__max_leaf_nodes': [1024]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2119, stdev: 0.0100 MSE for {'base_estimator__n_estimators': 50, 'base_estimator__learning_rate': 0.1, 'base_estimator__base_estimator__max_features': None, 'max_samples': 0.7, 'bootstrap': True, 'base_estimator__loss': 'linear', 'base_estimator__base_estimator__min_samples_leaf': 4, 'base_estimator__base_estimator__min_samples_split': 8, 'base_estimator__base_estimator__max_depth': None, 'n_estimators': 20, 'base_estimator__base_estimator__max_leaf_nodes': 1024}

search space:
{'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0769, std: 0.0090 MSE for {'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}

search space:
{'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'min_samples_leaf': [4], 'max_depth': [20], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2121, std: 0.0122 MSE for {'min_samples_split': 8, 'min_samples_leaf': 4, 'max_depth': 20, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_features': None}

search space:
{'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0767, std: 0.0087 MSE for {'min_samples_split': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=1,
       param_grid={'min_samples_split': [8], 'n_estimators': [500], 'max_leaf_nodes': [1024], 'max_depth': [20], 'max_features': [None], 'min_samples_leaf': [4]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2121, std: 0.0116 MSE for {'min_samples_split': 8, 'n_estimators': 500, 'max_leaf_nodes': 1024, 'max_depth': 20, 'max_features': None, 'min_samples_leaf': 4}

search space:
{'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'alpha': [0.9], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'alpha': [0.9], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0751, stdev: 0.0086 MSE for {'min_samples_leaf': 1, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 100, 'min_samples_split': 2, 'learning_rate': 0.01, 'subsample': 0.7, 'max_features': None, 'alpha': 0.9, 'n_estimators': 500}

search space:
{'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'alpha': [0.9], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_leaf': [1], 'learning_rate': [0.01], 'max_depth': [10], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'loss': ['ls'], 'n_estimators': [500], 'max_features': [None], 'alpha': [0.9], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2114, stdev: 0.0091 MSE for {'min_samples_leaf': 1, 'loss': 'ls', 'max_depth': 10, 'max_leaf_nodes': 100, 'min_samples_split': 2, 'learning_rate': 0.01, 'subsample': 0.7, 'max_features': None, 'alpha': 0.9, 'n_estimators': 500}

search space:
{'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'min_samples_split': [2], 'learning_rate': [0.01], 'alpha': [0.9], 'max_leaf_nodes': [100], 'n_estimators': [500], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'min_samples_split': [2], 'learning_rate': [0.01], 'alpha': [0.9], 'max_leaf_nodes': [100], 'n_estimators': [500], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0755, stdev: 0.0088 MSE for {'max_features': None, 'max_depth': 10, 'min_samples_leaf': 1, 'subsample': 0.7, 'min_samples_split': 2, 'learning_rate': 0.01, 'alpha': 0.9, 'max_leaf_nodes': 100, 'n_estimators': 500, 'loss': 'ls'}

search space:
{'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'min_samples_split': [2], 'learning_rate': [0.01], 'alpha': [0.9], 'max_leaf_nodes': [100], 'n_estimators': [500], 'loss': ['ls']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'max_depth': [10], 'min_samples_leaf': [1], 'subsample': [0.7], 'min_samples_split': [2], 'learning_rate': [0.01], 'alpha': [0.9], 'max_leaf_nodes': [100], 'n_estimators': [500], 'loss': ['ls']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.2115, stdev: 0.0093 MSE for {'max_features': None, 'n_estimators': 500, 'min_samples_leaf': 1, 'subsample': 0.7, 'min_samples_split': 2, 'learning_rate': 0.01, 'alpha': 0.9, 'max_leaf_nodes': 100, 'max_depth': 10, 'loss': 'ls'}

search space:
{'tol': [0.001], 'alpha': [0.1], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [0.1], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0223, stdev: 0.0007 MSE for {'tol': 0.001, 'alpha': 0.1, 'solver': 'auto'}

search space:
{'tol': [0.001], 'alpha': [0.1], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [0.1], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0596, stdev: 0.0038 MSE for {'tol': 0.001, 'alpha': 0.1, 'solver': 'auto'}

search space:
{'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0223, stdev: 0.0007 MSE for {'solver': 'auto', 'alpha': 0.1, 'tol': 0.001}

search space:
{'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0596, stdev: 0.0038 MSE for {'solver': 'auto', 'alpha': 0.1, 'tol': 0.001}

search space:
{'solver': ['auto'], 'tol': [0.001], 'alpha': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'tol': [0.001], 'alpha': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0223, stdev: 0.0007 MSE for {'solver': 'auto', 'tol': 0.001, 'alpha': 0.1}

search space:
{'solver': ['auto'], 'tol': [0.001], 'alpha': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'tol': [0.001], 'alpha': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0596, stdev: 0.0038 MSE for {'solver': 'auto', 'tol': 0.001, 'alpha': 0.1}

search space:
{'alpha': [0.1], 'tol': [0.001], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.1], 'tol': [0.001], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0223, stdev: 0.0007 MSE for {'alpha': 0.1, 'tol': 0.001, 'solver': 'auto'}

search space:
{'alpha': [0.1], 'tol': [0.001], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.1], 'tol': [0.001], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0596, stdev: 0.0038 MSE for {'alpha': 0.1, 'tol': 0.001, 'solver': 'auto'}

search space:
{'tol': [0.001], 'solver': ['auto'], 'alpha': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['auto'], 'alpha': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0223, stdev: 0.0007 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.1}

search space:
{'tol': [0.001], 'solver': ['auto'], 'alpha': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['auto'], 'alpha': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0596, stdev: 0.0038 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.1}

search space:
{'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001], 'fit_intercept': [True]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001], 'fit_intercept': [True]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0226, stdev: 0.0007 MSE for {'solver': 'auto', 'alpha': 0.1, 'tol': 0.001, 'fit_intercept': True}

search space:
{'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001], 'fit_intercept': [True]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [0.1], 'tol': [0.001], 'fit_intercept': [True]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0607, stdev: 0.0039 MSE for {'solver': 'auto', 'alpha': 0.1, 'tol': 0.001, 'fit_intercept': True}

search space:
{'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001], 'alpha': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001], 'alpha': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0226, stdev: 0.0007 MSE for {'solver': 'auto', 'fit_intercept': False, 'tol': 0.001, 'alpha': 0.1}

search space:
{'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001], 'alpha': [0.1]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001], 'alpha': [0.1]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0607, stdev: 0.0039 MSE for {'solver': 'auto', 'fit_intercept': False, 'tol': 0.001, 'alpha': 0.1}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0227, stdev: 0.0008 MSE for {'fit_intercept': False, 'solver': 'auto', 'tol': 0.001, 'alpha': 1.0}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0607, stdev: 0.0039 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}

search space:
{'solver': ['auto'], 'alpha': [10.0], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [10.0], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0238, stdev: 0.0010 MSE for {'solver': 'auto', 'alpha': 10.0, 'fit_intercept': False, 'tol': 0.001}

search space:
{'solver': ['auto'], 'alpha': [10.0], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [10.0], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0614, stdev: 0.0036 MSE for {'solver': 'auto', 'alpha': 10.0, 'fit_intercept': False, 'tol': 0.001}

search space:
{'solver': ['auto'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [100.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [100.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0252, stdev: 0.0012 MSE for {'solver': 'auto', 'tol': 0.001, 'fit_intercept': False, 'alpha': 100.0}

search space:
{'solver': ['auto'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [100.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [100.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0701, stdev: 0.0027 MSE for {'solver': 'auto', 'tol': 0.001, 'fit_intercept': False, 'alpha': 100.0}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'alpha': [100.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'alpha': [100.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0253, stdev: 0.0012 MSE for {'fit_intercept': False, 'solver': 'auto', 'alpha': 100.0, 'tol': 0.001}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'alpha': [100.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'alpha': [100.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0707, stdev: 0.0028 MSE for {'fit_intercept': False, 'solver': 'auto', 'alpha': 100.0, 'tol': 0.001}

search space:
{'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0252, stdev: 0.0012 MSE for {'fit_intercept': False, 'alpha': 100.0, 'tol': 0.001, 'solver': 'auto'}

search space:
{'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0701, stdev: 0.0027 MSE for {'alpha': 100.0, 'solver': 'auto', 'tol': 0.001, 'fit_intercept': False}

search space:
{'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False], 'alpha': [100.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False], 'alpha': [100.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0252, stdev: 0.0012 MSE for {'tol': 0.001, 'solver': 'auto', 'fit_intercept': False, 'alpha': 100.0}

search space:
{'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False], 'alpha': [100.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False], 'alpha': [100.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0701, stdev: 0.0027 MSE for {'tol': 0.001, 'solver': 'auto', 'fit_intercept': False, 'alpha': 100.0}

search space:
{'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0252, stdev: 0.0012 MSE for {'fit_intercept': False, 'tol': 0.001, 'alpha': 100.0, 'solver': 'auto'}

search space:
{'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [100.0], 'solver': ['auto'], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0701, stdev: 0.0027 MSE for {'fit_intercept': False, 'tol': 0.001, 'alpha': 100.0, 'solver': 'auto'}

search space:
{'solver': ['auto'], 'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0252, stdev: 0.0012 MSE for {'solver': 'auto', 'tol': 0.001, 'fit_intercept': False, 'alpha': 100.0}

search space:
{'solver': ['auto'], 'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0701, stdev: 0.0027 MSE for {'solver': 'auto', 'tol': 0.001, 'fit_intercept': False, 'alpha': 100.0}

search space:
{'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0252, stdev: 0.0012 MSE for {'alpha': 100.0, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}

search space:
{'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [100.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0701, stdev: 0.0027 MSE for {'alpha': 100.0, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}

search space:
{'alpha': [10.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [10.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0238, stdev: 0.0010 MSE for {'tol': 0.001, 'alpha': 10.0, 'fit_intercept': False, 'solver': 'auto'}

search space:
{'alpha': [10.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [10.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0614, stdev: 0.0036 MSE for {'tol': 0.001, 'alpha': 10.0, 'fit_intercept': False, 'solver': 'auto'}

search space:
{'alpha': [10.0], 'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [10.0], 'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0238, stdev: 0.0010 MSE for {'alpha': 10.0, 'tol': 0.001, 'solver': 'auto', 'fit_intercept': False}

search space:
{'alpha': [10.0], 'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [10.0], 'tol': [0.001], 'solver': ['auto'], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0614, stdev: 0.0036 MSE for {'alpha': 10.0, 'tol': 0.001, 'solver': 'auto', 'fit_intercept': False}

search space:
{'tol': [0.001], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0226, stdev: 0.0007 MSE for {'tol': 0.001, 'alpha': 0.01, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0226, stdev: 0.0007 MSE for {'tol': 0.001, 'alpha': 0.1, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0227, stdev: 0.0008 MSE for {'tol': 0.001, 'alpha': 1.0, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0238, stdev: 0.0010 MSE for {'tol': 0.001, 'alpha': 10.0, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0252, stdev: 0.0012 MSE for {'tol': 0.001, 'alpha': 100.0, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0259, stdev: 0.0012 MSE for {'tol': 0.001, 'alpha': 1000.0, 'fit_intercept': False, 'solver': 'auto'}

search space:
{'tol': [0.001], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0607, stdev: 0.0039 MSE for {'tol': 0.001, 'alpha': 0.01, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0607, stdev: 0.0039 MSE for {'tol': 0.001, 'alpha': 0.1, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0607, stdev: 0.0039 MSE for {'tol': 0.001, 'alpha': 1.0, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0614, stdev: 0.0036 MSE for {'tol': 0.001, 'alpha': 10.0, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0701, stdev: 0.0027 MSE for {'tol': 0.001, 'alpha': 100.0, 'fit_intercept': False, 'solver': 'auto'}
mean: 0.0783, stdev: 0.0025 MSE for {'tol': 0.001, 'alpha': 1000.0, 'fit_intercept': False, 'solver': 'auto'}

search space:
{'solver': ['auto'], 'fit_intercept': [False], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'fit_intercept': [False], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0226, stdev: 0.0007 MSE for {'alpha': 0.01, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}
mean: 0.0226, stdev: 0.0007 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 0.1, 'tol': 0.001}
mean: 0.0227, stdev: 0.0008 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}
mean: 0.0238, stdev: 0.0010 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 10.0, 'tol': 0.001}
mean: 0.0252, stdev: 0.0012 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 100.0, 'tol': 0.001}
mean: 0.0259, stdev: 0.0012 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 1000.0, 'tol': 0.001}

search space:
{'solver': ['auto'], 'fit_intercept': [False], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['auto'], 'fit_intercept': [False], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0607, stdev: 0.0039 MSE for {'alpha': 0.01, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}
mean: 0.0607, stdev: 0.0039 MSE for {'alpha': 0.1, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}
mean: 0.0607, stdev: 0.0039 MSE for {'alpha': 1.0, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}
mean: 0.0614, stdev: 0.0036 MSE for {'alpha': 10.0, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}
mean: 0.0701, stdev: 0.0027 MSE for {'alpha': 100.0, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}
mean: 0.0783, stdev: 0.0025 MSE for {'alpha': 1000.0, 'fit_intercept': False, 'solver': 'auto', 'tol': 0.001}

search space:
{'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0227, stdev: 0.0007 MSE for {'alpha': 0.01, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0227, stdev: 0.0007 MSE for {'alpha': 0.1, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0228, stdev: 0.0008 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0239, stdev: 0.0010 MSE for {'alpha': 10.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0253, stdev: 0.0012 MSE for {'alpha': 100.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0257, stdev: 0.0012 MSE for {'alpha': 1000.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}

search space:
{'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'alpha': 0.01, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0613, stdev: 0.0041 MSE for {'fit_intercept': False, 'alpha': 0.1, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0613, stdev: 0.0041 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0620, stdev: 0.0038 MSE for {'fit_intercept': False, 'alpha': 10.0, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0707, stdev: 0.0028 MSE for {'fit_intercept': False, 'alpha': 100.0, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0782, stdev: 0.0025 MSE for {'fit_intercept': False, 'alpha': 1000.0, 'tol': 0.001, 'solver': 'auto'}

search space:
{'tol': [0.001], 'solver': ['auto'], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['auto'], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0227, stdev: 0.0007 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.01, 'fit_intercept': False}
mean: 0.0227, stdev: 0.0007 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.1, 'fit_intercept': False}
mean: 0.0228, stdev: 0.0008 MSE for {'solver': 'auto', 'tol': 0.001, 'alpha': 1.0, 'fit_intercept': False}
mean: 0.0239, stdev: 0.0010 MSE for {'solver': 'auto', 'tol': 0.001, 'alpha': 10.0, 'fit_intercept': False}
mean: 0.0253, stdev: 0.0012 MSE for {'solver': 'auto', 'tol': 0.001, 'alpha': 100.0, 'fit_intercept': False}
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'auto', 'tol': 0.001, 'alpha': 1000.0, 'fit_intercept': False}

search space:
{'tol': [0.001], 'solver': ['auto'], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['auto'], 'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.01, 'fit_intercept': False}
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.1, 'fit_intercept': False}
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 1.0, 'fit_intercept': False}
mean: 0.0620, stdev: 0.0038 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 10.0, 'fit_intercept': False}
mean: 0.0707, stdev: 0.0028 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 100.0, 'fit_intercept': False}
mean: 0.0782, stdev: 0.0025 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 1000.0, 'fit_intercept': False}

search space:
{'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001], 'fit_intercept': [False], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001], 'fit_intercept': [False], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0227, stdev: 0.0007 MSE for {'alpha': 0.01, 'solver': 'auto', 'fit_intercept': False, 'tol': 0.001}
mean: 0.0227, stdev: 0.0007 MSE for {'alpha': 0.1, 'solver': 'auto', 'fit_intercept': False, 'tol': 0.001}
mean: 0.0228, stdev: 0.0008 MSE for {'alpha': 1.0, 'solver': 'auto', 'fit_intercept': False, 'tol': 0.001}
mean: 0.0239, stdev: 0.0010 MSE for {'alpha': 10.0, 'solver': 'auto', 'fit_intercept': False, 'tol': 0.001}
mean: 0.0253, stdev: 0.0012 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 100.0, 'fit_intercept': False}
mean: 0.0257, stdev: 0.0012 MSE for {'alpha': 1000.0, 'solver': 'auto', 'fit_intercept': False, 'tol': 0.001}

search space:
{'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001], 'fit_intercept': [False], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0], 'tol': [0.001], 'fit_intercept': [False], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.01, 'fit_intercept': False}
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 0.1, 'fit_intercept': False}
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 1.0, 'fit_intercept': False}
mean: 0.0620, stdev: 0.0038 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 10.0, 'fit_intercept': False}
mean: 0.0707, stdev: 0.0028 MSE for {'tol': 0.001, 'solver': 'auto', 'alpha': 100.0, 'fit_intercept': False}
mean: 0.0782, stdev: 0.0025 MSE for {'alpha': 1000.0, 'solver': 'auto', 'fit_intercept': False, 'tol': 0.001}

search space:
{'alpha': [1.0, 100.0, 10000.0, 1000000.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0, 100.0, 10000.0, 1000000.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 0.0253, stdev: 0.0012 MSE for {'alpha': 100.0, 'tol': 0.001, 'solver': 'auto', 'fit_intercept': False}
mean: 0.0331, stdev: 0.0012 MSE for {'alpha': 10000.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 9.3862, stdev: 0.1044 MSE for {'alpha': 1000000.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}

search space:
{'alpha': [1.0, 100.0, 10000.0, 1000000.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0, 100.0, 10000.0, 1000000.0], 'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'solver': 'auto', 'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001}
mean: 0.0707, stdev: 0.0028 MSE for {'alpha': 100.0, 'tol': 0.001, 'solver': 'auto', 'fit_intercept': False}
mean: 0.0969, stdev: 0.0022 MSE for {'alpha': 10000.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}
mean: 6.5570, stdev: 0.1229 MSE for {'alpha': 1000000.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}

search space:
{'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr', 'sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr', 'sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'tol': 0.001, 'solver': 'svd', 'fit_intercept': False, 'alpha': 1.0}
mean: 0.0228, stdev: 0.0008 MSE for {'tol': 0.001, 'solver': 'cholesky', 'fit_intercept': False, 'alpha': 1.0}
mean: 0.0231, stdev: 0.0012 MSE for {'tol': 0.001, 'solver': 'lsqr', 'fit_intercept': False, 'alpha': 1.0}
mean: 0.0257, stdev: 0.0012 MSE for {'tol': 0.001, 'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0}

search space:
{'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr', 'sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr', 'sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'svd', 'fit_intercept': False, 'alpha': 1.0}
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'solver': 'cholesky', 'fit_intercept': False, 'alpha': 1.0}
mean: 0.0615, stdev: 0.0047 MSE for {'tol': 0.001, 'solver': 'lsqr', 'fit_intercept': False, 'alpha': 1.0}
mean: 0.0794, stdev: 0.0024 MSE for {'tol': 0.001, 'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0}

search space:
{'alpha': [1.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'solver': 'svd', 'fit_intercept': False, 'tol': 0.001, 'alpha': 1.0}
mean: 0.0228, stdev: 0.0008 MSE for {'solver': 'cholesky', 'fit_intercept': False, 'tol': 0.001, 'alpha': 1.0}
mean: 0.0231, stdev: 0.0012 MSE for {'solver': 'lsqr', 'fit_intercept': False, 'tol': 0.001, 'alpha': 1.0}

search space:
{'alpha': [1.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'fit_intercept': [False], 'tol': [0.001], 'solver': ['svd', 'cholesky', 'lsqr']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'svd'}
mean: 0.0613, stdev: 0.0041 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'cholesky'}
mean: 0.0615, stdev: 0.0047 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'lsqr'}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'alpha': [1.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'alpha': [1.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'tol': 0.001, 'solver': 'auto', 'fit_intercept': False, 'alpha': 1.0}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'alpha': [1.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'alpha': [1.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'tol': 0.001, 'alpha': 1.0, 'solver': 'auto', 'fit_intercept': False}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'solver': 'auto', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}

search space:
{'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto'], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto'], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'solver': 'auto', 'alpha': 1.0, 'tol': 0.001, 'fit_intercept': False}

search space:
{'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto'], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'tol': [0.001], 'solver': ['auto'], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'auto'}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0, 'solver': 'auto'}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['auto']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'alpha': 1.0, 'fit_intercept': False, 'tol': 0.001, 'solver': 'auto'}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0228, stdev: 0.0008 MSE for {'fit_intercept': False, 'solver': 'auto', 'tol': 0.001, 'alpha': 1.0}

search space:
{'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['auto'], 'tol': [0.001], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0613, stdev: 0.0041 MSE for {'fit_intercept': False, 'solver': 'auto', 'tol': 0.001, 'alpha': 1.0}

search space:
{'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg'], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg'], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg', 'fit_intercept': False}

search space:
{'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg'], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg'], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg', 'fit_intercept': False}

search space:
{'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0265, stdev: 0.0012 MSE for {'alpha': 1.0, 'tol': 0.001, 'fit_intercept': False, 'solver': 'sparse_cg'}

search space:
{'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0023 MSE for {'tol': 0.001, 'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0}

search space:
{'fit_intercept': [False], 'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0265, stdev: 0.0012 MSE for {'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0, 'solver': 'sparse_cg'}

search space:
{'fit_intercept': [False], 'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0023 MSE for {'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0, 'solver': 'sparse_cg'}

search space:
{'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0265, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 0.01, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0265, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 0.1, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0265, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 1.0, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0265, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 10, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0265, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 100, 'tol': 0.001, 'fit_intercept': False}

search space:
{'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0023 MSE for {'solver': 'sparse_cg', 'alpha': 0.01, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0778, stdev: 0.0023 MSE for {'solver': 'sparse_cg', 'alpha': 0.1, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0778, stdev: 0.0023 MSE for {'solver': 'sparse_cg', 'alpha': 1.0, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0778, stdev: 0.0023 MSE for {'solver': 'sparse_cg', 'alpha': 10, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0778, stdev: 0.0023 MSE for {'solver': 'sparse_cg', 'alpha': 100, 'tol': 0.001, 'fit_intercept': False}

search space:
{'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 0.01, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'tol': 0.001, 'alpha': 0.1}
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 1.0, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 10, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'alpha': 100, 'tol': 0.001, 'fit_intercept': False}

search space:
{'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'alpha': [0.01, 0.1, 1.0, 10, 100], 'tol': [0.001], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'tol': 0.001, 'alpha': 0.01}
mean: 0.0794, stdev: 0.0024 MSE for {'solver': 'sparse_cg', 'alpha': 0.1, 'tol': 0.001, 'fit_intercept': False}
mean: 0.0794, stdev: 0.0024 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'tol': 0.001, 'alpha': 1.0}
mean: 0.0794, stdev: 0.0024 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'tol': 0.001, 'alpha': 10}
mean: 0.0794, stdev: 0.0024 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'tol': 0.001, 'alpha': 100}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0, 'solver': 'sparse_cg'}

search space:
{'solver': ['sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0265, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}

search space:
{'solver': ['sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0023 MSE for {'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001}

search space:
{'tol': [0.001], 'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'tol': 0.001, 'alpha': 1.0, 'solver': 'sparse_cg', 'fit_intercept': False}

search space:
{'tol': [0.001], 'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'tol': 0.001, 'alpha': 1.0, 'solver': 'sparse_cg', 'fit_intercept': False}

search space:
{'tol': [0.001], 'solver': ['sparse_cg'], 'alpha': [1.0], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['sparse_cg'], 'alpha': [1.0], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0265, stdev: 0.0012 MSE for {'tol': 0.001, 'solver': 'sparse_cg', 'alpha': 1.0, 'fit_intercept': False}

search space:
{'tol': [0.001], 'solver': ['sparse_cg'], 'alpha': [1.0], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'solver': ['sparse_cg'], 'alpha': [1.0], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0778, stdev: 0.0023 MSE for {'tol': 0.001, 'solver': 'sparse_cg', 'alpha': 1.0, 'fit_intercept': False}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0264, stdev: 0.0032 MSE for {'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0, 'solver': 'sparse_cg'}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None)
grid search:
GridSearchCV(cv=sklearn.cross_validation.KFold(n=10862, n_folds=4, shuffle=False, random_state=None),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0787, stdev: 0.0068 MSE for {'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0, 'solver': 'sparse_cg'}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'tol': 0.001, 'fit_intercept': False, 'solver': 'sparse_cg', 'alpha': 1.0}

search space:
{'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'tol': 0.001, 'solver': 'sparse_cg', 'fit_intercept': False, 'alpha': 1.0}

search space:
{'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg'}

search space:
{'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg'}

search space:
{'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'tol': 0.001, 'alpha': 1.0, 'solver': 'sparse_cg', 'fit_intercept': False}

search space:
{'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'tol': [0.001], 'alpha': [1.0], 'solver': ['sparse_cg'], 'fit_intercept': [False]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'tol': 0.001, 'alpha': 1.0, 'solver': 'sparse_cg', 'fit_intercept': False}

search space:
{'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg'}

search space:
{'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg'}

search space:
{'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'fit_intercept': False, 'solver': 'sparse_cg', 'tol': 0.001, 'alpha': 1.0}

search space:
{'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'fit_intercept': False, 'tol': 0.001, 'solver': 'sparse_cg', 'alpha': 1.0}

search space:
{'solver': ['sparse_cg'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'solver': 'sparse_cg', 'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0}

search space:
{'solver': ['sparse_cg'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'solver': ['sparse_cg'], 'tol': [0.001], 'fit_intercept': [False], 'alpha': [1.0]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'solver': 'sparse_cg', 'tol': 0.001, 'fit_intercept': False, 'alpha': 1.0}

search space:
{'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'alpha': 1.0, 'fit_intercept': False, 'solver': 'sparse_cg', 'tol': 0.001}

search space:
{'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'alpha': [1.0], 'fit_intercept': [False], 'solver': ['sparse_cg'], 'tol': [0.001]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'alpha': 1.0, 'tol': 0.001, 'fit_intercept': False, 'solver': 'sparse_cg'}

search space:
{'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0257, stdev: 0.0012 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg'}

search space:
{'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
   normalize=False, solver='auto', tol=0.001),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'fit_intercept': [False], 'alpha': [1.0], 'tol': [0.001], 'solver': ['sparse_cg']},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0794, stdev: 0.0024 MSE for {'fit_intercept': False, 'alpha': 1.0, 'tol': 0.001, 'solver': 'sparse_cg'}

search space:
{'max_depth': [10], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0192, stdev: 0.0005 MSE for {'max_depth': 10, 'n_estimators': 500, 'alpha': 0.9, 'subsample': 0.7, 'max_features': None, 'min_samples_split': 2, 'loss': 'ls', 'learning_rate': 0.01, 'max_leaf_nodes': 100, 'min_samples_leaf': 1}

search space:
{'max_depth': [10], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'subsample': [0.7]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_depth': [10], 'loss': ['ls'], 'alpha': [0.9], 'min_samples_leaf': [1], 'max_features': [None], 'min_samples_split': [2], 'n_estimators': [500], 'learning_rate': [0.01], 'max_leaf_nodes': [100], 'subsample': [0.7]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0537, stdev: 0.0046 MSE for {'max_depth': 10, 'loss': 'ls', 'alpha': 0.9, 'subsample': 0.7, 'max_features': None, 'min_samples_split': 2, 'learning_rate': 0.01, 'n_estimators': 500, 'max_leaf_nodes': 100, 'min_samples_leaf': 1}

search space:
{'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0193, stdev: 0.0006 MSE for {'min_samples_leaf': 1, 'min_samples_split': 2, 'loss': 'ls', 'max_depth': 10, 'max_features': None, 'alpha': 0.9, 'learning_rate': 0.01, 'n_estimators': 500, 'subsample': 0.7, 'max_leaf_nodes': 100}

search space:
{'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_leaf': [1], 'min_samples_split': [2], 'loss': ['ls'], 'learning_rate': [0.01], 'max_features': [None], 'alpha': [0.9], 'max_depth': [10], 'max_leaf_nodes': [100], 'subsample': [0.7], 'n_estimators': [500]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0537, stdev: 0.0045 MSE for {'min_samples_leaf': 1, 'min_samples_split': 2, 'loss': 'ls', 'learning_rate': 0.01, 'max_features': None, 'alpha': 0.9, 'max_depth': 10, 'n_estimators': 500, 'subsample': 0.7, 'max_leaf_nodes': 100}

search space:
{'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'alpha': [0.9], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'learning_rate': [0.005], 'n_estimators': [1000], 'subsample': [0.6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'alpha': [0.9], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'learning_rate': [0.005], 'n_estimators': [1000], 'subsample': [0.6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0192, stdev: 0.0005 MSE for {'min_samples_split': 2, 'max_leaf_nodes': 100, 'max_depth': 10, 'loss': 'ls', 'max_features': None, 'alpha': 0.9, 'n_estimators': 1000, 'min_samples_leaf': 1, 'learning_rate': 0.005, 'subsample': 0.6}

search space:
{'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'alpha': [0.9], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'learning_rate': [0.005], 'n_estimators': [1000], 'subsample': [0.6]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [2], 'max_depth': [10], 'loss': ['ls'], 'max_features': [None], 'alpha': [0.9], 'max_leaf_nodes': [100], 'min_samples_leaf': [1], 'learning_rate': [0.005], 'n_estimators': [1000], 'subsample': [0.6]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0535, stdev: 0.0044 MSE for {'min_samples_split': 2, 'max_leaf_nodes': 100, 'max_depth': 10, 'loss': 'ls', 'max_features': None, 'alpha': 0.9, 'n_estimators': 1000, 'min_samples_leaf': 1, 'learning_rate': 0.005, 'subsample': 0.6}

search space:
{'learning_rate': [0.005], 'max_features': [None], 'subsample': [0.5], 'max_depth': [10], 'min_samples_leaf': [1], 'alpha': [0.9], 'loss': ['ls'], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'n_estimators': [1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.005], 'max_features': [None], 'subsample': [0.5], 'max_depth': [10], 'min_samples_leaf': [1], 'alpha': [0.9], 'loss': ['ls'], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'n_estimators': [1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0192, stdev: 0.0005 MSE for {'max_features': None, 'learning_rate': 0.005, 'max_depth': 10, 'subsample': 0.5, 'n_estimators': 1000, 'loss': 'ls', 'alpha': 0.9, 'min_samples_leaf': 1, 'min_samples_split': 2, 'max_leaf_nodes': 100}

search space:
{'learning_rate': [0.005], 'max_features': [None], 'subsample': [0.5], 'max_depth': [10], 'min_samples_leaf': [1], 'alpha': [0.9], 'loss': ['ls'], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'n_estimators': [1000]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'learning_rate': [0.005], 'max_features': [None], 'subsample': [0.5], 'max_depth': [10], 'min_samples_leaf': [1], 'alpha': [0.9], 'loss': ['ls'], 'max_leaf_nodes': [100], 'min_samples_split': [2], 'n_estimators': [1000]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0531, stdev: 0.0044 MSE for {'learning_rate': 0.005, 'max_leaf_nodes': 100, 'min_samples_leaf': 1, 'subsample': 0.5, 'alpha': 0.9, 'loss': 'ls', 'n_estimators': 1000, 'min_samples_split': 2, 'max_features': None, 'max_depth': 10}

search space:
{'min_samples_leaf': [1], 'max_depth': [10], 'n_estimators': [1000], 'min_samples_split': [2], 'learning_rate': [0.005], 'max_leaf_nodes': [100], 'max_features': [None], 'subsample': [0.5], 'loss': ['ls'], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_leaf': [1], 'max_depth': [10], 'n_estimators': [1000], 'min_samples_split': [2], 'learning_rate': [0.005], 'max_leaf_nodes': [100], 'max_features': [None], 'subsample': [0.5], 'loss': ['ls'], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0192, stdev: 0.0004 MSE for {'max_leaf_nodes': 100, 'min_samples_split': 2, 'n_estimators': 1000, 'alpha': 0.9, 'learning_rate': 0.005, 'min_samples_leaf': 1, 'max_features': None, 'subsample': 0.5, 'loss': 'ls', 'max_depth': 10}

search space:
{'min_samples_leaf': [1], 'max_depth': [10], 'n_estimators': [1000], 'min_samples_split': [2], 'learning_rate': [0.005], 'max_leaf_nodes': [100], 'max_features': [None], 'subsample': [0.5], 'loss': ['ls'], 'alpha': [0.9]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=GradientBoostingRegressor(alpha=0.9, init=None, learning_rate=0.1, loss='ls',
             max_depth=3, max_features=None, max_leaf_nodes=None,
             min_samples_leaf=1, min_samples_split=2,
             min_weight_fraction_leaf=0.0, n_estimators=100,
             random_state=None, subsample=1.0, verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_leaf': [1], 'max_depth': [10], 'n_estimators': [1000], 'min_samples_split': [2], 'learning_rate': [0.005], 'max_leaf_nodes': [100], 'max_features': [None], 'subsample': [0.5], 'loss': ['ls'], 'alpha': [0.9]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0532, stdev: 0.0043 MSE for {'max_leaf_nodes': 100, 'min_samples_split': 2, 'n_estimators': 1000, 'alpha': 0.9, 'learning_rate': 0.005, 'min_samples_leaf': 1, 'max_features': None, 'subsample': 0.5, 'loss': 'ls', 'max_depth': 10}

search space:
{'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0201, stdev: 0.0012 MSE for {'max_features': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'max_features': [None], 'min_samples_split': [8], 'max_leaf_nodes': [1024], 'n_estimators': [500], 'min_samples_leaf': [4], 'max_depth': [20]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0554, stdev: 0.0040 MSE for {'max_features': None, 'min_samples_split': 8, 'max_leaf_nodes': 1024, 'n_estimators': 500, 'min_samples_leaf': 4, 'max_depth': 20}

search space:
{'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [16384], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [16384], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0201, stdev: 0.0012 MSE for {'n_estimators': 1000, 'max_depth': 20, 'max_leaf_nodes': 16384, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None}

search space:
{'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [16384], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'n_estimators': [1000], 'max_depth': [20], 'max_leaf_nodes': [16384], 'min_samples_split': [8], 'min_samples_leaf': [4], 'max_features': [None]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0553, stdev: 0.0039 MSE for {'n_estimators': 1000, 'max_depth': 20, 'max_leaf_nodes': 16384, 'min_samples_split': 8, 'min_samples_leaf': 4, 'max_features': None}

search space:
{'min_samples_split': [4], 'min_samples_leaf': [2], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [16384]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [4], 'min_samples_leaf': [2], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [16384]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0197, stdev: 0.0011 MSE for {'min_samples_split': 4, 'min_samples_leaf': 2, 'n_estimators': 1000, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 16384}

search space:
{'min_samples_split': [4], 'min_samples_leaf': [2], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [16384]}
cross validation:
sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 0 ..., 1 1 1])
grid search:
GridSearchCV(cv=sklearn.cross_validation.PredefinedSplit(test_fold=[0 0 ..., 1 1]),
       error_score='raise',
       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=10, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False),
       fit_params={}, iid=True, loss_func=None, n_jobs=4,
       param_grid={'min_samples_split': [4], 'min_samples_leaf': [2], 'n_estimators': [1000], 'max_features': [None], 'max_depth': [20], 'max_leaf_nodes': [16384]},
       pre_dispatch='2*n_jobs', refit=False, score_func=None,
       scoring='mean_squared_error', verbose=3)
mean: 0.0551, stdev: 0.0041 MSE for {'min_samples_split': 4, 'min_samples_leaf': 2, 'n_estimators': 1000, 'max_features': None, 'max_depth': 20, 'max_leaf_nodes': 16384}

